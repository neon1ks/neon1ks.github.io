<!DOCTYPE HTML>
<html lang="ru">
<HEAD>
<TITLE>Выражения - cправочник по Си</TITLE>
<meta charset="utf-8">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#24">Содержание</A> | <A href="24.htm">&lt;&lt;&lt;</A> | <A href="2402.htm">&gt;&gt;&gt;</A><HR>
<H1>Выражения</H1>
<P class="tj">Несмотря на то, что выражения можно составлять из данных любых типов, в настоящей главе рассматриваются только числовые выражения. Для наших целей мы условимся, что числовые выражения будут состоять из следующих элементов:
<ul class="square">
<LI>Числа
<LI>Операторы (знаки операций) <KBD>+</KBD>, <KBD>-</KBD>, <KBD>/</KBD>, <KBD>*</KBD>, <KBD>^</KBD>, <KBD>%</KBD>, <KBD>=</KBD>
<LI>Скобки
<LI>Переменные
</ul>
<P class="tj">Оператор ^ означает возведение в степень, как в языке BASIC, а символ = обозначает оператор присваивания. Перечисленные элементы можно комбинировать в выражения согласно правилам алгебры, например:
<PRE>
10 - 8
(100 - 5) * 14 / 6
a + b - c
10^5
a = 10 - b
</PRE>
<P class="tj">Пусть операторы имеют следующий приоритет:
<PRE>
<B>высший</B>     унарный + и -
           ^
           * / %
           + -
<B>низший</B>     =
</PRE>
<P class="tj">Если выражение содержит операторы, имеющие одинаковый приоритет, то вычисления выполняются слева направо<SUP><A href="#11" id="1">[1]</A></SUP>.
<P class="tj">В примерах данной главы все переменные имеют имена из одной буквы (другими словами, допускается 26 переменных, от <B>А</B> до <B>Z</B>). Имена переменных не чувствительны к регистру (заглавных или строчных букв). Например, <B>а</B> и <B>А</B> обозначают одну и ту же переменную. Каждое числовое значение имеет тип <KBD>double</KBD>, хотя не составляет труда написать процедуры для обработки значений других типов. Наконец, чтобы логика программ была простой и понятной, будет производиться лишь минимальный контроль за ошибками.
<P class="tj">Если вы еще не задумывались о процессе синтаксического разбора выражений, попробуйте вычислить следующее выражение:
<PRE>10 - 2 * 3</PRE>
<P class="tj">Вы знаете, что оно равно 4. Несмотря на то, что можно легко создать программу, которая вычислит данное <I>конкретное</I> выражение, вопрос состоит в том, как написать программу, выдающую правильный результат для <I>произвольного</I> выражения. В начале вам может придти в голову следующий алгоритм:
<PRE>
a = получить первый операнд
while(есть операнд){
  op = получить опретор
  b = получить второй операнд
  a = a op b
}
</PRE>
<P class="tj">Эта процедура получает первый операнд, оператор и второй операнд, выполняет над ними первую операцию, а затем читает следующий оператор и операнд (если они есть) и выполняет следующую операцию, обозначенную полученным оператором и т.д.
<P class="tj">Однако при данном подходе при вычислении выражения 10 - 2 * 3 в результате получается 24 (т.е. 8 * 3) вместо 4, поскольку описанная процедура не учитывает приоритет операторов. Нельзя просто выбирать операнды и операторы слева направо, поскольку правила алгебры гласят, что умножение производится прежде вычитания. Некоторые начинающие программисты думают, что эту проблему легко преодолеть. В очень редких случаях им это удается. Но проблема усложняется при добавлении скобок, возведении в степень, появлении переменных, вызове функций и т.п.
<P class="tj">Несмотря на то, что существует несколько способов написания программы вычисления выражений, описываемый нами способ наиболее прост для кодирования человеком. Он также является самым распространенным. (При некоторых других методах создания синтаксических анализаторов в них применяются сложные таблицы, генерируемые другой компьютерной программой. Такие анализаторы иногда называются <I>таблично управляемыми</I> (table-driven).) Описанный здесь метод называется методом <I>рекурсивного спуска</I>, и, читая главу, вы, несомненно, догадаетесь, почему он так называется.
<p><IMG src="../work/sup.bmp" alt="----------">
<BLOCKQUOTE>
<P class="tj"><SUP><A href="#1" id="11">[1]</A></SUP>Впрочем, здесь есть одно часто встречающееся исключение — оператор возведения в степень. X**Y**Z означает, как правило, не (X**Y)**Z, a X**(Y**Z). (Оператор ** — обычное обозначение операции возведения в степень во многих языках программирования, наиболее распространенным из которых является Фортран.) Точно то же происходит и в алгебре: выражение а<SUP>b<SUP>c</SUP></SUP> означает а<SUP>(b<SUP>c</SUP>)</SUP>, а не (а<SUP>b</SUP>)<SUP>c</SUP> = а<SUP>b</SUP><SUP>c</SUP>.
</BLOCKQUOTE>
<p>
</p>
<HR><A href="../main.htm#24">Содержание</A> | <A href="24.htm">&lt;&lt;&lt;</A> | <A href="2402.htm">&gt;&gt;&gt;</A>
</BODY>
</html>
