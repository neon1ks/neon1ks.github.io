<!DOCTYPE HTML>
<html lang="ru">
<HEAD>
<TITLE>Функция va_arg, va_start, va_end, va_copy - cправочник по Си</TITLE>
<meta charset="utf-8"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#18">Содержание</A> | <A href="18.htm#00">Глава 18</A><HR>
<H1>Функция va_arg, va_start, va_end, va_copy</H1>








<PRE>
#include &lt;stdarg.h&gt;
type va_arg(va_list <I>argptr</I>, <I>type</I>);
void va_copy(va_list <I>target</I>, va_list <I>source</I>);
void va_end(va_list <I>argptr</I>);
void va_start(va_list <I>argptr</I>, <I>last_parm</I>);
</PRE>
<P class="tj">Макрос <KBD>va_copy()</KBD> добавлен в версии С99.
<P class="tj">Для передачи функции переменного числа аргументов совместно используются макросы <KBD>va_arg</KBD>, <KBD>va_start</KBD> и <KBD>va_end</KBD>. Самым распространенным примером функции, которая принимает переменное число аргументов, является функция <KBD>printf()</KBD>. Тип <KBD>va_list</KBD> определен в заголовке <KBD>&lt;stdarg.h&gt;</KBD>.
<P class="tj">Общая процедура создания функции, которая может принимать переменное количество аргументов, такова:
<P class="tj">Функция должна иметь по крайней мере один известный параметр (может и больше), указываемый до переменного списка параметров. (Такие параметры называются также обязательными, а параметры, следующие за ними — необязательными.) Крайний правый известный параметр называется <I>last_parm</I>. (Он предшествует первому необязательному параметру.) Его имя используется в качестве второго параметра в обращении к макросу <KBD>va_start()</KBD>. Чтобы получить доступ к любому дополнительному параметру, сначала необходимо инициализировать указатель-аргумент <I>argptr</I><SUP><A href="#11" id="1">[1]</A></SUP>, обратившись к макросу <KBD>va_start()</KBD>. (Иными словами, необходимо выполнить вызов <KBD>va_start(<I>argptr</I>, &lt;имя <I>last_parm</I>&gt;)</KBD>.) После этого значения параметров возвращаются в результате вызова макроса <KBD>va_arg()</KBD>. В качестве второго аргумента этого макроса (соответствующего параметру <I>type</I>), нужно указать тип следующего параметра<SUP><A href="#22" id="2">[2]</A></SUP>. Наконец, после прочтения всех параметров до возвращения из функции необходимо вызвать макрос <KBD>va_end()</KBD>, чтобы гарантировать корректное восстановление стека. Если макрос <KBD>va_end()</KBD> вызван не будет, высока вероятность аварийного отказа программы.
<P class="tj">Макрос <KBD>va_copy()</KBD> копирует список аргументов, обозначенный параметром <I>target</I>, в объект, обозначенный параметром <I>source</I>.
<H2>Пример</H2>
<P class="tj">Эта программа использует функцию <KBD>sum_series()</KBD>, возвращающую сумму последовательности чисел. Первый аргумент содержит число дополнительно передаваемых аргументов. В этом примере программа суммирует первые пять слагаемых суммы
<PRE>
1   1   1   1          1
- + - + - + -- + ... + --
2   4   8   16         2<SUP><I>N</I></SUP>
</PRE>
<P class="tj">Будет выведено<PRE>0.968750</PRE>
<PRE>
#include &lt;stdio.h&gt;
#include &lt;stdarg.h&gt;

double sum_series(int num, ...);

/* Пример переменного числа аргументов - сумма последовательности. */
int main(void)
{
  double d;

  d = sum_series(5, 0.5, 0.25, 0.125, 0.0625, 0.03125);

  printf("Сумма последовательности %f.\n", d);

  return 0;
}

double sum_series(int num, ...)
{
  double sum=0.0, t;
  va_list argptr;

  /* Инициализация argptr */
  va_start(argptr, num);

  /* сумма последовательности */
  for( ; num; num--) {
    t = va_arg(argptr, double); /* получить следующий аргумент */
    sum += t;
  }

  /* выполнение корректного выхода */
  va_end(argptr);
  return sum;
}
</PRE>
<H2>Зависимые функции</H2>
<A href="../13/vprintf-vfprintf-vsprintf-vsnprintf.htm">vprintf()</A>
<P><IMG src="../work/sup.bmp" alt="----------">
<BLOCKQUOTE>
<P class="tj"><SUP><A href="#1" id="11">[1]</A></SUP>Он должен быть объявлен, например, так: <PRE>va_list <I>argptr</I>;</PRE>
<P class="tj"><SUP><A href="#2" id="22">[2]</A></SUP>Ну где вы видели функцию, которой в качестве аргумента передается служебное слово? Конечно, это возможно именно потому, что <KBD>va_arg()</KBD> — макрос, а не функция языка С. Кроме того, посмотрите на описание <I>type</I><PRE>va_arg(va_list <I>argptr</I>, <I>type</I>);</PRE><P class="t">Какой же компилятор позволит вам так описывать функцию?!
</BLOCKQUOTE>


<p>






</p>
<small>
 
</small><HR><A href="../main.htm#18">Содержание</A> | <A href="18.htm#00">Глава 18</A>
</BODY>
</html>
