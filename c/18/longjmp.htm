<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>Функция longjmp - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head>
<body>


<a href="../main.htm#18">Содержание</a> | <a href="18.htm#00">Глава 18</a><hr>
<h1>Функция longjmp</h1>
<pre>
#include &lt;setjmp.h&gt;
void longjmp(jmp_buf <em>envbuf</em>, int <em>status</em>);
</pre>
<p class="tj">Функция <kbd>longjmp()</kbd> возобновляет выполнение программы с места последнего обращения к функции <kbd>setjmp()</kbd>. Таким образом, функции <kbd>longjmp()</kbd> и <kbd>setjmp()</kbd> предоставляют средство передачи управления между функциями. Обратите внимание на необходимость включения заголовка <kbd>&lt;setjmp.h&gt;</kbd>.
<p class="tj">Функция <kbd>longjmp()</kbd> восстанавливает состояние стека, сохраненное в буфере <em>envbuf</em> с помощью функции <kbd>setjmp()</kbd>. В результате выполнение программы возобновляется с оператора, следующего за вызовом функции <kbd>setjmp()</kbd>. Иначе говоря, компьютер "вводится в заблуждение": "он считает", будто управление программой не выходило за пределы функции, которая вызвала функцию <kbd>setjmpt()</kbd>. (Выражаясь образно, функция <kbd>longjmp()</kbd> подобна многомерной машине пространства-времени. Она позволяет путешествовать во времени, не соблюдая какой бы то ни было последовательности событий: с ее помощью можно вернуться в "покинутый мир", не обращая внимания на то, что предварительно должен был быть произведен выход из вызванных функций. С ее помощью можно "вернуться домой", минуя промежуточные пункты. Она "искривляет" время и пространство (памяти) так, что с ее помощью можно попасть в покинутую точку программы, не выполняя нормальный процесс возврата из функции.)
<p class="tj">Буфер <em>evnbuf</em> имеет тип <kbd>jmp_buf</kbd>, который определен в заголовке <kbd>&lt;setjmp.h&gt;</kbd>. Этот буфер должен быть заполнен в результате обращения к функции <kbd>setjmp()</kbd> еще до вызова функции <kbd>longjmp()</kbd>.
<p class="tj">Значение параметра <em>status</em> становится возвращаемым значением функции <kbd>setjmp()</kbd>, и оно используется для того, чтобы определить "происхождение длинного перехода". Единственным недопустимым значением является нуль. Функция <kbd>setjmp()</kbd> возвращает нуль в том случае, когда она вызывается непосредственно программой, а не косвенно, т.е. путем выполнения функции <kbd>longjmp()</kbd>.
<p class="tj">Функция <kbd>longjmp()</kbd> используется в основном для возврата из глубоко вложенного набора функций при возникновении ошибок.
<h2>Пример</h2>
<p class="tj">Эта программа печатает <pre>1 2 3</pre>
<pre>
#include &lt;setjmp.h&gt;
#include &lt;stdio.h&gt;
jmp_buf ebuf;
void f2(void);
int main(void)
{
  int i;
  printf("1 ");
  i = setjmp(ebuf);
  if(i == 0) {
    f2();
    printf("Это не будет напечатано.");
  }
  printf("%d", i);
  return 0;
}
void f2(void)
{
  printf("2 ");
  longjmp(ebuf, 3);
}
</pre>
<h2>Зависимые функции</h2>
<a href="setjmp.htm">setjmp()</a>
<hr><a href="../main.htm#18">Содержание</a> | <a href="18.htm#00">Глава 18</a>


</body>
</html>
