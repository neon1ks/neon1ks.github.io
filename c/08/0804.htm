<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>printf() - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head><body>
<style type="text/css">
.size {font-size:20pt;}
</style>
<a href="../main.htm#08">Содержание</a> | <a href="0803.htm">&lt;&lt;&lt;</a> | <a href="0805.htm">&gt;&gt;&gt;</a><hr>
<h1>printf()</h1>
<p class="tj">Вот прототип функции <kbd>printf()</kbd>:
<pre>int printf(const char *<em>управляющая_строка</em>, ...);</pre>
<p class="tj">Функция <kbd>printf()</kbd> возвращает число выведенных символов или отрицательное значение в случае ошибки.
<p class="tj"><em>Управляющая_строка</em><sup><a href="#11" id="1">[1]</a></sup> состоит из элементов двух видов. Первый из них — это символы, которые предстоит вывести на экран; второй — это <em>спецификаторы преобразования</em><sup><a href="#22" id="2">[2]</a></sup>, которые определяют способ вывода стоящих за ними аргументов. Каждый такой спецификатор начинается со знака процента, за которым следует код формата. Аргументов должно быть ровно столько, сколько и спецификаторов, причем спецификаторы преобразования и аргументы должны попарно соответствовать друг другу в направлении слева направо. Например, в результате такого вызова <kbd>printf()</kbd>
<pre>printf("Мне нравится язык %c %s", 'C', "и к тому же очень сильно!");</pre>
<p class="tj">Будет выведено
<pre>Мне нравится язык C и к тому же очень сильно!</pre>
<p class="tj">В этом примере первому спецификатору преобразования (<kbd>%c</kbd>), соответствует символ 'C', а второму (<kbd>%s</kbd>), — строка "и к тому же очень сильно!".
<p class="tj">В функции <kbd>printf()</kbd>, как видно из табл. 8.2, имеется широкий набор спецификаторов преобразования.</p>
<table class="table table-bordered">
<caption><strong>Таблица 8.2. Спецификаторы преобразования для функции <kbd>printf()</kbd></strong></caption>
<tr><th><em>Код</em><th><em>Формат</em>
<tr><td><kbd>%a</kbd><td class="t">Шестнадцатеричное в виде <em>0xh.hhhhp+d</em> (только С99)
<tr><td><kbd>%A</kbd><td class="t">Шестнадцатеричное в виде <em>0Xh.hhhhP+d</em> (только С99)
<tr><td><kbd>%c</kbd><td class="t">Символ
<tr><td><kbd>%d</kbd><td class="t">Десятичное целое со знаком
<tr><td><kbd>%i</kbd><td class="t">Десятичное целое со знаком
<tr><td><kbd>%e</kbd><td class="t">Экспоненциальное представление ('е' на нижнем регистре)
<tr><td><kbd>%E</kbd><td class="t">Экспоненциальное представление ('Е' на верхнем регистре)
<tr><td><kbd>%f</kbd><td class="t">Десятичное с плавающей точкой
<tr><td><kbd>%g</kbd><td class="t">В зависимости от того, какой вывод будет короче, используется <kbd>%е</kbd> или <kbd>%f</kbd>
<tr><td><kbd>%G</kbd><td class="t">В зависимости от того, какой вывод будет короче, используется <kbd>%Е</kbd> или <kbd>%F</kbd>
<tr><td><kbd>%o</kbd><td class="t">Восьмеричное без знака
<tr><td><kbd>%s</kbd><td class="t">Строка символов
<tr><td><kbd>%u</kbd><td class="t">Десятичное целое без знака
<tr><td><kbd>%x</kbd><td class="t">Шестнадцатеричное без знака (буквы на нижнем регистре)
<tr><td><kbd>%X</kbd><td class="t">Шестнадцатеричное без знака (буквы на верхнем регистре)
<tr><td><kbd>%p</kbd><td class="t">Выводит указатель
<tr><td><kbd>%n</kbd><td class="t">Аргумент, соответствующий этому спецификатору, должен быть указателем на целочисленную переменную. Спецификатор позволяет сохранить в этой переменной количество записанных символов (записанных до того места, в котором находится код <kbd>%n</kbd>)
<tr><td><kbd>%%</kbd><td class="t">Выводит знак <kbd>%</kbd>
</table>
<h2>Вывод символов</h2>
<p class="tj">Для вывода отдельного символа используйте <kbd>%с</kbd>. В результате соответствующий аргумент будет выведен на экран без изменения.
<p class="tj">Для вывода строки используйте <kbd>%s</kbd>.
<h2>Вывод чисел</h2>
<p class="tj">Числа в десятичном формате со знаком отображаются с помощью спецификатора преобразования <kbd>%d</kbd> или <kbd>%i</kbd>. Эти спецификаторы преобразования эквивалентны; оба поддерживаются в силу сложившихся привычек программистов, например, из-за желания поддерживать те же спецификаторы, которые применяются в функции <kbd>scanf()</kbd>.
<p class="tj">Для вывода целого значения без знака используйте <kbd>%u</kbd>.
<p class="tj">Спецификатор преобразования <kbd>%f</kbd> дает возможность выводить числа в формате с плавающей точкой. Соответствующий аргумент должен иметь тип <kbd>double</kbd>.
<p class="tj">Спецификаторы преобразования %e и %E в функции <kbd>printf()</kbd> позволяют отображать аргумент типа <kbd>double</kbd> в экспоненциальном формате. В общем виде числа в таком формате выглядят следующим образом:
<pre>x.dddddE+/-yy</pre>
<p class="tj">Чтобы отобразить букву E в верхнем регистре, используйте спецификатор преобразования <kbd>%E</kbd>; в противном случае используйте спецификатор преобразования <kbd>%e</kbd>.
<p class="tj">Спецификатор преобразования <kbd>%g</kbd> или <kbd>%G</kbd> указывает, что функции <kbd>printf()</kbd> необходимо выбрать один из спецификаторов: <kbd>%f</kbd> или <kbd>%e</kbd>. В результате <kbd>printf()</kbd> выберет тот спецификатор преобразования, который позволяет сделать самый короткий вывод. Если нужно, чтобы при выборе экспоненциального формата буква E отображалась на верхнем регистре, используйте спецификатор преобразования <kbd>%G</kbd>; в противном случае используйте спецификатор преобразования <kbd>%g</kbd>.
<p class="tj">Применение спецификатора преобразования <kbd>%g</kbd> показано в следующей программе:
<pre>
#include &lt;stdio.h&gt;
int main(void)
{
  double f;
  for(f=1.0; f&lt;1.0e+10; f=f*10)
    printf("%g ", f);
  return 0;
}
</pre>
<p class="tj">В результате выполнения получится следующее:
<pre>1  10  100  1000  10000  100000  1e+06  1e+07  1e+08  1e+09</pre>
<p class="tj">Целые числа без знака можно выводить в восьмеричном или шестнадцатеричном формате, используя спецификатор преобразования <kbd>%o</kbd> или <kbd>%x</kbd>. Так как в шестнадцатеричной системе для представления чисел от 10 до 15 используются буквы от А до F, то эти буквы можно выводить на верхнем или на нижнем регистре. Как показано ниже, в первом случае используется спецификатор преобразования <kbd>%X</kbd>, а во втором — спецификатор преобразования <kbd>%x</kbd>:
<pre>
#include &lt;stdio.h&gt;
int main(void)
{
  unsigned num;
  for(num=0; num &lt; 16; num++) {
    printf("%o ", num);
    printf("%x ", num);
    printf("%X\n", num);
  }
  return 0;
}
</pre>
<p class="tj">Вот что вывела эта программа:
<pre>
0 0 0
1 1 1
2 2 2
3 3 3
4 4 4
5 5 5
6 6 6
7 7 7
10 8 8
11 9 9
12 a A
13 b B
14 c C
15 d D
16 e E
17 f F
</pre>
<h2>Отображение адреса</h2>
<p class="tj">Для отображения адреса используйте спецификатор преобразования <kbd>%p</kbd>. Этот спецификатор преобразования дает <kbd>printf()</kbd> указание отобразить машинный адрес в формате, совместимом с адресацией, которая используется компьютером. Следующая программа отображает адрес переменной <kbd>sample</kbd>:
<pre>
#include &lt;stdio.h&gt;
int sample;
int main(void)
{
  printf("%p", &sample);
  return 0;
}
</pre>
<h2>Спецификатор преобразования %n</h2>
<p class="tj">Спецификатор <kbd>%n</kbd> довольно значительно отличается от остальных спецификаторов преобразования. Когда функция <kbd>printf()</kbd> встречает его, ничто не выводится. Вместо этого выполняется совсем другое действие: в целую переменную, указанную соответствующим аргументом функции, записывается количество выведенных символов. Другими словами, значение, которое соответствует спецификатору преобразования <kbd>%n</kbd>, должно быть указателем на переменную. После завершения вызова <kbd>printf()</kbd> в этой переменной будет храниться количество символов, выведенных до того момента, когда встретился спецификатор преобразования <kbd>%n</kbd>. Чтобы уяснить смысл этого несколько необычного спецификатора преобразования, разберитесь, как работает следующая программа:
<pre>
#include &lt;stdio.h&gt;
int main(void)
{
  int count;
  printf("this%n is a test\n", &count);
  printf("%d", count);
  return 0;
}
</pre>
<p class="tj">Программа отображает строку <kbd>Это проверка</kbd>, после которой появляется число <kbd>3</kbd>. Спецификатор преобразования <kbd>%n</kbd> в основном используется в программе для выполнения динамического форматирования.
<h2>Модификаторы формата</h2>
<p class="tj">Во многих спецификаторах преобразования можно указать модификаторы<sup><a href="#33" id="3">[3]</a></sup>, которые слегка меняют их значение. Например, можно указывать минимальную ширину поля, количество десятичных разрядов и выравнивание по левому краю. Модификатор формата помещают между знаком процента и кодом формата. Об этих модификаторах сейчас и пойдет речь.
<h2>Модификаторы минимальной ширины поля</h2>
<p class="tj">Целое число, расположенное между знаком <kbd>%</kbd> и кодом формата, играет роль <em>модификатора минимальной ширины поля</em>. Если указан модификатор минимальной ширины поля, то чтобы ширина поля вывода была не меньше указанной минимальной длины, при необходимости вывод будет дополнен пробелами. Если же выводятся строки или числа, которые длиннее указанного минимума, то они все равно будут отображаться полностью. По умолчанию для дополнения используются пробелы. А если для этого надо использовать нули, то перед модификатором ширины поля следует поместить 0. Например, <kbd>%05d</kbd> означает, что любое число, количество цифр которого меньше пяти, будет дополнено таким количеством нулей, чтобы число состояло из пяти цифр. В следующей программе показано, как применяется модификатор минимальной ширины поля:
<pre>
#include &lt;stdio.h&gt;
int main(void)
{
  double item;
  item = 10.12304;
  printf("%f\n", item);
  printf("%10f\n", item);
  printf("%012f\n", item);
  return 0;
}
</pre>
<p class="tj">Вот что выводится при выполнении этой программы:
<pre>
10.123040
 10.123040
00010.123040
</pre>
<p class="tj">Модификатор минимальной ширины поля чаще всего используется при создании таблиц, в которых столбцы должны быть выровнены по вертикали. Например, следующая программа выводит таблицу квадратов и кубов чисел от 1 до 19:
<pre>
#include &lt;stdio.h&gt;
int main(void)
{
  int i;
  /* вывод таблицы квадратов и кубов */
  for(i=1; i&lt;20; i++)
    printf("%8d %8d %8d\n", i, i*i, i*i*i);
  return 0;
}
</pre>
А вот пример полученного с ее помошью вывода:
<pre>
 1       1       1
 2       4       8
 3       9      27
 4      16      64
 5      25     125
 6      36     216
 7      49     343
 8      64     512
 9      81     729
10     100    1000
11     121    1331
12     144    1728
13     169    2197
14     196    2744
15     225    3375
16     256    4096
17     289    4913
18     324    5832
19     361    6859
</pre>
<h2>Модификаторы точности</h2>
<p class="tj"><em>Модификатор точности</em> следует за модификатором минимальной ширины поля (если таковой имеется). Он состоит из точки и расположенного за ней целого числа. Значение этого модификатора зависит от типа данных, к которым его применяют.
<p class="tj">Когда модификатор точности применяется к данным с плавающей точкой, для преобразования которых используются спецификаторы преобразования <kbd>%f</kbd>, <kbd>%e</kbd> или <kbd>%E</kbd>, то он определяет количество выводимых десятичных разрядов. Например, <kbd>%10.4f</kbd> означает, что ширина поля вывода будет не менее 10 символов, причем для десятичных разрядов будет отведено четыре позиции.
<p class="tj">Если модификатор точности применяется к <kbd>%g</kbd> или <kbd>%G</kbd>, то он определяет количество значащих цифр.
<p class="tj">Примененный к строкам, модификатор точности определяет максимальную длину поля. Например, <kbd>%5.7s</kbd> означает, что длина выводимой строки будет составлять минимум пять и максимум семь символов. Если строка окажется длиннее, чем максимальная длина поля, то конечные символы выводиться не будут.
<p class="tj">Если модификатор точности применяется к целым типам, то он определяет минимальное количество цифр, которые будут выведены для каждого из чисел. Чтобы получилось требуемое количество цифр, добавляется некоторое количество ведущих нулей.
<p class="tj">В следующей программе показано, как можно использовать модификатор точности:
<pre>
#include &lt;stdio.h&gt;
int main(void)
{
  printf("%.4f\n", 123.1234567);
  printf("%3.8d\n", 1000);
  printf("%10.15s\n", "Это простая проверка.");
  return 0;
}
</pre>
<p class="tj">Вот что выводится при выполнении этой программы:
<pre>
123.1235
00001000
Это простая про</pre>
<h2>Выравнивание вывода</h2>
<p class="tj">По умолчанию весь вывод выравнивается по правому краю. То есть если ширина поля больше ширины выводимых данных, то эти данные располагаются по правому краю поля. Вывод по левому краю можно назначить принудительно, поместив знак минус прямо за <kbd>%</kbd>. Например, <kbd>%-l0.2f</kbd> означает, что число с плавающей точкой и с двумя десятичными разрядами будет выровнено по левому краю 10-символьного поля.
<p class="tj">В следующей программе показано, как применяется выравнивание по левому краю:
<pre>
#include &lt;stdio.h&gt;
int main(void)
{
  printf(".........................\n");
  printf("по правому краю: %8d\n", 100);
  printf(" по левому краю: %-8d\n", 100);
  return 0;
}
</pre>
<p class="tj">И вот что получилось:
<pre>
.........................
по правому краю:      100
 по левому краю: 100
</pre>
<h2>Обработка данных других типов</h2>
<p class="tj">Некоторые модификаторы в вызове функции <kbd>printf()</kbd> позволяют отображать целые числа типа <kbd>short</kbd> и <kbd>long</kbd>. Такие модификаторы можно использовать для следующих спецификаторов типа: <kbd>d</kbd>, <kbd>i</kbd>, <kbd>o</kbd>, <kbd>u</kbd> и <kbd>x</kbd>. Модификатор <kbd>l</kbd> (эль) в вызове функции <kbd>printf()</kbd> указывает, что за ним следуют данные типа <kbd>long</kbd>. Например, <kbd>%ld</kbd> означает, что надо выводить данные типа <kbd>long int</kbd>. После модификатора <kbd>h</kbd> функция <kbd>printf()</kbd> выведет целое значение в виде <kbd>short</kbd>. Например, <kbd>%hu</kbd> означает, что выводимые данные имеют тип <kbd>short unsigned int</kbd>.
<p class="tj">Модификаторы <kbd>l</kbd> и <kbd>h</kbd> можно также применить к спецификатору <kbd>n</kbd>. Это делается с той целью, чтобы показать — соответствующий аргумент является указателем соответственно на длинное (<kbd>long</kbd>) или короткое (<kbd>short</kbd>) целое.
<p class="tj">Если компилятор поддерживает обработку символов в расширенном 16-битном алфавите, добавленную Поправкой 1 от 1995 года (1995 Amendment 1), то для указания символа в расширенном 16-битном алфавите вы можете применять модификатор 1 для спецификатора преобразования <kbd>c</kbd>. Кроме того, для указания строки из символов в расширенном 16-битном алфавите можно применять модификатор 1 для спецификатора преобразования <kbd>s</kbd>.
<p class="tj">Модификатор <kbd>L</kbd> может находиться перед спецификаторами преобразования с плавающей точкой <kbd>e</kbd>, <kbd>f</kbd> и <kbd>g</kbd>, и указывать этим, что преобразуется значение <kbd>long double</kbd>.
<p class="tj">В Стандарте С99 вводится два новых модификатора формата: <kbd>hh</kbd> и <kbd>ll</kbd>. Модификатор <kbd>hh</kbd> можно применять для спецификаторов преобразования <kbd>d</kbd>, <kbd>i</kbd>, <kbd>o</kbd>, <kbd>u</kbd>, <kbd>x</kbd> или <kbd>n</kbd>. Он показывает, что соответствующий аргумент является значением <kbd>signed</kbd> или <kbd>unsigned char</kbd> или, в случае <kbd>n</kbd>, указателем на переменную <kbd>signed char</kbd>. Модификатор <kbd>ll</kbd> также можно применять для спецификаторов преобразования <kbd>d</kbd>, <kbd>i</kbd>, <kbd>o</kbd>, <kbd>u</kbd>, <kbd>x</kbd> или <kbd>n</kbd>. Он показывает, что соответствующий аргумент является значением <kbd>signed</kbd> или <kbd>unsigned long long int</kbd> или, в случае <kbd>n</kbd>, указателем на <kbd>long long int</kbd>. В С99 также разрешается применять <kbd>l</kbd> для спецификаторов преобразования с плавающей точкой <kbd>a</kbd>, <kbd>е</kbd>, <kbd>f</kbd> и <kbd>g</kbd>; впрочем, это не дает никакого результата.</p>
<table class="table table-bordered">
<tr><td class="tdnote">На заметку<td class="tj">В составе С99 имеются некоторые дополнительные модификаторы типа для функции <kbd>printf()</kbd>; о них рассказывается в <a href="../II.htm">части II</a>.
</table>
<h2>Модификатор * и #</h2>
<p class="tj">Для некоторых из своих спецификаторов преобразования функция <kbd>printf()</kbd> поддерживает два дополнительных модификатора: <kbd>*</kbd> и <kbd>#</kbd>.
<p class="tj">Непосредственное расположение <kbd>#</kbd> перед спецификаторами преобразования <kbd>g</kbd>, <kbd>G</kbd>, <kbd>f</kbd>, <kbd>Е</kbd> или <kbd>e</kbd> означает, что при выводе обязательно появится десятичная точка — даже если десятичных цифр нет. Если вы поставите <kbd>#</kbd> непосредственно перед <kbd>x</kbd> или <kbd>X</kbd>, то шестнадцатеричное число будет выведено с префиксом <kbd>0x</kbd>. Если <kbd>#</kbd> будет непосредственно предшествовать спецификатору преобразования <kbd>o</kbd>, число будет выведено с ведущим нулем. К любым другим спецификаторам преобразования модификатор <kbd>#</kbd> применять нельзя. (В С99 модификатор <kbd>#</kbd> можно применять по отношению к преобразованию <kbd>%а</kbd>; это значит, что обязательно будет выведена десятичная точка.)
<p class="tj">Модификаторы минимальной ширины поля и точности можно передавать функции <kbd>printf()</kbd> не как константы, а как аргументы. Для этого в качестве заполнителя используйте звездочку (<kbd>*</kbd>). При сканировании строки формата функция <kbd>printf()</kbd> будет каждой звездочке <kbd>*</kbd> из этой строки ставить в соответствие очередной аргумент, причем в том порядке, в каком расположены аргументы. Например, при выполнении оператора, показанного на рис. 8.1, минимальная ширина поля будет равна 10 символам, точность — 4, а отображаться будет число <kbd>123.3</kbd>.
<p class="tj">В следующей программе показано применение обоих модификаторов <kbd>#</kbd> и <kbd>*</kbd>:
<pre>
#include &lt;stdio.h&gt;
int main(void)
{
  printf("%x %#x\n", 10, 10);
  printf("%*.*f", 10, 4, 1234.34);
  return 0;
}
</pre>
<table class="table">
<caption class="bottom"><p class="tj"><em>Рис. 8.1. Обратите внимание на то, каким образом звездочке (*) ставится в соответствие определенное значение</em>
<tr><td>
<pre class="size">
printf("%*.*f", 10.4, 123.3);
         | |     |     |
         '-+-----'     |
           |           |
           '-----------'
</pre>
</table>
<p><img src="../work/sup.bmp" alt="----------">
<blockquote>
<p class="tj"><sup><a href="#1" id="11">[1]</a></sup>Часто называется просто <em>форматной строкой</em>, <em>форматным стрингом</em> или <em>форматом</em>.
<p class="tj"><sup><a href="#2" id="22">[2]</a></sup>Называются также <em>спецификациями формата</em>.
<p class="tj"><sup><a href="#3" id="33">[3]</a></sup>Называются также <em>спецификаторами</em>.
</blockquote>
<p>
</p>
<hr><a href="../main.htm#08">Содержание</a> | <a href="0803.htm">&lt;&lt;&lt;</a> | <a href="0805.htm">&gt;&gt;&gt;</a>
</body>
</html>
