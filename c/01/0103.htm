<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>Язык С хорошо структурирован - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head><body>
<a href="../main.htm#01">Содержание</a> | <a href="0102.htm">&lt;&lt;&lt;</a> | <a href="0104.htm">&gt;&gt;&gt;</a><hr>
<h1>Язык С хорошо структурирован</h1>
<p class="tj">В книгах по программированию часто используется понятие <em>блочной структурированности</em> языка. Хоть этот термин и нельзя применить в полной мере к языку С, его обычно называют просто структурированным языком, так как в этом отношении он очень похож на другие структурированные языки, такие как ALGOL, Pascal и Modula-2.</p>
<table class="table table-bordered">
<tr><td class="tdnote">На заметку<td class="tj">Блочно-структурированные языки допускают определение функций внутри других функций. Поскольку в С такой возможности нет, формально он не может быть причислен к блочно-структурированным языкам.
</table>
<p class="tj">Отличительной особенностью структурированного языка является <em>отдельное размещение</em> различных частей кода программы и данных. Таким способом программист может "скрыть" часть информации, используемую для выполнения специфической задачи, от тех участков программы, где эта информация не нужна. Один из способов достижения этого — использование подпрограмм с локальными переменными. В этом случае любые действия внутри программы не вызовут побочных эффектов в других ее частях. Это позволяет программам, написанным на С, совместно использовать готовые части кода. Для использования функции, хранящейся отдельно, необходимо только знать, что эта функция делает, при этом вовсе не обязательно знать, как именно она это делает. Но следует помнить, что чрезмерное использование глобальных переменных (то есть переменных, видимых во всей программе) приводит к ошибкам и побочным эффектам, которые очень трудно устранить (особенно хорошо знакомы с этой трудностью программисты, работавшие на стандартной версии языка Basic).
<p class="tj">Структурированный язык предоставляет программисту много различных возможностей. Например, структурированные языки обычно содержат несколько типов операторов цикла, таких как <kbd>while</kbd>, <kbd>do-while</kbd> и <kbd>for</kbd>. В структурированных языках использование оператора <kbd>goto</kbd> или запрещено, или не рекомендуется, для них он не является приемлемым средством управления процессом (что, однако, не относится к стандартной версии языка Basic и традиционной версии языка FORTRAN). Структурированный язык позволяет поместить оператор в любом месте строки, не привязывая его к определенному полю (что характерно, например, для старых версий языка FORTRAN).
<p class="tj">Ниже приведены примеры структурированных и неструктурированных языков:</p>
<table class="table table-bordered">
<tr><th><em>Неструктурированные</em><th><em>Структурированные</em>
<tr><td><ul><li>FORTAN<li>BASIC<li>COBOL</ul><td><ul><li>Pascal<li>ADA<li>C++<li>C<li>Java<li>Modula-2</ul>
</table>
<p class="tj">Структурированные языки появились сравнительно недавно. Фактически признаком того, что язык создан довольно давно, служит его неструктурированность. Сегодня мало кто из программистов решится писать серьезную программу на неструктурированном языке.</p>
<table class="table table-bordered">
<tr><td class="tdnote">На заметку<td class="tj">Попытки добавить элементы структурированности во многие старые языки предпринимались неоднократно. Так, одна из самых смелых попыток была предпринята для языка Basic. Однако преодолеть недостатки этих языков не удалось, так как при их создании изначально были проигнорированы принципы структурированности.
</table>
<p class="tj">Главная конструкция структурного программирования на языке С — функция, являющаяся здесь единственным видом подпрограммы. Функция С — это строительный кирпичик, в котором осуществляются все действия программы. Функции позволяют определить и отдельно закодировать различные задачи, решаемые программой, благодаря чему эта программа становится модульной. Написав правильно функцию, можно быть уверенным в ее надежной работе в различных ситуациях без побочных эффектов в других частях программы. При работе над большим проектом, когда особенно важно, чтобы одна часть кода ни в коем случае не могла непредвиденно подействовать на другую часть, умение создать отдельную функцию приобретает для программиста исключительное значение.
<p class="tj">Другой способ структурирования программы, написанной на языке С, заключается в использовании программных блоков. <em>Программный блок</em> — это логически связанная группа операторов программы, которую можно рассматривать как отдельную программную единицу. В языке С блок представляет собой последовательность операторов программы, заключенную в фигурные скобки. В примере кода
<pre>
if (x &lt; 10) {
  printf("Слишком мало, попытайтесь еще раз.\n");
  scanf("%d", &х);
}
</pre>
<p class="t">два оператора, стоящие после <kbd>if</kbd> в фигурных скобках, выполняются только в том случае, если значение <kbd>х</kbd> меньше десяти. Эти два оператора вместе со скобками составляют программный блок. В данном примере эти операторы представляют собой логический блок, или программную единицу, так как один оператор не может быть выполнен без выполнения другого. Использование программных блоков позволяет сделать программу понятной, элегантной и эффективной. Более того, программные блоки помогают лучше формализовать задачу и более точно запрограммировать алгоритм ее решения.
<p>
</p>
<hr><a href="../main.htm#01">Содержание</a> | <a href="0102.htm">&lt;&lt;&lt;</a> | <a href="0104.htm">&gt;&gt;&gt;</a>
</body>
</html>
