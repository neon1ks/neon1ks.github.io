<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>Новые встроенные типы данных - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head><body>
<a href="../main.htm#11">Содержание</a> | <a href="1103.htm">&lt;&lt;&lt;</a> | <a href="1105.htm">&gt;&gt;&gt;</a><hr>
<h1>Новые встроенные типы данных</h1>
<p class="tj">В стандарте С99 появились новые для С встроенные типы данных. Здесь подробно рассказывается о каждом из них.
<h2>_Вооl</h2>
<p class="tj">Один из новых типов данных, появившихся в С99, — это <kbd>_Bool</kbd>, в котором можно хранить значения 1 и 0 (истина (true) и ложь (false)). <kbd>_Bool</kbd> представляет собой целый тип данных. Как известно многим читателям, в языке C++ определяется ключевое слово <kbd>bool</kbd>, которое, несмотря на сходство, все же отличается от <kbd>_Bool</kbd>. Таким образом, в написании этого типа С99 и C++ несовместимы. Кроме того, в C++ определяются встроенные логические константы <kbd>true</kbd> и <kbd>false</kbd>, а в С99 этого не делается. Однако в С99 имеется заголовок <kbd>&lt;stdbool.h&gt;</kbd>, в котором определены имена макросов <kbd>bool</kbd>, <kbd>true</kbd> и <kbd>false</kbd>. Таким образом, можно легко создавать код, совместимый с C/C++.
<p class="tj">Причина того, что в качестве ключевого слова указывается <kbd>_Bool</kbd>, а не <kbd>bool</kbd>, состоит в том, что во многих уже имеющихся С-программах определены их собственные варианты <kbd>bool</kbd>. Определяя логический тип как <kbd>_Bool</kbd>, C99 дает возможность не менять уже написанный код. Однако в новые программы лучше всего вставлять <kbd>&lt;stdbool.h&gt;</kbd>, а затем использовать имя макроса <kbd>bool</kbd>.
<h2>_Complex и _Imaginary</h2>
<p class="tj">Стандарт С99 появился вместе с новой для С поддержкой арифметических операций с комплексными числами; эта поддержка включает в себя ключевые слова <kbd>_Complex</kbd> и <kbd>_Imaginary</kbd>, дополнительные заголовки и несколько новых библиотечных функций. Однако никаких реализаций не требуется, чтобы реализовать типы мнимых чисел (imaginary types), а автономные приложения (которые обходятся без операционной системы) не обязаны поддерживать комплексные типы. Арифметические операции с комплексными числами появились в С99 для упрощения программирования численных методов.
<p class="tj">Определены следующие комплексные типы:
<pre>
float_Complex
float_Imaginary
double_Complex
double_Imaginary
long double_Complex
long double_Imaginary
</pre>
<p class="tj">Причина того, что в качестве ключевых слов определены <kbd>_Complex</kbd> и <kbd>_Imaginary</kbd>, а не <kbd>complex</kbd> и <kbd>imaginary</kbd>, состоит в том, что во многих имеющихся С-программах уже определены их собственные типы комплексных данных, использующие имена <kbd>complex</kbd> и <kbd>imaginary</kbd>. Определяя ключевые слова <kbd>_Complex</kbd> и <kbd>_Imaginary</kbd>, C99 позволяет не менять уже написанный код.
<p class="tj">Заголовок <kbd>&lt;complex.h&gt;</kbd> определяет (кроме всего прочего) макросы <kbd>complex</kbd> и <kbd>imaginary</kbd>, которые в результате макроподстановки превращаются в <kbd>_Complex</kbd> и <kbd>_Imaginary</kbd>. Таким образом, в новые программы лучше всего вставлять <kbd>&lt;complex.h&gt;</kbd>, а затем использовать макросы <kbd>complex</kbd> и <kbd>imaginary</kbd>.
<h2>Типы целых данных long long</h2>
<p class="tj">В стандарте С99 появились новые для С типы данных <kbd>long long int</kbd> и <kbd>unsigned long long int</kbd>. Диапазон значений типа данных <kbd>long long int</kbd> не уже, чем интервал от -(2<sup>63</sup>-1) до (2<sup>63</sup>-1). А диапазон значений типа данных <kbd>unsigned long long int</kbd> обязан содержать интервал от 0 до 2<sup>64</sup>-1. Типы <kbd>long long</kbd> позволяют поддерживать 64-разрядные целые значения с помощью встроенного типа.
<p>
</p>
<hr><a href="../main.htm#11">Содержание</a> | <a href="1103.htm">&lt;&lt;&lt;</a> | <a href="1105.htm">&gt;&gt;&gt;</a>
</body>
</html>
