<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>Ключевое слово inline - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head><body>
<a href="../main.htm#11">Содержание</a> | <a href="1102.htm">&lt;&lt;&lt;</a> | <a href="1104.htm">&gt;&gt;&gt;</a><hr>
<h1>Ключевое слово inline</h1>
<p class="tj">При разработке С99 было добавлено ключевое слово <kbd>inline</kbd>, которое применяется к функциям. Ставя <kbd>inline</kbd> в начале объявления функции, вы предлагаете компилятору оптимизировать вызовы к этой функции. Обычно это означает, что при компиляции код этой функции будет вставляться на месте вызовов. Однако ключевое слово <kbd>inline</kbd> является всего лишь запросом к компилятору и может быть проигнорировано. В С99 особо отмечено, что использование <kbd>inline</kbd> "предполагает, что вызовы функции должны быть максимально быстрыми". Спецификатор <kbd>inline</kbd> также поддерживается в языке C++, и синтаксис С99 для этого ключевого слова совместим с C++.
<p class="tj">Чтобы создать <em>встраиваемую функцию</em><sup><a href="#11" id="1">[1]</a></sup>, перед ее определением поставьте ключевое слово <kbd>inline</kbd>. Например, в следующей программе оптимизируются вызовы функции <kbd>max()</kbd>:
<pre>
#include &lt;stdio.h&gt;
inline int max(int a, int b)
{
  return a > b ? a : b;
}
int main(void)
{
  int x=5, y=10;
  printf("Наибольшим из чисел %d и %d является: %d\n", x, y, max(x, y));
  return 0;
}
</pre>
<p class="tj">При типичной реализации <kbd>inline</kbd> предшествующая программа эквивалентна следующей:
<pre>
#include &lt;stdio.h&gt;
int main(void)
{
  int x=5, y=10;
  printf("Наибольшим из чисел %d и %d является: %d\n", x, y, (x&gt;y ? x : y));
  return 0;
}
</pre>
<p class="tj">Причина, по которой встраиваемым функциям придается такое большое значение, состоит в том, что они помогают создавать более эффективный код, поддерживая при этом структурированный, функционально-ориентированный подход. Как вы знаете, каждый раз при вызове функции механизм ее вызова и возврата требует значительного количества ресурсов. Обычно при вызове функции ее аргументы заталкиваются в стек, содержимое различных регистров заносится в память, а затем при возврате функции содержимое этих регистров восстанавливается. Беда в том, что на эти операции требуется время. Однако, если код функции подставляется вместо вызова, такие операции уже не нужны. Впрочем, хотя такие подстановки функции и способствуют ускорению выполнения, но они приводят к увеличению размера кода из-за дублирования кода функции. По этой причине лучше всего использовать <kbd>inline</kbd> только с очень небольшими функциями, т.е. подставлять код только маленьких функций. Кроме того, хорошо было бы применять это ключевое слово только к тем функциям, которые существенно влияют на производительность программы.
<p class="tj"><u>Помните</u>: хотя <kbd>inline</kbd> обычно приводит к подстановке кода функции на месте ее вызова, компилятор может проигнорировать этот запрос или использовать некоторые другие средства оптимизации вызовов функции.
<p><img src="../work/sup.bmp" alt="----------">
<blockquote>
<p class="tj"><sup><a href="#1" id="11">[1]</a></sup>Называется также <em>подставляемой функцией</em>.
</blockquote>
<p>
</p>
<hr><a href="../main.htm#11">Содержание</a> | <a href="1102.htm">&lt;&lt;&lt;</a> | <a href="1104.htm">&gt;&gt;&gt;</a>
</body>
</html>
