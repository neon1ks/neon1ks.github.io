<!DOCTYPE HTML>
<html>
<HEAD>
<TITLE>Ключевое слово inline - cправочник по Си</TITLE>
<meta charset="utf-8"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#11">Содержание</A> | <A href="1102.htm">&lt;&lt;&lt;</A> | <A href="1104.htm">&gt;&gt;&gt;</A><HR>
<H1>Ключевое слово inline</H1>








<P class="tj">При разработке С99 было добавлено ключевое слово <KBD>inline</KBD>, которое применяется к функциям. Ставя <KBD>inline</KBD> в начале объявления функции, вы предлагаете компилятору оптимизировать вызовы к этой функции. Обычно это означает, что при компиляции код этой функции будет вставляться на месте вызовов. Однако ключевое слово <KBD>inline</KBD> является всего лишь запросом к компилятору и может быть проигнорировано. В С99 особо отмечено, что использование <KBD>inline</KBD> "предполагает, что вызовы функции должны быть максимально быстрыми". Спецификатор <KBD>inline</KBD> также поддерживается в языке C++, и синтаксис С99 для этого ключевого слова совместим с C++.
<P class="tj">Чтобы создать <I>встраиваемую функцию</I><SUP><A href="#11" name="1">[1]</A></SUP>, перед ее определением поставьте ключевое слово <KBD>inline</KBD>. Например, в следующей программе оптимизируются вызовы функции <KBD>max()</KBD>:
<PRE>
#include &lt;stdio.h&gt;

inline int max(int a, int b)
{
  return a > b ? a : b;
}

int main(void)
{
  int x=5, y=10;

  printf("Наибольшим из чисел %d и %d является: %d\n", x, y, max(x, y));

  return 0;
}
</PRE>
<P class="tj">При типичной реализации <KBD>inline</KBD> предшествующая программа эквивалентна следующей:
<PRE>
#include &lt;stdio.h&gt;

int main(void)
{
  int x=5, y=10;

  printf("Наибольшим из чисел %d и %d является: %d\n", x, y, (x&gt;y ? x : y));

  return 0;
}
</PRE>
<P class="tj">Причина, по которой встраиваемым функциям придается такое большое значение, состоит в том, что они помогают создавать более эффективный код, поддерживая при этом структурированный, функционально-ориентированный подход. Как вы знаете, каждый раз при вызове функции механизм ее вызова и возврата требует значительного количества ресурсов. Обычно при вызове функции ее аргументы заталкиваются в стек, содержимое различных регистров заносится в память, а затем при возврате функции содержимое этих регистров восстанавливается. Беда в том, что на эти операции требуется время. Однако, если код функции подставляется вместо вызова, такие операции уже не нужны. Впрочем, хотя такие подстановки функции и способствуют ускорению выполнения, но они приводят к увеличению размера кода из-за дублирования кода функции. По этой причине лучше всего использовать <KBD>inline</KBD> только с очень небольшими функциями, т.е. подставлять код только маленьких функций. Кроме того, хорошо было бы применять это ключевое слово только к тем функциям, которые существенно влияют на производительность программы.
<P class="tj"><U>Помните</U>: хотя <KBD>inline</KBD> обычно приводит к подстановке кода функции на месте ее вызова, компилятор может проигнорировать этот запрос или использовать некоторые другие средства оптимизации вызовов функции.
<P><IMG src="../work/sup.bmp" alt="----------">
<BLOCKQUOTE>
<P class="tj"><SUP><A href="#1" name="11">[1]</A></SUP>Называется также <I>подставляемой функцией</I>.
</BLOCKQUOTE>


<p>






</p>
<small>
 
</small><HR><A href="../main.htm#11">Содержание</A> | <A href="1102.htm">&lt;&lt;&lt;</A> | <A href="1104.htm">&gt;&gt;&gt;</A>
</BODY>
</html>
