<!DOCTYPE HTML>
<html lang="ru">
<HEAD>
<TITLE>Сортировка вставками - cправочник по Си</TITLE>
<meta charset="utf-8">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#21">Содержание</A> | <A href="2105.htm">&lt;&lt;&lt;</A> | <A href="2107.htm">&gt;&gt;&gt;</A><HR>
<H1>Сортировка вставками</H1>








<P class="tj"><I>Сортировка вставками</I> — третий и последний из простых алгоритмов сортировки. Сначала он сортирует два первых элемента массива. Затем алгоритм вставляет третий элемент в соответствующую порядку позицию по отношению к первым двум элементам. После этого он вставляет четвертый элемент в список из трех элементов. Этот процесс повторяется до тех пор, пока не будут вставлены все элементы. Например, при сортировке массива <B>dcab</B> каждый проход алгоритма будет выглядеть следующим образом:
<PRE>
Начало       <B>d c a b</B>
Проход 1     <B>c d a b</B>
Проход 2     <B>a c d b</B>
Проход 3     <B>a b c d</B>
</PRE>
<P class="tj">Пример реализации сортировки вставками показан ниже:
<PRE>
/* Сортировка вставками. */
void insert(char *items, int count)
{

  register int a, b;
  char t;

  for(a=1; a &lt; count; ++a) {
    t = items[a];
    for(b=a-1; (b &gt;= 0) && (t &lt; items[b]); b--)
      items[b+1] = items[b];
    items[b+1] = t;
  }
}
</PRE>
<P class="tj">В отличие от пузырьковой сортировки и сортировки посредством выбора, количество сравнений в сортировке вставками зависит от изначальной упорядоченности списка. Если список уже отсортирован, количество сравнений равно <I>n</I>&#160;-&#160;1; в противном случае его производительность является величиной порядка <I>n</I><SUP>2</SUP>.
<P class="tj">Вообще говоря, в худших случаях сортировка вставками настолько же плоха, как и пузырьковая сортировка и сортировка посредством выбора, а в среднем она лишь немного лучше. Тем не менее, у сортировки вставками есть два преимущества. Во-первых, ее поведение естественно. Другими словами, она работает меньше всего, когда массив уже упорядочен, и больше всего, когда массив отсортирован в обратном порядке. Поэтому сортировка вставками — идеальный алгоритм для почти упорядоченных списков. Второе преимущество заключается в том, что данный алгоритм не меняет порядок одинаковых ключей<SUP><A href="#11" id="1">[1]</A></SUP>. Это значит, что если список отсортирован по двум ключам, то после сортировки вставками он останется упорядоченным по обоим.
<P class="tj">Несмотря на то, что количество сравнений при определенных наборах данных может быть довольно низким, при каждой вставке элемента на свое место массив необходимо сдвигать. Вследствие этого количество перемещений может быть значительным.
<p><IMG src="../work/sup.bmp" alt="----------">
<BLOCKQUOTE>
<P class="tj"><SUP><A href="#1" id="11">[1]</A></SUP>Т.е. устойчив.
</BLOCKQUOTE>


<p>






</p>


<HR><A href="../main.htm#21">Содержание</A> | <A href="2105.htm">&lt;&lt;&lt;</A> | <A href="2107.htm">&gt;&gt;&gt;</A>
</BODY>
</html>
