<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>Оценка алгоритмов сортировки - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head>
<body>


<a href="../main.htm#21">Содержание</a> | <a href="2102.htm">&lt;&lt;&lt;</a> | <a href="2104.htm">&gt;&gt;&gt;</a><hr>
<h1>Оценка алгоритмов сортировки</h1>
<p class="tj">Существует много различных алгоритмов сортировки. Все они имеют свои положительные стороны, но общие критерии оценки алгоритма сортировки таковы:
<ul class="square">
<li>Насколько быстро данный алгоритм сортирует информацию в среднем?
<li>Насколько быстро он работает в лучшем и худшем случаях?
<li>Естественно или неестественно он себя ведет?
<li>Переставляет ли он элементы с одинаковыми ключами?<sup><a href="#11" id="1">[1]</a></sup>
</ul>
<p class="tj">Давайте подробнее рассмотрим эти критерии. Очевидно, что скорость работы любого алгоритма сортировки имеет большое значение. Скорость сортировки<sup><a href="#22" id="2">[2]</a></sup> массива непосредственно связана с количеством сравнений и количеством обменов, происходящих во время сортировки, причем обмены занимают больше времени. <em>Сравнение</em> происходит тогда, когда один элемент массива сравнивается с другим; <em>обмен</em> происходит тогда, когда два элемента меняются местами. Время работы одних алгоритмов сортировки растет экспоненциально, а время работы других логарифмически зависит от количества элементов.
<p class="tj">Время работы в лучшем и худшем случаях имеет значение, если одна из этих ситуаций будет встречаться довольно часто. Алгоритм сортировки зачастую имеет хорошее среднее время выполнения, но в худшем случае он работает очень медленно.
<p class="tj">Поведение алгоритма сортировки называется <em>естественным</em>, если время сортировки минимально для уже упорядоченного списка элементов, увеличивается по мере возрастания степени неупорядоченности списка и максимально, когда элементы списка расположены в обратном порядке. Объем работы алгоритма оценивается количеством производимых сравнений и обменов.
<p class="tj">Чтобы понять, почему переупорядочивание элементов с одинаковыми ключами имеет определенное значение, представьте себе базу данных почтовой рассылки, упорядоченную по главному ключу и подключу. Главным ключом является почтовый индекс, а в пределах одного почтового индекса записи упорядочены по фамилии. При добавлении в список нового адреса и пересортировке списка порядок подключей (то есть фамилий внутри почтовых индексов) не должен меняться. Для гарантии, что это не произойдет, алгоритм сортировки не должен обменивать ключи с одинаковым значением<sup><a href="#33" id="3">[3]</a></sup>.
<p class="tj">Далее будут представлены характерные для каждой группы алгоритмы сортировка с анализом эффективности. После них будут продемонстрированы более совершенные методы сортировки.
<p><img src="../work/sup.bmp" alt="----------">
<blockquote>
<p class="tj"><sup><a href="#1" id="11">[1]</a></sup>Если в отсортированном массиве элементы с одинаковыми ключами идут в том же порядке, в котором они располагались в исходном массиве, то алгоритм сортировки называется <em>устойчивым</em>, а в противном случае — <em>неустойчивым</em>.
<p class="tj"><sup><a href="#2" id="22">[2]</a></sup>Синонимы: <em>быстродействие</em>, <em>эффективность</em>.
<p class="tj"><sup><a href="#3" id="33">[3]</a></sup>Т.е. должен быть устойчивым.
</blockquote>
<hr><a href="../main.htm#21">Содержание</a> | <a href="2102.htm">&lt;&lt;&lt;</a> | <a href="2104.htm">&gt;&gt;&gt;</a>


</body>
</html>
