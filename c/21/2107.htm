<!DOCTYPE HTML>
<html lang="ru">
<HEAD>
<TITLE>Улучшенные алгоритмы сортировки - cправочник по Си</TITLE>
<meta charset="utf-8"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#21">Содержание</A> | <A href="2106.htm">&lt;&lt;&lt;</A> | <A href="2108.htm">&gt;&gt;&gt;</A><HR>
<H1>Улучшенные алгоритмы сортировки</H1>








<P class="tj">Все алгоритмы, рассмотренные в предыдущих разделах, имеют один фатальный недостаток — время их выполнения имеет порядок <I>n</I><SUP>2</SUP>. Это делает сортировку больших объемов данных очень медленной. По существу, в какой-то момент эти алгоритмы становятся слишком медленными, чтобы их применять<SUP><A href="#11" id="1">[1]</A></SUP>. К сожалению, страшные истории о "сортировках, которые продолжались три дня", зачастую реальны. Когда сортировка занимает слишком много времени, причиной этому обычно является неэффективность использованного в ней алгоритма. Тем не менее, первой реакцией в такой ситуации часто становится оптимизация кода вручную, возможно, путем переписывания его на ассемблере. Несмотря на то, что ручная оптимизация иногда ускоряет процедуру на постоянный множитель<SUP><A href="#22" id="2">[2]</A></SUP>, если алгоритм сортировки не эффективен, сортировка всегда будет медленной независимо от того, насколько оптимально написан код. Следует помнить, если время работы процедуры пропорционально <I>n</I><SUP>2</SUP>, то увеличение скорости кода или компьютера даст лишь небольшое улучшение<SUP><A href="#33" id="3">[3]</A></SUP>, поскольку время выполнения увеличивается как <I>n</I><SUP>2</SUP>. (На самом деле, кривая <I>n</I><SUP>2</SUP> на рис. 21.1 (пузырьковая сортировка) растянута вправо, но в остальном соответствует действительности.) Существует правило: если используемый в программе алгоритм слишком медленный сам по себе, никакой объем ручной оптимизации не сделает программу достаточно быстрой. Решение заключается в применении лучшего алгоритма сортировки.
<P class="tj">Ниже описаны два прекрасных метода сортировки. Первый называется <I>сортировкой Шелла</I>. Второй — <I>быстрая сортировка</I> — обычно считается самым лучшим алгоритмом сортировки. Оба метода являются более совершенными способами сортировки и имеют намного лучшую общую производительность, чем любой из приведенных выше простых методов.
<H2>Сортировка Шелла</H2>
<P class="tj">Сортировка Шелла называется так по имени своего автора, Дональда Л. Шелла (Donald Lewis Shell)<SUP><A href="#44" id="4">[4]</A></SUP>. Однако это название закрепилось, вероятно, также потому, что действие этого метода часто иллюстрируется рядами морских раковин, перекрывающих друг друга (по-английски "shell" — "раковина"). Общая идея заимствована из сортировки вставками и основывается на уменьшении шагов<SUP><A href="#55" id="5">[5]</A></SUP>. Рассмотрим диаграмму на рис. 21.2. Сначала сортируются все элементы, отстоящие друг от друга на три позиции. Затем сортируются элементы, расположенные на расстоянии двух позиций. Наконец, сортируются все соседние элементы.</P>
<table class="table">
<CAPTION align=bottom><P class="tj"><I>Рис. 21.2. Сортировка Шелла</I>
<TR><TD>
<PRE>
Проход 1     f   d   a   c   b   e
             \___\___\___/   /   /
                  \___\_____/   /
                       \_______/

Проход 2     c   b   a   f   d   e
             \___\___|___|___/   /
                  \______|______/     


Проход 3     a   b   c   d   e   f
             |___|___|___|___|___|


Результат    <B>a   b   c   d   e   f</B>
</PRE>
</TABLE>
<P class="tj">То, что этот метод дает хорошие результаты, или даже то, что он вообще сортирует массив, увидеть не так просто. Тем не менее, это верно. Каждый проход сортировки распространяется на относительно небольшое количество элементов либо на элементы, расположенные уже в относительном порядке. Поэтому сортировка Шелла эффективна, а каждый проход повышает упорядоченность<SUP><A href="#66" id="6">[6]</A></SUP>.
<P class="tj">Конкретная последовательность шагов может быть и другой. Единственное правило состоит в том, чтобы последний шаг был равен 1. Например, такая последовательность:
<P class="t">9, 5, 3, 2, 1
<P class="t">дает хорошие результаты и применяется в показанной здесь реализации сортировки Шелла. Следует избегать последовательностей, которые являются степенями числа 2 — по математически сложным соображениям они уменьшают эффективность сортировки (но сортировка по-прежнему работает!).
<PRE>
/* Сортировка Шелла. */
void shell(char *items, int count)
{

  register int i, j, gap, k;
  char x, a[5];

  a[0]=9; a[1]=5; a[2]=3; a[3]=2; a[4]=1;

  for(k=0; k &lt; 5; k++) {
    gap = a[k];
    for(i=gap; i &lt; count; ++i) {
      x = items[i];
      for(j=i-gap; (x &lt; items[j]) && (j &gt;= 0); j=j-gap)
        items[j+gap] = items[j];
      items[j+gap] = x;
    }
  }
}
</PRE>
<P class="tj">Вы могли заметить, что внутренний цикл <KBD>for</KBD> имеет два условия проверки. Очевидно, что сравнение <KBD>x&lt;items[j]</KBD> необходимо для процесса сортировки. Выражение <KBD>j&gt;=0</KBD> предотвращает выход за границу массива <KBD>items</KBD>. Эти дополнительные проверки в некоторой степени понижают производительность сортировки Шелла.
<P class="tj">В слегка модифицированных версиях данного метода сортировки применяются специальные элементы массива, называемые <I>сигнальными метками</I>. Они не принадлежат к собственно сортируемому массиву, а содержат специальные значения, соответствующие наименьшему возможному и наибольшему возможному элементам<SUP><A href="#77" id="7">[7]</A></SUP>. Это устраняет необходимость проверки выхода за границы массива. Однако применение сигнальных меток элементов требует конкретной информации о сортируемых данных, что уменьшает универсальность функции сортировки.
<P class="tj">Анализ сортировки Шелла связан с очень сложными математическими задачами, которые выходят далеко за рамки этой книги. Примите на веру, что время сортировки пропорционально
<P class="t"><I>n</I><SUP>1,2</SUP>
<P class="t">при сортировке <I>n</I> элементов<SUP><A href="#88" id="8">[8]</A></SUP>. А это уже существенное улучшение по сравнению с сортировками порядка <I>n</I><SUP>2</SUP>. Чтобы понять, насколько оно велико, обратитесь к рис. 21.3, на котором показаны графики функций <I>n</I><SUP>2</SUP> и <I>n</I><SUP>1,2</SUP>. Тем не менее, не стоит чрезмерно восхищаться сортировкой Шелла — быстрая сортировка еще лучше.</P>
<table class="table">
<CAPTION align=bottom><P class="tj"><I>Рис. 21.3. Попытка наглядного представления кривых n<SUP>2</SUP> и n<SUP>1,2</SUP>. Хотя вычертить эти кривые с точным соблюдением масштаба на каком-нибудь значимом для целей сортировки интервале изменения количества записей (n), например, на интервале от 0 до 1000, не представляется возможным, получить представление о поведении этих кривых можно с помощью графиков функций у=(n/100)<SUP>2</SUP> и у=(n/100)<SUP>1,2</SUP>. Для сравнения построен также график прямой у=n/100. Кроме того, чтобы получить представление о росте этих кривых, можно на оси ординат принять логарифмический масштаб, — это все равно, что начертить логарифмы этих функций</I>
<TR><TD align="center"><IMG src="../work/pic21_3_1.png" alt="y=a*(n/100)^b"><p><BR><p><IMG src="../work/pic21_3_2.png" alt="y=a*log10(n)"></TD>
</TABLE>
<H2>Быстрая соритировка</H2>
<P class="tj">Быстрая сортировка, придуманная Ч. А. Р. Хоаром<SUP><A href="#99" id="9">[9]</A></SUP> (Charles Antony Richard Hoare) и названная его именем, является самым лучшим методом сортировки из представленных в данной книге и обычно считается лучшим из существующих в настоящее время алгоритмом сортировки общего назначения. В ее основе лежит сортировка обменами — удивительный факт, учитывая ужасную производительность пузырьковой сортировки!
<P class="tj">Быстрая сортировка построена на идее деления. Общая процедура заключается в том, чтобы выбрать некоторое значение, называемое <I>компарандом</I> (comparand)<SUP><A href="#1010" id="010">[10]</A></SUP>, а затем разбить массив на две части. Все элементы, большие или равные компаранду, перемещаются на одну сторону, а меньшие — на другую. Потом этот процесс повторяется для каждой части до тех пор, пока массив не будет отсортирован. Например, если исходный массив состоит из символов <B>fedacb</B>, а в качестве компаранда используется символ <B>d</B>, первый проход быстрой сортировки переупорядочит массив следующим образом:
<PRE>
Начало       <B>f e d a c b</B>

Проход 1     <B>b c a d e f</B>
</PRE>
<P class="tj">Затем сортировка повторяется для обеих половин массива, то есть <B>bса</B> и <B>def</B>. Как вы видите, этот процесс по своей сути рекурсивный, и, действительно, в чистом виде быстрая сортировка реализуется как рекурсивная функция<SUP><A href="#1111" id="011">[11]</A></SUP>.
<P class="tj">Значение компаранда можно выбирать двумя способами — случайным образом либо усреднив небольшое количество значений из массива. Для оптимальной сортировки необходимо выбирать значение, которое расположено точно в середине диапазона всех значений. Однако для большинства наборов данных это сделать непросто. В худшем случае выбранное значение оказывается одним из крайних. Тем не менее, даже в этом случае быстрая сортировка работает правильно. В приведенной ниже версии быстрой сортировки в качестве компаранда выбирается средний элемент массива.
<PRE>
/* Функция, фызывающая функцию быстрой сортировки. */
void quick(char *items, int count)
{
  qs(items, 0, count-1);
}

/* Быстрая сортировка. */
void qs(char *items, int left, int right)
{
  register int i, j;
  char x, y;

  i = left; j = right;
  x = items[(left+right)/2]; /* выбор компаранда */

  do {
    while((items[i] &lt; x) && (i &lt; right)) i++;
    while((x &lt; items[j]) && (j &gt; left)) j--;

    if(i &lt;= j) {
      y = items[i];
      items[i] = items[j];
      items[j] = y;
      i++; j--;
    }
  } while(i &lt;= j);

  if(left &lt; j) qs(items, left, j);
  if(i &lt; right) qs(items, i, right);
}
</PRE>
<P class="tj">В этой версии функция <KBD>quick()</KBD> готовит вызов главной сортирующей функции <KBD>qs()</KBD>. Это обеспечивает общий интерфейс с параметрами <KBD>items</KBD> и <KBD>count</KBD>, но несущественно, так как можно вызывать непосредственно функцию <KBD>qs()</KBD> с тремя аргументами.
<P class="tj">Получение количества сравнений и обменов, которые выполняются при быстрой сортировке, требует математических выкладок, которые выходят за рамки данной книги. Тем не менее, среднее количество сравнений равно
<P class="t"><I>n</I> log <I>n</I>
<P class="t">а среднее количество обменов примерно равно
<P class="t"><I>n</I>/6 log <I>n</I>
<P class="tj">Эти величины намного меньше соответствующих характеристик рассмотренных ранее алгоритмов сортировки.
<P class="tj">Необходимо упомянуть об одном особенно проблематичном аспекте быстрой сортировки. Если значение компаранда в каждом делении равно наибольшему значению, быстрая сортировка становится "медленной сортировкой" со временем выполнения порядка <I>n</I><SUP>2</SUP>. Поэтому внимательно выбирайте метод определения компаранда. Этот метод часто определяется природой сортируемых данных. Например, в очень больших списках почтовой рассылки, в которых сортировка происходит по почтовому индексу, выбор прост, потому что почтовые индексы довольно равномерно распределены — компаранд можно определить с помощью простой алгебраической функции. Однако в других базах данных зачастую лучшим выбором является случайное значение. Популярный и довольно эффективный метод — выбрать три элемента из сортируемой части массива и взять в качестве компаранда значение, расположенное между двумя другими.
<p><IMG src="../work/sup.bmp" alt="----------">
<BLOCKQUOTE>
<P class="tj"><SUP><A href="#1" id="11">[1]</A></SUP>Конечно, это не означает, что функция <I>f(n)=n<SUP>2</SUP></I> в какой-то точке возрастает скачкообразно. Вовсе нет! Просто при увеличении размера массива n меняется характер сортировки, из <I>внутренней</I> она <I>фактически</I> становится <I>внешней</I>, когда массив не помещается в оперативной памяти и начинается интенсивная подкачка страниц, а за ней пробуксовывание механизма виртуальной памяти. Вот эти-то события действительно могут наступить внезапно, и тогда может показаться, что незначительное увеличение сортируемого массива или просто добавление какой-либо совершенно незначительной задачи приведет к катастрофическому увеличению времени сортировки (например в десятки раз!). 
<P class="tj"><SUP><A href="#2" id="22">[2]</A></SUP>Отдельные программисты — "любители рассказов о рыбной ловле" — клянутся об увеличении эффективности сначала наполовину, затем вдвое-втрое, к середине рассказа — на порядок, а к концу рассказа — на несколько порядков. (Такое не получается даже в специально подобранных примерах для рекламного проспекта по языку Ассемблера.) На самом деле производительность может даже упасть. В лучшем случае удается повысить ее на 10-12% для реально значимых производственных задач. При этом чем сложнее алгоритм, тем сложнее переписать его на Ассемблере и тем проще сделать в нем ошибку при переписывании, а тем более сложнее ее найти. Кроме того, следует учитывать и такой фактор: например, программу писал какой-то квалифицированный программист, который выбрал простой (но не очень эффективный — при чем об этом он знал) алгоритм потому, что менеджеры настаивали на скорейшем завершении программы, а оптимизацию этой программы те же менеджеры поручат весьма не самым квалифицированным специалистам! Эффект действительно будет на несколько порядков больше, но в совершенно противоположную сторону! Ведь с таким же успехом для "улучшения" трагедий Шекспира за пишущие машинки можно было усадить стадо обезьян!
<P class="tj"><SUP><A href="#3" id="33">[3]</A></SUP>Действительно, чтобы увеличить в <I>m</I> раз размер сортируемого массива при сохранении времени сортировки, быстродействие процессора придется увеличить в <I>m</I><SUP>2</SUP> раз при условии, что время доступа к элементам массива не увеличится, т.е. не уменьшится, например, эффективность подкачки страниц.
<P class="tj"><SUP><A href="#4" id="44">[4]</A></SUP>Считается, что Дональд Л. Шелл описал свой метод сортировки 28 июля 1959 года. Данный метод классифицируется как <I>слияние с обменом</I>; часто называется также <I>сортировкой с убывающим шагом</I>. 
<P class="tj"><SUP><A href="#5" id="55">[5]</A></SUP><I>Шаг</I> — расстояние между сортируемыми элементами на конкретном этапе сортировки.
<P class="tj"><SUP><A href="#6" id="66">[6]</A></SUP>Т.е. уменьшает количество беспорядков (инверсий).
<P class="tj"><SUP><A href="#7" id="77">[7]</A></SUP>-&#8734; и +&#8734;.
<P class="tj"><SUP><A href="#8" id="88">[8]</A></SUP>Вообще говоря, время сортировки Шелла зависит от последовательности шагов. (Впрочем, минимум равен, конечно, <I>n</I>&#160;log<SUB>2</SUB><I>n</I>.) Оптимальная последовательность не известна до сих пор. Дональд Кнут исследовал различные последовательности (не забыв и последовательность Фибоначчи). Фактически он пришел к выводу, что в определении наилучшей последовательности есть какое-то "колдовство". В 1969 г. Воган Пратт обнаружил, что <I>если все шаги выбираются из множества чисел вида 2<SUP>p</SUP>3<SUP>q</SUP>, меньших n, то время работы будет порядка n(log n)<SUP>2</SUP></I>. А.А. Папернов и Г.В. Стасевич в 1965 г. доказали, что максимальное время сортировки Шелла не превосходит О(n<SUP>1,5</SUP>), причем уменьшить показатель 1,5 нельзя. Большое число экспериментов с сортировкой Шелла провели Джеймс Петерсон и Дэвид Л. Рассел в Стэнфордском университете в 1971 г. Они пытались определить среднее число перемещений при 100&#8804;<I>n</I>&#8804;250`000 для последовательно сти шагов 2<SUP>k</SUP>-1. Наиболее подходящими формулами оказались 1,21<I>n</I><SUP>1,26</SUP> и ,39<I>n</I>(ln&#160;<I>n</I>)-2,33<I>n</I>&#160;ln&#160;<I>n</I>. Но при изменении диапазона n оказалось, что коэффициенты в представлении степенной функцией практически не изменяются, а коэффициенты в логарифмическом представлении изменяются довольно резко. Поэтому естественно предположить, что именно степенная функция описывает истинное асимптотическое поведение сортировки Шелла. 
<P class="tj"><SUP><A href="#9" id="99">[9]</A></SUP>Встречается также написание Ч. Э. Р. Хоор.
<P class="tj"><SUP><A href="#010" id="1010">[10]</A></SUP><I>Компаранд</I> — операнд в операции сравнения. Иногда называется также <I>основой</I> и <I>критерием разбиения</I>. 
<P class="tj"><SUP><A href="#011" id="1111">[11]</A></SUP>Если хотите избежать рекурсии, не волнуйтесь, все очень легко переписывается даже для Фортрана IV, в упомянутой ранее литературе вы без труда найдете нужный нерекурсивный вариант.
</BLOCKQUOTE> 


<p>






</p>
<small>
 
</small><HR><A href="../main.htm#21">Содержание</A> | <A href="2106.htm">&lt;&lt;&lt;</A> | <A href="2108.htm">&gt;&gt;&gt;</A>
</BODY>
</html>
