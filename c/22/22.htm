<!DOCTYPE HTML>
<html lang="ru">
<HEAD>
<TITLE>Очереди, стеки, связанные списки и деревья - cправочник по Си</TITLE>
<meta charset="utf-8"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#22">Содержание</A> | <A href="../21/2111.htm">&lt;&lt;&lt;</A> | <A href="2201.htm">&gt;&gt;&gt;</A><HR>
<H1>Очереди, стеки, связанные списки и деревья</H1>








<P class="tj">Как известно, программы состоят из двух частей — алгоритмов и структур данных. В хорошей программе эти составляющие эффективно дополняют друг друга. Выбор и реализация структуры данных насколько же важны, как и процедуры для обработки данных. Способ организации и доступа к информации обычно определяется природой программируемой задачи. Таким образом, для программиста важно иметь в своем распоряжении приемы, подходящие для различных ситуаций.
<P class="tj">Степень привязки типа данных к своему машинному представлению находится в обратной зависимости от его абстракции. Другими словами, чем более абстрактными становятся типы данных, тем больше концептуальное представление о способе хранения этих данных отличается от реального, фактического способа их хранения в памяти компьютера Простые типы, например, <KBD>char</KBD> или <KBD>int</KBD>, тесно связаны со своим машинным представлением. Например, машинное представление целочисленного значения хорошо аппроксимирует соответствующую концепцию программирования. По мере своего усложнения типы данных становятся концептуально менее похожими на свои машинные эквиваленты. Так, действительные числа с плавающей точкой более абстрактны, чем целые числа. Фактическое представление типа <KBD>float</KBD> в машине весьма приблизительно соответствует представлению среднего программиста о действительном числе. Еще более абстрактной является структура, принадлежащая к составным типам данных.
<P class="tj">На следующем уровне абстракции сугубо физические аспекты данных отходят на второй план вследствие введения <I>механизма доступа</I> (data engine) к данным, то есть механизма <I>сохранения</I> и <I>получения</I> информации. По существу, физические данные связываются с механизмом доступа, который управляет работой с данными из программы. Именно механизмам доступа к данным и посвящена эта глава.
<P class="tj">Существует четыре механизма доступа:
<ul>
<LI>Очередь (queue)
<LI>Стек (stack)<SUP><A href="#11" id="1">[1]</A></SUP>
<LI>Связанный список (linked list)<SUP><A href="#22" id="2">[2]</A></SUP>
<LI>Двоичное дерево (binary tree)<SUP><A href="#33" id="3">[3]</A></SUP>
</UL>
<P class="tj">Каждый из этих методов дает возможность решать задачи определенного класса. Эти методы по существу являются механизмами, выполняющими определенные операции сохранения и получения передаваемой им информации на основе получаемых ими запросов. Они все сохраняют и получают элемент, здесь под элементом подразумевается информационная единица. В этой главе показано, как создавать такие механизмы доступа на языке С. При этом проиллюстрированы некоторые распространенные приемы программирования в С, включая динамическое выделение памяти и использование указателей.
<ul>
<LI><A href="2201.htm">Очереди</A>
<LI><A href="2202.htm">Циклическая очередь</A>
<LI><A href="2203.htm">Стеки</A>
<LI><A href="2204.htm">Связанные списки</A>
<LI><A href="2205.htm">Односвязные списки</A>
<LI><A href="2206.htm">Двусвязные списки</A>
<LI><A href="2207.htm">Пример списка рассылки</A>
<LI><A href="2208.htm">Двоичные деревья</A>
</UL>
<p><IMG src="../work/sup.bmp" alt="----------">
<BLOCKQUOTE>
<P class="tj"><SUP><A href="#1" id="11">[1]</A></SUP>Другие названия: <I>магазин, стековая память, магазинная память, память магазинного типа, запоминающее устройство магазинного типа, стековое запоминающее устройство.</I>
<P class="tj"><SUP><A href="#2" id="22">[2]</A></SUP>Другие названия: <I>цепной список, список с использованием указателей, список со ссылками, список на указателях.</I>
<P class="tj"><SUP><A href="#3" id="33">[3]</A></SUP>Другие названия: <I>дерево двоичного поиска.</I>
</BLOCKQUOTE>


<p>






</p>
<small>
 
</small><HR><A href="../main.htm#22">Содержание</A> | <A href="../21/2111.htm">&lt;&lt;&lt;</A> | <A href="2201.htm">&gt;&gt;&gt;</A>
</BODY>
</html>
