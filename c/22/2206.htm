<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>Двусвязные списки - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head>
<body>


<a href="../main.htm#22">Содержание</a> | <a href="2205.htm">&lt;&lt;&lt;</a> | <a href="2207.htm">&gt;&gt;&gt;</a><hr>
<h1>Двусвязные списки</h1>
<p class="tj">Двусвязный список состоит из элементов данных, каждый из которых содержит ссылки как на следующий, так и на предыдущий элементы. На рис. 22.5 показана организация ссылок в двусвязном списке.</p>
<table class="table">
<caption class="bottom"><p class="tj"><em>Рис. 22.5. Двусвязные списки</em>
<tr><td>
<pre>
+-------+    +-------+    +-------+
|данные | .->|данные | .->|данные |
+---+---+ |  +---+---+ |  +---+---+
| 0 |   |-'  |   |   |-'  |   | 0 |
|   |   |<---|   |   |<---|   |   |
+---+---+    +---+---+    +---+---+
</pre>
</table>
<p class="tj">Наличие двух ссылок вместо одной предоставляет несколько преимуществ. Вероятно, наиболее важное из них состоит в том, что перемещение по списку возможно в обоих направлениях. Это упрощает работу со списком, в частности, вставку и удаление. Помимо этого, пользователь может просматривать список в любом направлении. Еще одно преимущество имеет значение только при некоторых сбоях. Поскольку весь список можно пройти не только по прямым, но и по обратным ссылкам, то в случае, если какая-то из ссылок станет неверной, целостность списка можно восстановить по другой ссылке.
<p class="tj">При вставке нового элемента в двусвязный список могут быть три случая: элемент вставляется в начало, в середину и в конец списка. Эти операции показаны на рис. 22.6.</p>
<table class="table">
<caption class="bottom"><p class="tj"><em>Рис. 22.6. Операции с двусвязными списками (Здесь new - вставляемый элемент, а info - поле данных)</em>
<tr><td>
<pre>
<strong>Вставка элемента в начало списка</strong>
                  +-----+                                 +-----+
                  | new |                          \/\/\->| new |
                  +--+--+            п                    +--+--+
                  |  |  |            р       .----------->|0 |  |
                  |  |  |            е       |            |  |  |
                  +--+--+            в       |            +--+|-+
                                     р       |           _____|
                                     а       |          |
       +-----+    +-----+    +-----+ щ в     | +-----+  | +-----+    +-----+
       |info |    |info |    |info | а  \/\/\->|info |<-' |info |    |info |
\/\/\->+--+--+    +--+--+    +--+--+ т       | +--+--+    +--+--+    +--+--+
       |0 |  |--->|  |  |--->|  |0 | с       | |  |  |--->|  |  |--->|  |0 |
       |  |  |<---|  |  |<---|  |  | я       '-|  |  |<---|  |  |<---|  |  |
       +--+--+    +--+--+    +--+--+           +--+--+    +--+--+    +--+--+
<strong>Вставка элемента в середину списка</strong>
                  +-----+                                   +-----+
                  | new |                                   | new |
                  +--+--+            п                      +--+--+
                  |  |  |            р            .---------|  |  |
                  |  |  |            е            |    .--->|  |  |
                  +--+--+            в            |    |    +--+A|+
                                     р            |    |   _____||
                                     а            |    |  |      |
       +-----+    +-----+    +-----+ щ в       +--V--+ |  | +--+-V+    +-----+
       |info |    |info |    |info | а  \/\/\->|info | |  | |info |    |info |
\/\/\->+--+--+    +--+--+    +--+--+ т         +--+--+ |  | +--+--+    +--+--+
       |0 |  |--->|  |  |--->|  |0 | с         |0 |  |-'  '-|  |  |--->|  |0 |
       |  |  |<---|  |  |<---|  |  | я         |  |  |      |  |  |<---|  |  |
       +--+--+    +--+--+    +--+--+           +--+--+      +--+--+    +--+--+
<strong>Вставка элемента в конец списка</strong>
                  +-----+                                 +-----+
                  | new |                                 | new |
                  +--+--+            п                    +--+--+
                  |  |  |            р                    |  |0 |
                  |  |  |            е                    |  |  |<-----------.
                  +--+--+            в                    +|-+--+            |
                                     р                     |____________     |
                                     а                                  |    |
       +-----+    +-----+    +-----+ щ в       +-----+    +-----+    +--V--+ |
       |info |    |info |    |info | а  \/\/\->|info |    |info |    |info | |
\/\/\->+--+--+    +--+--+    +--+--+ т         +--+--+    +--+--+    +--+--+ |
       |0 |  |--->|  |  |--->|  |0 | с         |0 |  |--->|  |  |--->|  |  |-'
       |  |  |<---|  |  |<---|  |  | я         |  |  |<---|  |  |<---|  |  |
       +--+--+    +--+--+    +--+--+           +--+--+    +--+--+    +--+--+
</pre>
</table>
<p class="tj">Построение двусвязного списка выполняется аналогично построению односвязного за исключением того, что необходимо установить две ссылки. Поэтому в структуре данных должны быть описаны два указателя связи. Возвращаясь к примеру списка рассылки, для двусвязного списка структуру <kbd>address</kbd> можно модифицировать следующим образом:
<pre>
struct address {
  char name[40];
  char street[40] ;
  char city[20];
  char state[3];
  char zip[11];
  struct address *next;
  struct address *prior;
} info;
</pre>
<p class="tj">Следующая функция, <kbd>dlstore()</kbd>, создает двусвязный список, используя структуру <kbd>address</kbd> в качестве базового типа данных:
<pre>
void dlstore(struct address *i, struct address **last)
{
  if(!*last) *last = i; /* вставка первого элемента */
  else (*last)->next = i;
  i->next = NULL;
  i->prior = *last;
  *last = i;
}
</pre>
<p class="tj">Функция <kbd>dlstore()</kbd> помещает новые записи в конец списка. В качестве параметров ей необходимо передавать указатель на сохраняемые данные; а также указатель на конец списка, который при первом вызове должен быть равен нулю (<kbd>NULL</kbd>).
<p class="tj">Подобно односвязным, двусвязные списки можно создавать с помощью функции, которая будет помещать элементы в определенные позиции, а не только в конец списка. Показанная ниже функция <kbd>dls_store()</kbd> создает список, упорядочивая его по возрастанию имен:
<pre>
/* Создание упорядоченного двусвязного списка. */
void dls_store(
  struct address *i,   /* новый элемент */
  struct address **start, /* первый элемент в списке */
  struct address **last /* последний элемент в списке */
)
{
  struct address *old, *p;
  if(*last==NULL) { /* первый элемент в списке */
    i->next = NULL;
    i->prior = NULL;
    *last = i;
    *start = i;
    return;
   }
  p = *start; /* начать с начала списка */
  old = NULL;
  while(p) {
    if(strcmp(p->name, i->name)<0){
      old = p;
      p = p->next;
    }
    else {
      if(p->prior) {
        p->prior->next = i;
        i->next = p;
        i->prior = p->prior;
        p->prior = i;
        return;
      }
      i->next = p; /* новый первый элемент */
      i->prior = NULL;
      p->prior = i;
      *start = i;
      return;
    }
  }
  old->next = i; /* вставка в конец */
  i->next = NULL;
  i->prior = old;
  *last = i;
}
</pre>
<p class="tj">Поскольку первый и последний элементы списка могут меняться, функция <kbd>dls_store()</kbd> автоматически обновляет указатели на начало и конец списка посредством параметров <kbd>start</kbd> и <kbd>last</kbd>. При вызове функции необходимо передавать указатель на сохраняемые данные и указатели на указатели на первый и последний элементы списка. В первый раз параметры <kbd>start</kbd> и <kbd>last</kbd> должны быть равны нулю (<kbd>NULL</kbd>).
<p class="tj">Как и в односвязных списках, для получения элемента данных двусвязного списка необходимо переходить по ссылкам до тех пор, пока не будет найден искомый элемент.
<p class="tj">При удалении элемента двусвязного списка могут возникнуть три случая: удаление первого элемента, удаление элемента из середины и удаление последнего элемента. На рис. 22.7 показано, как при этом изменяются ссылки. Показанная ниже функция <kbd>dldelete()</kbd> удаляет элемент двусвязного списка:
<pre>
void dldelete(
  struct address *i, /* удаляемый элемент */
  struct address **start,  /* первый элемент */
  struct address **last) /* последний элемент */
{
  if(i->prior) i->prior->next = i->next;
  else { /* new first item */
    *start = i->next;
    if(start) start->prior = NULL;
  }
  if(i->next) i->next->prior = i->prior;
  else   /* удаление последнего элемента */
    *last = i->prior;
}
</pre>
<p class="tj">Поскольку первый или последний элементы списка могут быть удалены, функция <kbd>dldelete()</kbd> автоматически обновляет указатели на начало и конец списка посредством параметров <kbd>start</kbd> и <kbd>last</kbd>. При вызове ей передаются указатель на удаляемый элемент и указатели на указатели на начало и конец списка.</p>
<table class="table">
<caption class="bottom"><p class="tj"><em>Рис. 22.7. Удаление элемента двусвязного списка</em>
<tr><td>
<pre>
<strong>Удаление первого элемента списка</strong>
       +-------+    +-------+    +-------+
\/\/\->|данные |    |данные |    |данные |
       +---+---+    +---+---+    +---+---+
       | 0 |   |--->|   |   |--->|   | 0 |
       +---+-A-+    +-|-+-A-+    +-|-+---+
             |________|   |________|
                   превращается в
       +-------+        +-------+    +-------+
       |удален | \/\/\->|данные |    |данные |
       +---+---+        +---+---+    +---+---+
       | 0 | 0 |        | 0 |   |--->|   | 0 |
       +---+---+        +---+-A-+    +-|-+---+
                              |________|
<strong>Удаление элемента из середины списка</strong>
       +-------+    +-------+    +-------+
\/\/\->|данные |    |данные |    |данные |
       +---+---+    +---+---+    +---+---+
       | 0 |   |--->|   |   |--->|   | 0 |
       +---+-A-+    +-|-+-A-+    +-|-+---+
             |________|   |________|
                   превращается в
                  ___________________
                 |                   |
       +-------+ |  +-------+    +---V---+
\/\/\->|данные | |  |удален |    |данные |
       +---+---+ |  +---+---+    +---+---+
       | 0 |   |-'  | 0 | 0 |--->|   | 0 |
       +---+-A-+    +---+---+    +-|-+---+
             |_____________________|
<strong>Удаление первого элемента списка</strong>
       +-------+    +-------+    +-------+
\/\/\->|данные |    |данные |    |данные |
       +---+---+    +---+---+    +---+---+
       | 0 |   |--->|   |   |--->|   | 0 |
       +---+-A-+    +-|-+-A-+    +-|-+---+
             |________|   |________|
                   превращается в
       +-------+    +-------+    +-------+
\/\/\->|данные |    |данные |    |удален |
       +---+---+    +---+---+    +---+---+
       | 0 |   |--->|   | 0 |--->| 0 | 0 |
       +---+-A-+    +-|-+---+    +---+---+
             |________|
</pre>
</table>
<p>
</p>
<hr><a href="../main.htm#22">Содержание</a> | <a href="2205.htm">&lt;&lt;&lt;</a> | <a href="2207.htm">&gt;&gt;&gt;</a>


</body>
</html>
