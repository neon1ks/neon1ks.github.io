<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>Редактор связей - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head>
<body>


<a href="../main.htm#12">Содержание</a> | <a href="12.htm">&lt;&lt;&lt;</a> | <a href="library.htm">&gt;&gt;&gt;</a><hr>
<h1>Редактор связей</h1>
<p class="tj"><em>Редактор связей</em><sup><a href="#11" id="1">[1]</a></sup> выполняет две функции. Во-первых, как можно заключить по его названию, он комбинирует (компонует, редактирует) различные объектные файлы. Вторая его функция — разрешать адреса вызовов и инструкций загрузки, найденных в редактируемых объектных файлах. Чтобы понять принцип работы редактора связей, рассмотрим подробнее процесс раздельной компиляции.
<h2>Раздельная компиляция</h2>
<p class="tj"><em>Раздельная компиляция</em> — это возможность, позволяющая разбить программу на несколько файлов, скомпилировать каждый из этих файлов отдельно, а потом <em>скомпоновать</em><sup><a href="#22" id="2">[2]</a></sup> их, чтобы в конечном итоге создать <em>исполняемый файл</em><sup><a href="#33" id="3">[3]</a></sup>. Результатом работы компилятора является объектный файл, а результатом работы редактора связей — исполняемый файл. Редактор связей физически связывает файлы, внесенные в список компоновки, в один программный файл и разрешает внешние ссылки. <em>Внешняя ссылка</em> создается каждый раз, когда программа из одного файла ссылается на код из другого файла. Это происходит при вызове функции и при ссылке на глобальную переменную. Например, при компоновке двух приведенных ниже файлов, должна быть разрешена ссылка в файле 2 на идентификатор <kbd>count</kbd>, объявленный в файле 1. Редактор связей сообщает программе из файла 2, где найти <kbd>count</kbd>.
<pre>
  <strong>Файл 1</strong>                    <strong>Файл 2</strong>
int count;                #include &lt;stdio.h&gt;
void display(void);       extern int count;
int main(void)            void display(void)
{                         {
count = 10;               printf("%d", count);
display();                }
return 0;
}
</pre>
<p class="tj">Аналогично, редактор связей укажет файлу 1, где находится функция <kbd>display()</kbd>, чтобы можно было ее вызвать.
<p class="tj">При генерации объектного кода функции <kbd>display()</kbd>, компилятор подставляет в негo вместо адреса идентификатора <kbd>count</kbd> "заполнитель", т.е. ссылку на внешнее имя, потому что он не располагает информацией о том, где находится <kbd>count</kbd>. Нечто подобное происходит при компиляции <kbd>main()</kbd>. Адрес функции <kbd>display()</kbd> не известен, поэтому вместо него используется "заполнитель", т.е. ссылка на внешнюю программу. При компоновке этих двух файлов содержащиеся в них внешние ссылки заменяются адресами соответствующих элементов. Являются ли эти адреса абсолютными или переместимыми, — зависит от среды<sup><a href="#44" id="4">[4]</a></sup>.
<h2>Переместимые коды и абсолютные коды</h2>
<p class="tj">В результате работы редактора связей для большинства видов вычислительной среды получается <em>переместимый код</em>. Так называют объектный код, который может работать в любой свободной области памяти, способной его уместить. В переместимом объектном файле адрес каждой инструкции вызова или загрузки является не фиксированным, а относительным. Таким образом, адреса в переместимом коде отсчитываются от адреса начала программы. При загрузке программы в память для выполнения, загрузчик преобразует относительные адреса в физические адреса, соответствующие адресам ячеек памяти, в которую загружается программа.
<p class="tj">В некоторых вычислительных средах, таких как специализированные устройства управления, в которых для всех программ используется одно и то же адресное пространство, редактор связей подставляет в конечный результат своей работы физические адреса. В этом случае он генерирует <em>абсолютный код</em><sup><a href="#55" id="5">[5]</a></sup>.
<h2>Редактирование связей с оверлеями</h2>
<p class="tj">Хотя в наше время эта возможность применяется редко, следует отметить, что компиляторы С некоторых вычислительных сред в дополнение к обычным компоновщикам предоставляют компоновщики оверлеев. <em>Компоновщик оверлеев</em> работает так же как и обычный, но он также может создавать оверлеи<sup><a href="#66" id="6">[6]</a></sup>. <em>Оверлей</em> — это фрагмент объектного<sup><a href="#77" id="7">[7]</a></sup> кода, который хранится в файле на диске и загружается для работы только по мере необходимости. Место в памяти, которое отводится для загрузки оверлеев, называется <em>оверлейной областью памяти</em>. Оверлеи позволяют создавать и запускать программы, которые занимали бы большую область памяти, чем имеющаяся в наличии, потому что в каждый момент времени в памяти находится только та часть программы, которая нужна.
<p class="tj">Чтобы понять, как работают оверлеи, представим, что имеется программа, состоящая из семи объектных файлов, которые называются F1, F2, ..., F7. Допустим, имеющейся свободной памяти недостаточно для загрузки программы, скомпонованной обычным образом из всех объектных файлов. Есть возможность скомпоновать только первые пять файлов, а при большем количестве наступит переполнение памяти. Выйти из подобной ситуации можно, дав компоновщику команду создать оверлеи из файлов F5, F6 и F7. При каждом вызове функции, которая содержится в одном из этих, файлов, <em>администратор оверлейной загрузки</em> (программа, предоставляемая компоновщиком или редактором связей) находит необходимый файл и помещает его в оверлейную область памяти, создавая условия для работы программы. Коды, которые получились при компиляции файлов F1 — F4, остаются резидентными. Данная схема проиллюстрирована на рис. 12.1.</p>
<table class="table">
<caption class="bottom"><p class="tj"><em>Рис.12.1 Программа с оверлеями загруженными в память.</em>
<tr><td>
<pre>
              +----+       +----------------+
              | F5 |---.   |       F1       |
              +----+   |   |       .        |
F5...F7                |   |       .        |
загружаются   +----+   |   |       .        |
по мере       | F6 |-. |   |       F4       |
необходимости +----+ | |   +----------------+
                     | `--&gt;|   Оверлейная   |
              +----+ `----&gt;|                |
              | F7 |------&gt;| область памяти |
              +----+       +----------------+
</pre>
</table>
<p class="tj">Как читатель, возможно, уже догадался, принципиальным преимуществом оверлеев является возможность создавать с их помощью очень большие программы. Основной же их недостаток и причина редкого использования состоит в том, что процесс загрузки занимает определенное время и в значительной мере влияет на быстродействие программы. Поэтому при использовании оверлеев следует взаимосвязанные между собой функции группировать вместе, чтобы свести к минимуму число загрузок оверлеев.
<p class="tj">Например, если приложение обрабатывает список рассылки, то имеет смысл поместить все подпрограммы сортировки в один оверлей, подпрограммы печати — в другой и т.д.
<p class="tj">Как уже было сказано, в современных вычислительных средах оверлеи применяются редко.
<h2>Связывание с динамически подсоединяемыми библиотеками (DLL)</h2>
<p class="tj">Операционная система Windows предоставляет другой вид связывания, так называемое <em>динамическое связывание</em>. Динамическое связывание — это процесс, при котором объектный код функции остается в отдельном файле на диске до тех пор, пока не запустится использующая его программа. При запуске такой программы динамически загружаются затребованные, связанные с ней функции. Динамически связанный функции помещаются в специальный тип библиотек, которые называются <em>динамически подсоединяемыми библиотеками</em> (DLL — Dynamic-Link Library).
<p class="tj">Основным преимуществом таких библиотек является возможность значительно сократить размер исполняемых программ, потому что отпадает необходимость в том, чтобы каждая программа содержала в себе копию используемых библиотечных функций. Другим положительным моментом является то, что при обновлении функций DLL, использующие их программы автоматически используют и все улучшения новых версий.
<p class="tj">Стандартная библиотека С не содержится в динамически подсоединяемой библиотеке, но многие другие типы функций там есть. Например, при написании приложений для Windows, в DLL хранится полный набор функций программного интерфейса приложений (API — Application Program Interface). Нужно отметить, что для программы, написанной на языке С, обычно не имеет значения, хранятся ли библиотечные функции в DLL или в обычном файле библиотек.
<p><img src="../work/sup.bmp" alt="----------">
<blockquote>
<p class="tj"><sup><a href="#1" id="11">[1]</a></sup>Иногда называется также <em>компоновщиком</em>. Впрочем, компоновщиками обычно называют программы, обладающие несколько меньшими возможностями, чем развитые редакторы связей.
<p class="tj"><sup><a href="#2" id="22">[2]</a></sup>Этот процесс называется <em>редактированием связей</em>.
<p class="tj"><sup><a href="#3" id="33">[3]</a></sup>Называется также <em>загрузочным модулем</em>.
<p class="tj"><sup><a href="#4" id="44">[4]</a></sup>Редакторы связей обычно располагают широким набором возможностей, и при необходимости пользователь может указать необходимые параметры.
<p class="tj"><sup><a href="#5" id="55">[5]</a></sup>Называется также <em>программой в абсолютных адресах</em>.
<p class="tj"><sup><a href="#6" id="66">[6]</a></sup>Создание оверлейных программ — стандартная функция для редакторов связей. Кроме того редакторы связей обычно могут создавать даже загрузочные модули, загружаемые "вразброс", т.е. в несмежные участки памяти. Все это имеет огромное значение для систем, в которых отсутствует виртуальная память. Но в системах с виртуальной памятью эти возможности часто выглядят как ненужные излишества.
<p class="tj"><sup><a href="#7" id="77">[7]</a></sup>Согласно оригиналу. Все же точнее <em>часть загрузочного модуля</em>.
</blockquote>
<hr><a href="../main.htm#12">Содержание</a> | <a href="12.htm">&lt;&lt;&lt;</a> | <a href="library.htm">&gt;&gt;&gt;</a>


</body>
</html>
