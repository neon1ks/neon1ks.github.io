<!DOCTYPE HTML>
<html lang="ru">
<HEAD>
<TITLE>Скелет программы для Windows 2000 - cправочник по Си</TITLE>
<meta charset="utf-8"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#26">Содержание</A> | <A href="2605.htm">&lt;&lt;&lt;</A> | <A href="2607.htm">&gt;&gt;&gt;</A><HR>
<H1>Скелет программы для Windows 2000</H1>








<P class="tj">Теперь, когда представлена вся необходимая предварительная информация, можно приступить к разработке минимального приложения для Windows 2000. Как уже говорилось, все программы для Windows 2000 имеют некоторые общие атрибуты. Скелет программы для Windows 2000, разработанный в этой главе, имеет все необходимые функциональные свойства. В мире Windows-программирования скелеты приложений (другими словами — программы-заготовки) используются довольно часто, поскольку "входная плата" при создании Windows-программ довольно значительна. В качестве примера, сравните, следующие показатели. В отличие от DOS-программ, у которых минимальный размер программы уложится всего в пять строк кода, минимальная программа для Windows составляет примерно пятьдесят строк.
<P class="tj">Минимальная программа для Windows 2000 содержит две функции: <KBD>WinMain()</KBD> и функцию окна. Функция <KBD>WinMain()</KBD> должна выполнить следующие общие действия:
<OL>
<LI class="t">Описать класс окна;
<LI class="t">Зарегистрировать этот класс в Windows 2000;
<LI class="t">Создать окно данного класса;
<LI class="t">Отобразить это окно;
<LI class="t">Запустить выполнение цикла обработки сообщений.
</OL>
<P class="tj">Функция окна должна адекватно реагировать на все имеющие отношение к прикладной программе сообщения. Поскольку скелетная программа кроме отображения окна на экране дисплея больше ничего не делает, единственным сообщением, на которое она должна отреагировать, является сообщение о том, что пользователь прекратил выполнение программы.
<P class="tj">Перед тем как перейти к подробному обсуждению отдельных вопросов, рассмотрим следующую программу, которая представляет собой минимальный скелет программы для Windows 2000. Эта программа-заготовка создает стандартное окно, содержащее заголовок, кнопки системного меню, а также стандартные кнопки свертывания, развертывания и закрытия окна. Благодаря этому окно можно будет свернуть, развернуть, перемещать по экрану, изменять его размеры и, наконец, закрыть.
<PRE>
/* Минимальный скелет программы для Windows 2000. */

#include &lt;windows.h&gt;

LRESULT CALLBACK WindowFunc(HWND, UINT, WPARAM, LPARAM);

char szWinName[] = "MyWin"; /* имя класса окна */

int WINAPI WinMain(HINSTANCE hThisInst, HINSTANCE hPrevInst, 
                   LPSTR lpszArgs, int nWinMode)
{
  HWND hwnd;
  MSG msg;
  WNDCLASSEX wcl;

  /* Определим класс окна. */
  wcl.cbSize = sizeof(WNDCLASSEX); 

  wcl.hInstance = hThisInst;     /* дескриптор даннонго экземпляра */
  wcl.lpszClassName = szWinName; /* имя класса окна */
  wcl.lpfnWndProc = WindowFunc;  /* функция окна */
  wcl.style = 0;                 /* стиль по умолчанию */

  wcl.hIcon = LoadIcon(NULL, IDI_APPLICATION); /* большая пиктограмма */
  wcl.hIconSm = NULL; /* использовать уменьшенный вариант большой
                         пиктограммы */
  wcl.hCursor = LoadCursor(NULL, IDC_ARROW);  /* стиль курсора */

  wcl.lpszMenuName = NULL; /* класс меню отсутствует */
  wcl.cbClsExtra = 0;      /* дополнительная память не требуется */
  wcl.cbWndExtra = 0; 

  /* Сделаем белым цвет фона окна. */
  wcl.hbrBackground = (HBRUSH) GetStockObject(WHITE_BRUSH); 

  /* Зарегистрируем класс окна. */
  if(!RegisterClassEx(&wcl)) return 0;

  /* Поскольку класс окна уже зарегистрирован, теперь может
     быть создано окно. */
  hwnd = CreateWindow(
    szWinName, /* имя класса окна */
    "Windows 2000 Skeleton", /* заголовок */
    WS_OVERLAPPEDWINDOW, /* стиль окна - стандартный */
    CW_USEDEFAULT, /* Координата X - пусть решает Windows */
    CW_USEDEFAULT, /* Координата Y - пусть решает Windows */
    CW_USEDEFAULT, /* Ширина - пусть решает Windows */
    CW_USEDEFAULT, /* Высота - пусть решает Windows */
    NULL,          /* Дескриптор родительского окна - родительское
                      окно отсутствует */
    NULL,          /* Дескриптор меню - меню отсутствует */
    hThisInst,     /* Дескриптор экземпляра */
    NULL           /* Дополнительные аргументы отсутствуют */
  );

  /* Отобразим окно. */
  ShowWindow(hwnd, nWinMode);
  UpdateWindow(hwnd);

  /* Создадим цикл оббработки сообщений. */
  while(GetMessage(&msg, NULL, 0, 0))
  {
    TranslateMessage(&msg); /* трансляция клавиатурных сообщений */
    DispatchMessage(&msg);  /* возвратить управление Windows 2000 */
  }
  return msg.wParam;
}

/* Эта функция вызывается Windows 2000 и пересылает 
   сообщения из очереди сообщений.
*/
LRESULT CALLBACK WindowFunc(HWND hwnd, UINT message,
                            WPARAM wParam, LPARAM lParam)
{
  switch(message) {
    case WM_DESTROY: /* завершить программу */
      PostQuitMessage(0);
      break;
    default:
      /* Пусть Windows 2000 обрабатывает все сообщения, не
         перечисленные в предыдущем операторе switch. */
      return DefWindowProc(hwnd, message, wParam, lParam);
  }
  return 0;
}
</PRE>
<P class="tj">Давайте тщательно, пункт за пунктом, проанализируем эту программу. Во-первых, все Windows-программы должны содержать заголовочный файл WINDOWS.H, Как уже упоминалось, этот файл (вместе с сопутствующими файлами) содержит прототипы функций API и всевозможные типы, макросы и описания, используемые самой Windows. Например, в файле WINDOWS.H (или в его придаточных файлах) определены типы данных <KBD>HWND</KBD> и <KBD>WNDCLASSEX</KBD>.
<P class="tj">Функция окна, используемая данной программой, называется <KBD>WindowFunc()</KBD>. Она объявлена как функция обратного вызова, поскольку именно эту функцию Windows вызывает для взаимодействия с данной программой.
<P class="tj">Как уже говорилось, работа программы начинается с выполнения <KBD>WinMain()</KBD>. Функции <KBD>WinMain()</KBD> передается четыре параметра. Из них <KBD>hThisInst</KBD> и <KBD>hPrevInst</KBD> — дескрипторы. Дескриптор <KBD>hThisInst</KBD> относится к текущему экземпляру программы. Помните, что Windows 2000 является многозадачной системой, поэтому одновременно может выполняться более одного экземпляра вашей программы. Для Windows 2000 дескриптор <KBD>hPrevInst</KBD> всегда принимает значение <KBD>NULL</KBD>. Параметр <KBD>lpszArgs</KBD> является указателем на строку, которая содержит аргументы командной строки, указанные при запуске приложения. В Windows 2000 эта строка содержит всю командную строку, в том числе и имя программы. Параметр <KBD>nWinMode</KBD> содержит значение, которое определяет то, как будет отображаться окно в момент, когда программа начнет выполняться.
<P class="tj">При выполнении данной функции в ней будут созданы три переменные. Переменная <KBD>hwnd</KBD> будет содержать дескриптор окна программы. Структурная переменная <KBD>msg</KBD> будет содержать сообщение окна, а структурная переменная <KBD>wcl</KBD> будет использоваться для описания класса окна.
<H2>Определение класса окна</H2>
<P class="tj">В первую очередь функция <KBD>WinMain()</KBD> выполняет два действия: определение класса окна, а затем его регистрация. Класс окна описывается путем заполнения необходимых значений в полях, определяемых структурой <KBD>WNDCLASSEX</KBD>. Вот эти поля:
<PRE>
UINT cbSize;            /* размер структуры WNDCLASSEX */
UINT style;             /* тип окна */
WNDPROC lpfnWndProc;    /* адрес функции окна */
int cbClsExtra;         /* дополнительная память класса */
int cbWndExtra;         /* дополнительная память окна */
HINSTANCE hInstance;    /* дескриптор данного экземпляра */
HICON hIcon;            /* дескриптор большой пиктограммы */
HICON hIconSm;          /* дескриптор маленькой пиктограммы */
HCURSOR hCursor;        /* дескриптор указателя мыши */
HBRUSH hbrBackground;   /* цвет фона */
LPCSTR lpszMenuName;    /* имя главного меню */
LPCSTR lpszClassName;   /* имя класса окна */
</PRE>
<P class="tj">Как видно из приведенного листинга, <KBD>cbSize</KBD> задает размер структуры <KBD>WNDCLASSEX</KBD>. Элемент <KBD>hInstance</KBD> определяет дескриптор текущего экземпляра и устанавливается в соответствии со значением дескриптора <KBD>hThisInst</KBD>. Имя класса окна указывается с помощью поля <KBD>lpszClassName</KBD>, которое в нашем случае указывает на строку <KBD>"MyWin"</KBD>. Адрес функции окна устанавливается в <KBD>lpfnWndProc</KBD>. В данной программе не назначается стиль по умолчанию, не требуется никакой дополнительной информации и не определяется главное меню. Хотя большинство программ содержат главное меню, в нем нет никакой необходимости для скелета приложения.
<P class="tj">Все Windows-приложения должны определять используемые по умолчанию формы (изображения) указателя мыши и пиктограммы приложения. Прикладная программа может определять свою собственную пользовательскую версию этих ресурсов или она может использовать один из встроенных стилей, что и создает скелет приложения. В любом случае дескрипторы этих ресурсов должны быть присвоены соответствующим элементам структуры <KBD>WNDCLASSEX</KBD>. Чтобы лучше понять, как это делается, начнем, пожалуй, с пиктограмм.
<P class="tj">Любое приложение для Windows 2000 имеет две связанные с ним пиктограммы: одна большая и одна маленькая. Маленькая пиктограмма используется в том случае, когда окно приложения свернуто. Эта же пиктограмма используется для отображения значка системного меню программы. Большая пиктограмма отображается на экране в том случае, когда вы перемещаете или копируете свое приложение на рабочий стол Windows. Как правило, большие пиктограммы представляют собой растровые изображения размером 32x32 пикселя, а маленькие — размером 16x16 пикселей. Большая пиктограмма загружается посредством API-функции <KBD>LoadIcon()</KBD>, чей прототип приведен ниже:
<PRE>HICON LoadIcon(HINSTANCE <I>hInst</I>, LPCSTR <I>lpszName</I>);</PRE>
<P class="tj">Эта функция возвращает дескриптор пиктограммы, а в случае аварийного завершения — значение <KBD>NULL</KBD>. В приведенном примере <I>hInst</I> определяет дескриптор модуля, который содержит пиктограмму, а ее название определяется параметром <I>lpszName</I>. Впрочем, чтобы воспользоваться одной из встроенных пиктограмм, необходимо использовать <KBD>NULL</KBD> для первого параметра и указать один из следующих макросов в качестве второго параметра:</P>
<table class="table table-bordered">
<TR><TH><I>Макрос пиктограммы</I><TH><I>Картинка</I>
<TR><TD>IDI_APPLICATION<TD>Пиктограмма по умолчанию
<TR><TD>IDI_ERROR<TD>Символ ошибки
<TR><TD>IDI_INFORMATION<TD>Символ информации
<TR><TD>IDI_QUESTION<TD>Знак вопроса
<TR><TD>IDI_WARNING<TD>Восклицательный знак
<TR><TD>IDI_WINLOGO<TD>Логотип Windows
</TABLE>
<P class="tj">При загрузке пиктограмм следует обратить особое внимание на два важных момента. Во-первых, если ваше приложение не определяет маленькую пиктограмму, будет исследован ресурсный файл большой пиктограммы. Если в нем содержится маленькая пиктограмма, то именно она и будет использована. В противном случае при необходимости маленькая пиктограмма будет получена в результате уменьшения (пропорционального сжатия) большой пиктограммы. Если вы не хотите определять маленькую пиктограмму, присвойте значение <KBD>NULL</KBD> параметру <KBD>hIconSm</KBD> — именно так и поступает наша программа-заготовка. Во-вторых, функция <KBD>LoadIcon()</KBD>, вообще говоря, может применяться только для загрузки большой пиктограммы. Для загрузки пиктограмм произвольного размера можно воспользоваться функцией <KBD>LoadImage()</KBD>.
<P class="tj">Чтобы загрузить указатель мыши, используйте API-функцию <KBD>LoadCursor()</KBD>. Данная функция имеет следующий прототип:
<PRE>HCURSOR LoadCursor(HINSTANSE <I>hInst</I>, LPCSTR <I>lpszName</I>);</PRE>
<P class="tj">Эта функция возвращает дескриптор ресурса курсора или <KBD>NULL</KBD> в случае аварийного завершения. В данном примере <I>hInst</I> определяет дескриптор модуля, содержащего курсор мыши, а его имя указывается в параметре <I>lpszName</I>. Чтобы воспользоваться одним из встроенных указателей мыши, необходимо использовать <KBD>NULL</KBD> в качестве первого параметра и задать макрос одного из встроенных курсоров мыши в качестве второго параметра. Ниже приведено несколько встроенных курсоров:</P>
<table class="table table-bordered">
<TR><TH><I>Макрос курсора мыши</I><TH><I>Форма</I>
<TR><TD>IDC_ARROW<TD>Указатель-стрелка по умолчанию
<TR><TD>IDC_CROSS<TD>Перекрестие
<TR><TD>IDC_HAND<TD>Рука
<TR><TD>IDC_IBEAM<TD>Вертикальная двутавровая балка
<TR><TD>IDC_WAIT<TD>Песочные часы
</TABLE>
<P class="tj">В качестве цвета фона окна, созданного скелетом программы, выбран белый цвет, а дескриптор <I>кисти</I> (<I>brush</I>) получается с помощью API-функции <KBD>GetStockObject()</KBD>. Кисть является ресурсом, который окрашивает экран с учетом предварительно заданных размера, цвета и узора. Функция <KBD>GetStockObject()</KBD> применяется для получения дескриптора ряда стандартных объектов отображения, в том числе кистей, перьев (которые проводят линии) и шрифтов символов. Вот его прототип:
<PRE>HGDIOBJ GetStockObject(int <I>object</I>);</PRE>
<P class="tj">Данная функция возвращает дескриптор объекта, определенного параметром <I>object</I>. В случае аварийного завершения возвращается значение <KBD>NULL</KBD>. (Тип <KBD>HGDIOBJ</KBD> относится к GDI-дескрипторам). Ниже приведено несколько встроенных кистей, доступных вашей программе:</P>
<table class="table table-bordered">
<TR><TH><I>Имя макроса</I><TH><I>Тип фона</I>
<TR><TD>BKACK_BRUSH<TD>Темно серый
<TR><TD>DKGRAY_BRUSH<TD>Полупрозрачный (видно сквозь окно)
<TR><TD>HOLLOW_BRUSH<TD>Черный
<TR><TD>LTGRAY_BRUSH<TD>Светло серый
<TR><TD>WHITE_BRUSH<TD>Белый
</TABLE>
<P class="tj">Для получения кисти можно использовать эти макросы в качестве параметров функции <KBD>GetStockObject()</KBD>.
<P class="tj">После того как класс окна полностью определен, он регистрируется в Windows 2000 с помощью API-функции <KBD>RegisterClassEx()</KBD>, прототип которой приведен ниже:
<PRE>ATOM RegisterClassEx(CONST WNDCLASSEX <I>*lpWClass</I>);</PRE>
<P class="tj">Эта функция возвращает значение, которое идентифицирует класс окна. <KBD>ATOM</KBD> является <KBD>typedef</KBD>-описанием типа, которое подразумевает тип <KBD>WORD</KBD>. Каждый класс окна принимает уникальное значение. Параметр <I>lpWClass</I> должен содержать адрес структуры <KBD>WNDCLASSEX</KBD>.
<H2>Создание окна</H2>
<P class="tj">После того, как класс окна определен и зарегистрирован, ваше приложение может на самом деле создать окно этого класса с помощью API-функции <KBD>CreateWindow()</KBD>, прототип которой выглядит следующим образом:
<PRE>
HWND CreateWindow(
  LPCSTR <I>lpszClassName</I>,    /* название класса окна */
  LPCSTR <I>lpszWinName</I>,      /* заголовок окна */
  Dword <I>dwStyle</I>,           /* тип окна */
  int <I>X</I>, int <I>Y</I>,            /* координаты верхней левой точки */
  int <I>Width</I>, int <I>Height</I>,   /* размеры окна */
  HWDN <I>hParent</I>,            /* дескриптор родительского окна */
  HMENU <I>hMenu</I>,             /* дескриптор главного меню */
  HINSTANCE <I>hThisInst</I>,     /* дескриптор создателя */
  LPVOID <I>lpszAdditional</I>,   /* указатель на дополнительную
                              информацию */
);
</PRE>
<P class="tj">Как видно из листинга скелета программы, многим параметрам функции <KBD>СrеateWindow()</KBD> значения могут присваиваться по умолчанию или же в качестве значения им можно присвоить <KBD>NULL</KBD>. В действительности, в качестве параметров <I>X</I>, <I>Y</I>, <I>Width</I> и <I>Height</I> чаще всего используется макрос <KBD>CW_USEDEFAULT</KBD>; в этом случае Windows 2000 выбирает подходящий размер и местоположение окна. Если данное окно не имеет родительского окна (а именно этот случай имеет место в нашем скелете программы), то в качестве параметра <I>hParent</I> может быть указан <KBD>NULL</KBD>. (Для указания значения этого параметра можно также использовать <KBD>HWND_DESKTOP</KBD>.) Если окно не содержит главного меню или использует главное меню, которое определено посредством класса окна, то параметр <I>hMenu</I> должен иметь значение <KBD>NULL</KBD>. (Параметр <I>hMenu</I> имеет также и другие применения.) К тому же, если никакая дополнительная информация не требуется, что характерно для большинства случаев, то параметру <I>lpszAdditional</I> можно присвоить значение <KBD>NULL</KBD>. (Тип <KBD>LPVOID</KBD> переопределяется оператором <KBD>typedef</KBD> как <KBD>void*</KBD>. Исторически сложилось так, что <KBD>LPVOID</KBD> обозначает длинный указатель на <KBD>void</KBD>.)
<P class="tj">Значения остальных четырех параметров должны быть явно установлены прикладной программой. Во-первых, параметр <I>lpszClassName</I> должен указывать на имя класса окна. (Это то имя, которое вы дали окну при его регистрации.) Заголовок окна — это последовательность символов, на которую указывают посредством <I>lpszWinName</I>. Это может быть и пустая строка, но, как правило, окну следует давать какой-то заголовок. Стиль (или тип) окна, созданного в действительности, определяется значением параметра <I>dwStyle</I>. Макрос <KBD>WS_OVERLAPPEDWINDOW</KBD> определяет стандартное окно, которое имеет системное меню, обрамление и кнопки свертывания, развертывания и закрытия окна. Хотя чаще всего используется именно такой стиль окна, вы можете построить окно, удовлетворяющее вашим собственным критериям. Для этого просто объедините с помощью оператора <KBD>OR</KBD> макросы различных необходимых вам стилей. Ниже приведены некоторые часто встречающиеся стили:</P>
<table class="table table-bordered">
<TR><TH><I>Макрос стиля</I><TH><I>Функция Windows</I>
<TR><TD>WS_OVERLAPPED<TD>Перекрывающееся окно с обрамлением
<TR><TD>WS_MAXIMIZEBOX<TD>Кнопка развертывания
<TR><TD>WS_MINIMIZEBOX<TD>Кнопка свертывания
<TR><TD>WS_SYSMENU<TD>Системное меню
<TR><TD>WS_HSCROLL<TD>Горизонтальная полоса прокрутки
<TR><TD>WS_VSCROLL<TD>Вертикальная полоса прокрутки
</TABLE>
<P class="tj">Параметр <I>hThisInst</I> игнорируется операционной системой Windows 2000, но для Windows 95/98 он должен содержать дескриптор текущего экземпляра приложения. Поэтому, чтобы обеспечить совместимость с этими средами, а заодно и предотвратить проблемы в будущем, параметру <I>hThisInst</I> рекомендуется присваивать значение дескриптора текущего экземпляра, как это сделано в нашем скелете программы.
<P class="tj">Функция <KBD>CreateWindow()</KBD> возвращает дескриптор созданного ею окна или <KBD>NULL</KBD>, если окно не может быть создано.
<P class="tj">Даже после создания окна оно все еще не отображается на экране дисплея. Чтобы отобразить окно, надо вызвать API-функцию <KBD>ShowWindow()</KBD>. Эта функция имеет следующий прототип:
<PRE>BOOL ShowWindow(HWND <I>hwnd</I>, int <I>nHow</I>);</PRE>
<P class="tj">Дескриптор отображаемого дисплеем окна указывается в параметре <I>hwndM</I>. А параметром <I>nHow</I> определяется режим отображения. Если окно выводится на экран в первый раз, целесообразно в качестве параметра <I>nHow</I> указать значение параметра <KBD>nWinMode</KBD> функции <KBD>WinMain()</KBD>. Значение <KBD>nWinMode</KBD> определяет способ отображения окна сразу после запуска программы на выполнение. Последующие вызовы могут при необходимости отобразить окно в нужном виде или вовсе удалить его. Некоторые общеупотребительные значения параметра <I>nHow</I> приведены ниже:</P>
<table class="table table-bordered">
<TR><TH><I>Макрос отображения</I><TH><I>Получаемый эффект</I>
<TR><TD>SW_HIDE<TD>Удаляет окно с экрана
<TR><TD>SW_MINIMIZE<TD>Свертывает окно в пиктограмму
<TR><TD>SW_MAXIMIZE<TD>Развертывает окно
<TR><TD>SW_RESTORE<TD>Возвращает окну обычный размер
</TABLE>
<P class="tj">Функция <KBD>ShowWindow()</KBD> возвращает статус предыдущего режима отображения окна. Если окно выводилось на экран, то возвращается ненулевое значение. А если окно не отображалось на экране, то возвращается нуль.
<P class="tj">Хотя с формальной точки зрения для скелета программы это и не обязательно, все же в его текст включен вызов функции <KBD>UpdateWindow()</KBD>, поскольку она необходима практически для всех Windows 2000-приложений. По существу, она указывает, что Windows 2000 должна послать вашему приложению сообщение о том, что его главное окно необходимо обновить.
<H2>Цикл обработки сообщений</H2>
<P class="tj">Финальная часть функции <KBD>WinMain()</KBD> заготовки прикладной программы относится к <I>циклу обработки сообщений</I>. Цикл обработки сообщений является составной частью всех Windows-приложений. Его назначение — принять и обработать сообщение, посланное Windows 2000. Во время выполнения прикладной программы ей постоянно посылаются сообщения. Все эти сообщения сохраняются в очереди сообщений приложения и находятся там до тех пор, пока они не будут извлечены и обработаны. Всякий раз, когда приложение готово извлечь следующее сообщение, оно должно вызвать API-функцию <KBD>GetMessage()</KBD>, имеющую следующий прототип:
<PRE>BOOL GetMessage(LPMSG <I>msg</I>, HWND <I>hwnd</I>, UINT <I>min</I>, UINT <I>max</I>);</PRE>
<P class="tj">Сообщение будет записано в структуру, на которую указывает параметр <I>msg</I>. Все сообщения Windows имеют тип структуры <KBD>MSG</KBD>, представленный ниже:
<PRE>
/* Структура сообщения */
typedef stuct tagMSG
{
  HWND hwnd;     /* окно, для которого предназначено сообщение */
  UINT message;  /* сообщение */
  WPARAM wParam; /* информация, обусловленная сообщением */
  LPARAM lParam; /* дополнительная информация, обусловленная
                    сообщением */
  DWORD time;    /* время, когда было отправлено сообщение */
  POINT pt;      /* координаты X и Y местоположения указателя мыши */
} MSG;
</PRE>
<P class="tj">В структуре <KBD>MSG</KBD> дескриптор окна, которому предназначается сообщение, содержится в <KBD>hwnd</KBD>. Все сообщения в Windows 2000 являются 32-разрядными целыми числами, а само сообщение содержится в поле <KBD>message</KBD>. В зависимости от конкретного сообщения обусловленная им дополнительная информация передается в <KBD>wParam</KBD> и <KBD>lParam</KBD>. Оба типа <KBD>WPARAM</KBD> и <KBD>LPARAM</KBD> являются 32-разрядными значениями.
<P class="tj">Время, когда было отправлено (зарегистрировано) сообщение, определяется в миллисекундах в поле <KBD>time</KBD>.
<P class="tj">Элемент <KBD>pt</KBD> содержит координаты указателя мыши в тот момент, когда было отправлено сообщение. Координаты хранятся в структуре <KBD>POINT</KBD>, которая определяется следующим образом:
<PRE>
typedef stuct tagPOINT {
  LONG x, y;
} POINT;
</PRE>
<P class="tj">Если в очереди сообщений приложения отсутствуют сообщения, то вызов функции <KBD>GetMessage()</KBD> приведет к передаче управления обратно Windows 2000.
<P class="tj">Параметр <I>hwnd</I> функции <KBD>GetMessage()</KBD> определяет, для какого окна будут получены сообщения. Ведь часто приложение имеет несколько окон, и иногда необходимо принимать сообщения только для конкретного окна. Ну а если этому параметру присвоить значение <KBD>NULL</KBD>, то в ваше приложение будут направляться все сообщения.
<P class="tj">Оставшиеся два параметра функции <KBD>GetMessage()</KBD> определяют диапазон получаемых сообщений. Обычно приложение должно принимать все сообщения. Для этого необходимо оба параметра (и <KBD>min</KBD>, и <KBD>max</KBD>) установить равными нулю; именно так и сделано в скелете программы.
<P class="tj">Функция <KBD>GetMessage()</KBD> возвращает нуль, когда пользователь прекращает работу программы, что приводит к завершению цикла обработки сообщений. Во всех остальных случаях данная функция возвращает ненулевое значение. Если происходит ошибка, эта функция возвращает -1. Ошибка может произойти только при необычных обстоятельствах, которые не приемлемы для работы большинства программ.
<P class="tj">Внутри цикла обработки сообщений осуществляется вызов двух функций. Первая — это API-функция <KBD>TranslateMessage()</KBD>. Эта функция транслирует генерируемые операционной системой Windows 2000 виртуальные коды клавиш в символьные сообщения. Хотя ее применение необязательно во всех приложениях, в большинстве из них все же используется вызов функции <KBD>TranslateMessage()</KBD>, поскольку она необходима для осуществления полной интеграции клавиатуры в вашу прикладную программу.
<P class="tj">После того как сообщение было извлечено и преобразовано, оно отсылается обратно в Windows 2000 с помощью API-функции <KBD>DispatchMessage()</KBD>. Затем Windows 2000 хранит это сообщение до тех пор, пока не сможет передать его функции окна вашей программы.
<P class="tj">Как только завершается цикл обработки сообщений, выполнение функции <KBD>WinMain()</KBD> заканчивается, при этом она возвращает Windows 2000 значение <KBD>msg.wParam</KBD>. Это значение содержит код возврата, генерируемый при завершении выполнения прикладной программы.
<H2>Функция окна</H2>
<P class="tj">Второй функцией в скелете приложения является его функция окна. В нашем случае эта функция названа <KBD>WindowFunc()</KBD>, хотя она может носить любое понравившееся вам имя. Сообщения передаются функции окна посредством Windows 2000. Первые четыре элемента структуры <KBD>MSG</KBD> являются его параметрами. Из них единственным параметром, который используется скелетом программы, является собственно сообщение.
<P class="tj">Функция окна нашей программы-заготовки реагирует явным образом только на одно сообщение: <KBD>WM_DESTROY</KBD>. Такое сообщение посылается тогда, когда пользователь прекращает работу приложения. После получения такого сообщения программа должна осуществить вызов API-функции <KBD>PostQuitMessage()</KBD>. Аргументом этой функции является код возврата, который помещается в <KBD>msg.wParam</KBD> внутри функции <KBD>WinMain()</KBD>. Вызов <KBD>PostQuitMessage()</KBD> приводит к передаче приложению сообщения <KBD>WM_QUIT</KBD>, что заставляет функцию <KBD>GetMessage()</KBD> возвратить значение ЛОЖЬ (false) и, следовательно, прекратить работу вашей программы.
<P class="tj">Все остальные сообщения, принимаемые функцией <KBD>WindowFunc()</KBD>, передаются операционной системе Windows 2000 посредством вызова <KBD>DefWindowProc()</KBD> для стандартной обработки по умолчанию. Этот этап необходим, поскольку все сообщения так или иначе должны быть обработаны.
<P class="tj">Каждое сообщение устанавливает некоторое значение, которое должно быть возвращено функцией окна после обработки сообщения. Обычно после обработки большей части сообщений необходимо возвращать нулевое значение. Но после обработки некоторых сообщений требуется возвратить другой код возврата.


<p>






</p>
<small>
 
</small><HR><A href="../main.htm#26">Содержание</A> | <A href="2605.htm">&lt;&lt;&lt;</A> | <A href="2607.htm">&gt;&gt;&gt;</A>
</BODY>
</html>
