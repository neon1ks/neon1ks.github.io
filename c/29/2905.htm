<!DOCTYPE HTML>
<html lang="ru">
<HEAD>
<TITLE>РЎРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёР№ Р°РЅР°Р»РёР·Р°С‚РѕСЂ РІС‹СЂР°Р¶РµРЅРёР№ - cРїСЂР°РІРѕС‡РЅРёРє РїРѕ РЎРё</TITLE>
<meta charset="utf-8"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#29">РЎРѕРґРµСЂР¶Р°РЅРёРµ</A> | <A href="2904.htm">&lt;&lt;&lt;</A> | <A href="2906.htm">&gt;&gt;&gt;</A><HR>
<H1>РЎРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёР№ Р°РЅР°Р»РёР·Р°С‚РѕСЂ РІС‹СЂР°Р¶РµРЅРёР№</H1>








<P class="tj">Р§Р°СЃС‚СЊ РїСЂРѕРіСЂР°РјРјС‹, РІС‹РїРѕР»РЅСЏСЋС‰Р°СЏ С‡С‚РµРЅРёРµ Рё Р°РЅР°Р»РёР· РІС‹СЂР°Р¶РµРЅРёСЏ, РЅР°Р·С‹РІР°РµС‚СЃСЏ <I>СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёРј Р°РЅР°Р»РёР·Р°С‚РѕСЂРѕРј РІС‹СЂР°Р¶РµРЅРёР№</I>. Р­С‚Рѕ вЂ” РЅР°РёР±РѕР»РµРµ РІР°Р¶РЅР°СЏ РїРѕРґСЃРёСЃС‚РµРјР° РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР° Little РЎ. РўР°Рє РєР°Рє СЃРѕРіР»Р°СЃРЅРѕ СЃС‚Р°РЅРґР°СЂС‚Сѓ РјРЅРѕР¶РµСЃС‚РІРѕ РІС‹СЂР°Р¶РµРЅРёР№ РІ СЏР·С‹РєРµ РЎ Р·РЅР°С‡РёС‚РµР»СЊРЅРѕ С€РёСЂРµ, С‡РµРј РІРѕ РјРЅРѕРіРёС… РґСЂСѓРіРёС… СЏР·С‹РєР°С… РїСЂРѕРіСЂР°РјРјРёСЂРѕРІР°РЅРёСЏ, С‚Рѕ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёР№ Р°РЅР°Р»РёР·Р°С‚РѕСЂ РІС‹СЂР°Р¶РµРЅРёР№ СЃРѕСЃС‚Р°РІР»СЏРµС‚ Р·РЅР°С‡РёС‚РµР»СЊРЅСѓСЋ С‡Р°СЃС‚СЊ РїСЂРѕРіСЂР°РјРјРЅРѕРіРѕ РєРѕРґР° СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р°С‚РѕСЂР° РїСЂРѕРіСЂР°РјРј.
<P class="tj">Р”Р»СЏ РїРѕСЃС‚СЂРѕРµРЅРёСЏ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р°С‚РѕСЂР° РІС‹СЂР°Р¶РµРЅРёР№ СЏР·С‹РєР° РЎ РјРѕР¶РЅРѕ РїСЂРёРјРµРЅРёС‚СЊ РЅРµСЃРєРѕР»СЊРєРѕ СЂР°Р·Р»РёС‡РЅС‹С… РјРµС‚РѕРґРѕРІ. Р’Рѕ РјРЅРѕРіРёС… РєРѕРјРјРµСЂС‡РµСЃРєРёС… РєРѕРјРїРёР»СЏС‚РѕСЂР°С… РёСЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ <I>СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёРµ Р°РЅР°Р»РёР·Р°С‚РѕСЂС‹, СѓРїСЂР°РІР»СЏРµРјС‹Рµ С‚Р°Р±Р»РёС†РµР№</I>; С‚Р°РєРёРµ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёРµ Р°РЅР°Р»РёР·Р°С‚РѕСЂС‹ СЃРѕР·РґР°СЋС‚СЃСЏ СЃРїРµС†РёР°Р»СЊРЅС‹РјРё РіРµРЅРµСЂР°С‚РѕСЂР°РјРё РїСЂРѕРіСЂР°РјРј СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р°. РЎРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёРµ Р°РЅР°Р»РёР·Р°С‚РѕСЂС‹, СѓРїСЂР°РІР»СЏРµРјС‹Рµ С‚Р°Р±Р»РёС†РµР№, РІ РѕР±С‰РµРј СЃР»СѓС‡Р°Рµ РѕР±Р»Р°РґР°СЋС‚ Р±РѕР»СЊС€РёРј Р±С‹СЃС‚СЂРѕРґРµР№СЃС‚РІРёРµРј, С‡РµРј РґСЂСѓРіРёРµ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёРµ Р°РЅР°Р»РёР·Р°С‚РѕСЂС‹, РѕРґРЅР°РєРѕ РїСЂРѕС†РµСЃСЃ РёС… СЃРѕР·РґР°РЅРёСЏ РѕС‡РµРЅСЊ С‚СЂСѓРґРѕРµРјРєРёР№. Р’ СЂР°СЃСЃРјР°С‚СЂРёРІР°РµРјРѕРј Р·РґРµСЃСЊ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂРµ Little РЎ РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ <I>СЂРµРєСѓСЂСЃРёРІРЅС‹Р№ РЅРёСЃС…РѕРґСЏС‰РёР№ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёР№ Р°РЅР°Р»РёР·Р°С‚РѕСЂ</I><SUP><A href="#11" id="1">[1]</A></SUP>, РєРѕС‚РѕСЂС‹Р№ РїСЂРµРґСЃС‚Р°РІР»СЏРµС‚ СЃРѕР±РѕР№ СЂРµР°Р»РёР·Р°С†РёСЋ РІ СЏР·С‹РєРµ РЎ РїСЂРѕРёР·РІРѕРґСЏС‰РёС… РїСЂР°РІРёР», РїСЂРёРІРµРґРµРЅРЅС‹С… РІ РїСЂРµРґС‹РґСѓС‰РµРј СЂР°Р·РґРµР»Рµ.
<P class="tj">Р РµРєСѓСЂСЃРёРІРЅС‹Р№ РЅРёСЃС…РѕРґСЏС‰РёР№ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёР№ Р°РЅР°Р»РёР·Р°С‚РѕСЂ РїСЂРµРґСЃС‚Р°РІР»СЏРµС‚ СЃРѕР±РѕР№ РЅР°Р±РѕСЂ РІР·Р°РёРјРЅРѕ СЂРµРєСѓСЂСЃРёРІРЅС‹С… С„СѓРЅРєС†РёР№, РѕР±СЂР°Р±Р°С‚С‹РІР°СЋС‰РёС… РІС‹СЂР°Р¶РµРЅРёРµ. Р•СЃР»Рё СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёР№ Р°РЅР°Р»РёР·Р°С‚РѕСЂ СЂР°Р±РѕС‚Р°РµС‚ РІ РєРѕРјРїРёР»СЏС‚РѕСЂРµ, С‚Рѕ РѕРЅ РіРµРЅРµСЂРёСЂСѓРµС‚ РѕР±СЉРµРєС‚РЅС‹Р№ РєРѕРґ, СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰РёР№ РёСЃС…РѕРґРЅРѕРјСѓ С‚РµРєСЃС‚Сѓ РїСЂРѕРіСЂР°РјРјС‹. Р’ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂРµ С†РµР»СЊСЋ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р°С‚РѕСЂР° СЏРІР»СЏРµС‚СЃСЏ РІС‹С‡РёСЃР»РµРЅРёРµ Р·РЅР°С‡РµРЅРёСЏ Р·Р°РґР°РЅРЅРѕРіРѕ РІС‹СЂР°Р¶РµРЅРёСЏ. Р’ СЌС‚РѕРј СЂР°Р·РґРµР»Рµ СЂР°СЃСЃРјР°С‚СЂРёРІР°РµС‚СЃСЏ СЂР°Р·СЂР°Р±РѕС‚РєР° СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р°С‚РѕСЂР° РІС‹СЂР°Р¶РµРЅРёР№ СЏР·С‹РєР° Little РЎ.</P>
<table class="table">
<TR><TD align=center bgcolor=skyblue width=7%>РќР° Р·Р°РјРµС‚РєСѓ<TD class="tj">РћСЃРЅРѕРІС‹ С‚РµРѕСЂРёРё СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° РІС‹СЂР°Р¶РµРЅРёР№ СЂР°СЃСЃРјРѕС‚СЂРµРЅС‹ РІ <A href="../24/24.htm">РіР»Р°РІРµ 24</A>. РЎРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёР№ Р°РЅР°Р»РёР·Р°С‚РѕСЂ, СЂР°Р·СЂР°Р±Р°С‚С‹РІР°РµРјС‹Р№ РІ СЌС‚РѕР№ РіР»Р°РІРµ, СЃС‚СЂРѕРёС‚СЃСЏ РЅР° РѕСЃРЅРѕРІРµ РїСЂРѕСЃС‚РѕРіРѕ СЂР°СЃС€РёСЂРµРЅРёСЏ СЌС‚РѕР№ С‚РµРѕСЂРёРё.
</TABLE>
<H2>РЎРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёР№ СЂР°Р·Р±РѕСЂ РёСЃС…РѕРґРЅРѕРіРѕ С‚РµРєСЃС‚Р° РїСЂРѕРіСЂР°РјРјС‹</H2>
<P class="tj">РЎРїРµС†РёР°Р»СЊРЅР°СЏ С„СѓРЅРєС†РёСЏ, С‡РёС‚Р°СЋС‰Р°СЏ РёСЃС…РѕРґРЅС‹Р№ С‚РµРєСЃС‚ РїСЂРѕРіСЂР°РјРјС‹ Рё РІРѕР·РІСЂР°С‰Р°СЋС‰Р°СЏ РѕС‡РµСЂРµРґРЅСѓСЋ Р»РѕРіРёС‡РµСЃРєСѓСЋ РµРґРёРЅРёС†Сѓ, СЏРІР»СЏРµС‚СЃСЏ С„СѓРЅРґР°РјРµРЅС‚Р°Р»СЊРЅРѕР№ С‡Р°СЃС‚СЊСЋ РєР°Р¶РґРѕРіРѕ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР° Рё РєРѕРјРїРёР»СЏС‚РѕСЂР°. РСЃС‚РѕСЂРёС‡РµСЃРєРё СЃР»РѕР¶РёРІС€РµРµСЃСЏ РЅР°Р·РІР°РЅРёРµ С‚Р°РєРѕР№ Р»РѕРіРёС‡РµСЃРєРѕР№ РµРґРёРЅРёС†С‹ вЂ” <I>Р»РµРєСЃРµРјР°</I>. Р’Рѕ РІСЃРµС… СЏР·С‹РєР°С… РїСЂРѕРіСЂР°РјРјРёСЂРѕРІР°РЅРёСЏ (РІ С‚РѕРј С‡РёСЃР»Рµ Рё РІ СЏР·С‹РєРµ РЎ) РїСЂРѕРіСЂР°РјРјР° СЂР°СЃСЃРјР°С‚СЂРёРІР°РµС‚СЃСЏ РєР°Рє РїРѕСЃР»РµРґРѕРІР°С‚РµР»СЊРЅРѕСЃС‚СЊ Р»РµРєСЃРµРј. Р”СЂСѓРіРёРјРё СЃР»РѕРІР°РјРё, Р»РµРєСЃРµРјР° вЂ” СЌС‚Рѕ РЅРµРґРµР»РёРјР°СЏ РµРґРёРЅРёС†Р° РїСЂРѕРіСЂР°РјРјС‹. РќР°РїСЂРёРјРµСЂ, РѕРїРµСЂР°С‚РѕСЂ СЂР°РІРµРЅСЃС‚РІР° <KBD>==</KBD> СЏРІР»СЏРµС‚СЃСЏ Р»РµРєСЃРµРјРѕР№. Р­С‚Рё РґРІР° Р·РЅР°РєР° СЂР°РІРµРЅСЃС‚РІР° РЅРµР»СЊР·СЏ СЂР°Р·РґРµР»РёС‚СЊ, РЅРµ РёР·РјРµРЅРёРІ РєР°СЂРґРёРЅР°Р»СЊРЅС‹Рј РѕР±СЂР°Р·РѕРј РёС… Р·РЅР°С‡РµРЅРёРµ. РђРЅР°Р»РѕРіРёС‡РЅРѕ, <KBD>if</KBD> вЂ” С‚Р°РєР¶Рµ Р»РµРєСЃРµРјР°. РќРё "<KBD>i</KBD>", РЅРё "<KBD>f</KBD>" СЃР°РјРё РїРѕ СЃРµР±Рµ РЅРµ РёРјРµСЋС‚ РІ РїСЂРѕРіСЂР°РјРјРµ РЅР° РЎ РЅРёРєР°РєРѕРіРѕ Р·РЅР°С‡РµРЅРёСЏ.
<P class="tj">Р’ СЏР·С‹РєРµ РЎ РєР°Р¶РґР°СЏ Р»РµРєСЃРµРјР° РїСЂРёРЅР°РґР»РµР¶РёС‚ РѕРґРЅРѕР№ РёР· СЃР»РµРґСѓСЋС‰РёС… РєР°С‚РµРіРѕСЂРёР№:
<PRE>
Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅС‹Рµ СЃР»РѕРІР°     РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂС‹     РєРѕРЅСЃС‚Р°РЅС‚С‹
СЃС‚СЂРѕРєРё                      РѕРїРµСЂР°С‚РѕСЂС‹          Р·РЅР°РєРё РїСѓРЅРєС‚СѓР°С†РёРё
</PRE>
<P class="tj"><I>Р—Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅС‹Рµ СЃР»РѕРІР°</I> вЂ” СЌС‚Рѕ Р»РµРєСЃРµРјС‹, СЃРѕСЃС‚Р°РІР»СЏСЋС‰РёРµ СЏР·С‹Рє РЎ; Рє РЅРёРј РѕС‚РЅРѕСЃРёС‚СЃСЏ, РЅР°РїСЂРёРјРµСЂ, <KBD>while</KBD>. <I>РРґРµРЅС‚РёС„РёРєР°С‚РѕСЂС‹</I> вЂ” СЌС‚Рѕ РёРјРµРЅР° РїРµСЂРµРјРµРЅРЅС‹С…, С„СѓРЅРєС†РёР№ Рё С‚РёРїРѕРІ, РѕРїСЂРµРґРµР»РµРЅРЅС‹С… РїРѕР»СЊР·РѕРІР°С‚РµР»РµРј (РІ Little РЎ РЅРµ СЂРµР°Р»РёР·РѕРІР°РЅС‹). <I>Р—РЅР°РєРё РїСѓРЅРєС‚СѓР°С†РёРё</I> вЂ” СЌС‚Рѕ РЅРµРєРѕС‚РѕСЂС‹Рµ СЃРёРјРІРѕР»С‹, С‚Р°РєРёРµ РєР°Рє С‚РѕС‡РєР° СЃ Р·Р°РїСЏС‚РѕР№, Р·Р°РїСЏС‚Р°СЏ, СЂР°Р·Р»РёС‡РЅС‹Рµ СЃРєРѕР±РєРё Рё С‚.Рї. Р’ Р·Р°РІРёСЃРёРјРѕСЃС‚Рё РѕС‚ РєРѕРЅС‚РµРєСЃС‚Р°, РЅРµРєРѕС‚РѕСЂС‹Рµ РёР· СЌС‚РёС… СЃРёРјРІРѕР»РѕРІ, РјРѕРіСѓС‚ Р±С‹С‚СЊ РѕРїРµСЂР°С‚РѕСЂР°РјРё. РџСЂРёРІРµРґРµРј РїСЂРёРјРµСЂ СЂР°Р·Р±РёРµРЅРёСЏ РЅР° Р»РµРєСЃРµРјС‹ РїСЂРё СЂР°Р·Р±РѕСЂРµ РѕРїРµСЂР°С‚РѕСЂР° СЃР»РµРІР° РЅР°РїСЂР°РІРѕ. РћРїРµСЂР°С‚РѕСЂ
<PRE>for(x=0; x<10; x=x+1) printf("Р°Р»Р»Рѕ %d", x);
</PRE>
<P class="t">СЃРѕСЃС‚РѕРёС‚ РёР· СЃР»РµРґСѓСЋС‰РёС… Р»РµРєСЃРµРј:
<PRE>
<B>Р›РµРєСЃРµРјР°       РљР°С‚РµРіРѕСЂРёСЏ</B>
for           Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅРѕРµ СЃР»РѕРІРѕ
(             Р·РЅР°Рє РїСѓРЅРєС‚СѓР°С†РёРё
x             РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂ
=             РѕРїРµСЂР°С‚РѕСЂ
0             РєРѕРЅСЃС‚Р°РЅС‚Р°
;             Р·РЅР°Рє РїСѓРЅРєС‚СѓР°С†РёРё
x             РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂ
&lt;             РѕРїРµСЂР°С‚РѕСЂ
10            РєРѕРЅСЃС‚Р°РЅС‚Р°
;             Р·РЅР°Рє РїСѓРЅРєС‚СѓР°С†РёРё
x             РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂ
=             РѕРїРµСЂР°С‚РѕСЂ
x             РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂ
+             РѕРїРµСЂР°С‚РѕСЂ
1             РєРѕРЅСЃС‚Р°РЅС‚Р°
)             Р·РЅР°Рє РїСѓРЅРєС‚СѓР°С†РёРё
printf        РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂ
(             Р·РЅР°Рє РїСѓРЅРєС‚СѓР°С†РёРё
"Р°Р»Р»Рѕ %d"     СЃС‚СЂРѕРєР°
,             Р·РЅР°Рє РїСѓРЅРєС‚СѓР°С†РёРё
x             РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂ
)             Р·РЅР°Рє РїСѓРЅРєС‚СѓР°С†РёРё
;             Р·РЅР°Рє РїСѓРЅРєС‚СѓР°С†РёРё
</PRE>
<P class="tj">РћРґРЅР°РєРѕ РґР»СЏ СѓРїСЂРѕС‰РµРЅРёСЏ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР° Little РЎ РІ РЅРµРј РѕРїСЂРµРґРµР»СЏСЋС‚СЃСЏ СЃР»РµРґСѓСЋС‰РёРµ РєР°С‚РµРіРѕСЂРёРё Р»РµРєСЃРµРј:
<PRE>
<B>РўРёРї Р»РµРєСЃРµРјС‹                          Р’РєР»СЋС‡Р°РµС‚</B>
delimiter (СЂР°Р·РґРµР»РёС‚РµР»СЊ)              Р·РЅР°РєРё РїСѓРЅРєС‚СѓР°С†РёРё Рё РѕРїРµСЂР°С‚РѕСЂС‹
keyword (Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅРѕРµ СЃР»РѕРІРѕ)    Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅС‹Рµ СЃР»РѕРІР°
string (СЃС‚СЂРѕРєР°)                      СЃС‚СЂРѕРєРё, Р·Р°РєР»СЋС‡РµРЅРЅС‹Рµ РІ РґРІРѕР№РЅС‹Рµ РєР°РІС‹С‡РєРё
identifier (РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂ)           РёРјРµРЅР° РїРµСЂРµРјРµРЅРЅС‹С… Рё С„СѓРЅРєС†РёР№
number (С‡РёСЃР»Рѕ)                       С‡РёСЃР»РѕРІР°СЏ РєРѕРЅСЃС‚Р°РЅС‚Р°
block (Р±Р»РѕРє)                         { РёР»Рё }
</PRE>
<P class="tj">Р¤СѓРЅРєС†РёСЏ <KBD>get_token()</KBD> РІС‹РґРµР»СЏРµС‚ Р»РµРєСЃРµРјС‹ РёР· РёСЃС…РѕРґРЅРѕРіРѕ С‚РµРєСЃС‚Р° РїСЂРѕРіСЂР°РјРјС‹ Little РЎ Рё РІРѕР·РІСЂР°С‰Р°РµС‚ РёС… РІ РєР°С‡РµСЃС‚РІРµ СЃРІРѕРµРіРѕ Р·РЅР°С‡РµРЅРёСЏ:
<PRE>
/* РЎС‡РёС‚С‹РІР°РЅРёРµ Р»РµРєСЃРµРјС‹ РёР· РІС…РѕРґРЅРѕРіРѕ РїРѕС‚РѕРєР°. */
int get_token(void)
{

  register char *temp;

  token_type = 0; tok = 0;

  temp = token;
  *temp = '\0';

  /* РїСЂРѕРїСѓСЃРє РїСЂРѕР±РµР»РѕРІ, СЃРёРјРІРѕР»РѕРІ С‚Р°Р±СѓР»СЏС†РёРё Рё РїСѓСЃС‚РѕР№ СЃС‚СЂРѕРєРё */
  while(iswhite(*prog) && *prog) ++prog;

  if(*prog == '\r') {
    ++prog;
    ++prog;
    /* РїСЂРѕРїСѓСЃРє РїСЂРѕР±РµР»РѕРІ */
    while(iswhite(*prog) && *prog) ++prog;
  }

  if(*prog == '\0') { /* РєРѕРЅРµС† С„Р°Р№Р»Р° */
    *token = '\0';
    tok = FINISHED;
    return (token_type = DELIMITER);
  }

  if(strchr("{}", *prog)) { /* РѕРіСЂР°РЅРёС‡РµРЅРёРµ Р±Р»РѕРєР° */
    *temp = *prog;
    temp++;
    *temp = '\0';
    prog++;
    return (token_type = BLOCK);
  }

  /* РїРѕРёСЃРє РєРѕРјРјРµРЅС‚Р°СЂРёРµРІ */
  if(*prog == '/')
    if(*(prog+1) == '*') { /* СЌС‚Рѕ РєРѕРјРјРµРЅС‚Р°СЂРёР№ */
      prog += 2;
      do { /* РЅР°Р№С‚Рё РєРѕРЅРµС† РєРѕРјРјРµРЅС‚Р°СЂРёСЏ */
        while(*prog != '*') prog++;
        prog++;
      } while (*prog != '/');
      prog++;
    }

  if(strchr("!&lt;&gt;=", *prog)) { /* РІРѕР·РјРѕР¶РЅРѕ, СЌС‚Рѕ
                                       РѕРїРµСЂР°С‚РѕСЂ СЃСЂР°РІРЅРµРЅРёСЏ */
    switch(*prog) {
      case '=': if(*(prog+1) == '=') {
          prog++; prog++;
          *temp = EQ;
          temp++; *temp = EQ; temp++;
          *temp = '\0';
       }
       break;
      case '!': if(*(prog+1) == '=') {
          prog++; prog++;
          *temp = NE;
          temp++; *temp = NE; temp++;
          *temp = '\0';
       }
       break;
      case '&lt;': if(*(prog+1) == '=') {
          prog++; prog++;
          *temp = LE; temp++; *temp = LE;
       }
       else {
          prog++;
          *temp = LT;
       }
       temp++;
       *temp = '\0';
       break;
      case '&gt;': if(*(prog+1) == '=') {
          prog++; prog++;
          *temp = GE; temp++; *temp = GE;
       }
       else {
         prog++;
         *temp = GT;
       }
       temp++;
       *temp = '\0';
       break;
    }
    if(*token) return(token_type = DELIMITER);
  }

  if(strchr("+-*^/%=;(),'", *prog)){ /* СЂР°Р·РґРµР»РёС‚РµР»СЊ */
    *temp = *prog;
    prog++; /* РїСЂРѕРґРІРёР¶РµРЅРёРµ РЅР° СЃР»РµРґСѓСЋС‰СѓСЋ РїРѕР·РёС†РёСЋ */
    temp++;
    *temp = '\0';
    return (token_type = DELIMITER);
  }

  if(*prog=='"') { /* СЃС‚СЂРѕРєР° РІ РєР°РІС‹С‡РєР°С… */
    prog++;
    while(*prog != '"'&& *prog != '\r') *temp++ = *prog++;
    if(*prog == '\r') sntx_err(SYNTAX);
    prog++; *temp = '\0';
    return (token_type = STRING);
  }

  if(isdigit(*prog)) { /* С‡РёСЃР»Рѕ */
    while(!isdelim(*prog)) *temp++ = *prog++;
    *temp = '\0';
    return (token_type = NUMBER);
  }

  if(isalpha(*prog)) { /* РїРµСЂРµРјРµРЅРЅР°СЏ РёР»Рё РѕРїРµСЂР°С‚РѕСЂ */
    while(!isdelim(*prog)) *temp++ = *prog++;
    token_type = TEMP;
  }

  *temp = '\0';

  /* СЌС‚Р° СЃС‚СЂРѕРєР° СЏРІР»СЏРµС‚СЃСЏ РѕРїРµСЂР°С‚РѕСЂРѕРј РёР»Рё РїРµСЂРµРјРµРЅРЅРѕР№? */
  if(token_type==TEMP) {
    tok = look_up(token); /* РїСЂРµРѕР±СЂР°Р·РѕРІР°С‚СЊ РІРѕ РІРЅСѓС‚СЂРµРЅРµРµ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёРµ */
    if(tok) token_type = KEYWORD; /* СЌС‚Рѕ Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅРѕРµ СЃР»РѕРІРѕ */
    else token_type = IDENTIFIER;
  }
  return token_type;
}
</PRE>
<P class="tj">Р’ С„СѓРЅРєС†РёРё <KBD>get_token()</KBD> РёСЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ СЃР»РµРґСѓСЋС‰РёРµ РіР»РѕР±Р°Р»СЊРЅС‹Рµ РґР°РЅРЅС‹Рµ Рё РїРµСЂРµС‡РёСЃР»РёРјС‹Рµ С‚РёРїС‹:
<PRE>
extern char *prog;  /* С‚РµРєСѓС‰РµРµ РїРѕР»РѕР¶РµРЅРёРµ РІ РёСЃС…РѕРґРЅРѕРј С‚РµРєСЃС‚Рµ РїСЂРѕРіСЂР°РјРјС‹ */
extern char *p_buf;  /* СѓРєР°Р·Р°С‚РµР»СЊ РЅР° РЅР°С‡Р°Р»Рѕ Р±СѓС„РµСЂР° РїСЂРѕРіСЂР°РјРјС‹ */

extern char token[80]; /* СЃС‚СЂРѕРєРѕРІРѕРµ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёРµ Р»РµРєСЃРµРјС‹ */
extern char token_type; /* СЃРѕРґРµСЂР¶РёС‚ С‚РёРї Р»РµРєСЃРµРјС‹ */
extern char tok; /* РІРЅСѓС‚СЂРµРЅРЅРµРµ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёРµ Р»РµРєСЃРµРјС‹ */

enum tok_types {DELIMITER, IDENTIFIER, NUMBER, KEYWORD,
                TEMP, STRING, BLOCK};

enum tokens {ARG, CHAR, INT, IF, ELSE, FOR, DO, WHILE,
             SWITCH, RETURN, EOL, FINISHED, END};

enum double_ops {LT=1, LE, GT, GE, EQ, NE};

/* Р­С‚Рё РєРѕРЅСЃС‚Р°РЅС‚С‹ РёСЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ РґР»СЏ РІС‹Р·РѕРІР° С„СѓРЅРєС†РёРё sntx_err()
   РІ СЃР»СѓС‡Р°Рµ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕР№ РѕС€РёР±РєРё. РџСЂРё РЅРµРѕР±С…РѕРґРёРјРѕСЃС‚Рё СЃРїРёСЃРѕРє
   РєРѕРЅСЃС‚Р°РЅС‚ РјРѕР¶РЅРѕ СЂР°СЃС€РёСЂРёС‚СЊ.
   Р’РќРРњРђРќРР•: РєРѕРЅСЃС‚Р°РЅС‚Р° SYNTAX РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ С‚РѕРіРґР°, РєРѕРіРґР°
   РёРЅС‚РµСЂРїСЂРёС‚Р°С‚РѕСЂ РЅРµ РјРѕР¶РµС‚ РєРІР°Р»РёС„РёС†РёСЂРѕРІР°С‚СЊ РѕС€РёР±РєСѓ.
*/
enum error_msg
     {SYNTAX, UNBAL_PARENS, NO_EXP, EQUALS_EXPECTED,
      NOT_VAR, PARAM_ERR, SEMI_EXPECTED,
      UNBAL_BRACES, FUNC_UNDEF, TYPE_EXPECTED,
      NEST_FUNC, RET_NOCALL, PAREN_EXPECTED,
      WHILE_EXPECTED, QUOTE_EXPECTED, NOT_TEMP,
      TOO_MANY_LVARS, DIV_BY_ZERO};
</PRE>
<P class="tj">РЈРєР°Р·Р°С‚РµР»СЊ <KBD>prog</KBD> СѓРєР°Р·С‹РІР°РµС‚ РЅР° С‚РµРєСѓС‰СѓСЋ РїРѕР·РёС†РёСЋ РІ РёСЃС…РѕРґРЅРѕРј С‚РµРєСЃС‚Рµ РёРЅС‚РµСЂРїСЂРµС‚РёСЂСѓРµРјРѕР№ РїСЂРѕРіСЂР°РјРјС‹. РЈРєР°Р·Р°С‚РµР»СЊ <KBD>p_buf</KBD> РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂРѕРј РЅРµ РёР·РјРµРЅСЏРµС‚СЃСЏ; РѕРЅ РІСЃРµРіРґР° СѓРєР°Р·С‹РІР°РµС‚ РЅР° РЅР°С‡Р°Р»Рѕ РёРЅС‚РµСЂРїСЂРµС‚РёСЂСѓРµРјРѕР№ РїСЂРѕРіСЂР°РјРјС‹. Р¤СѓРЅРєС†РёСЏ <KBD>get_token()</KBD> РЅР°С‡РёРЅР°РµС‚ СЂР°Р±РѕС‚Сѓ СЃ СѓРґР°Р»РµРЅРёСЏ РїСЂРѕР±РµР»РѕРІ Рё СЃРёРјРІРѕР»РѕРІ РїРµСЂРµРІРѕРґР° СЃС‚СЂРѕРєРё. РўР°Рє РєР°Рє РЅРёРєР°РєР°СЏ Р»РµРєСЃРµРјР° СЏР·С‹РєР° РЎ (РєСЂРѕРјРµ СЃС‚СЂРѕРєРѕРІРѕР№ РєРѕРЅСЃС‚Р°РЅС‚С‹) РЅРµ СЃРѕРґРµСЂР¶РёС‚ РїСЂРѕР±РµР»РѕРІ, РёС… РЅСѓР¶РЅРѕ РїСЂРѕРїСѓСЃС‚РёС‚СЊ. Р¤СѓРЅРєС†РёСЏ <KBD>get_token()</KBD> РїСЂРѕРїСѓСЃРєР°РµС‚ С‚Р°РєР¶Рµ РєРѕРјРјРµРЅС‚Р°СЂРёРё (РІ Little РЎ РґРѕРїСѓСЃРєР°СЋС‚СЃСЏ С‚РѕР»СЊРєРѕ РєРѕРјРјРµРЅС‚Р°СЂРёРё РІРёРґР° /*...*/). РџРѕСЃР»Рµ СЌС‚РѕРіРѕ СЃС‚СЂРѕРєР°, РїСЂРµРґСЃС‚Р°РІР»СЏСЋС‰Р°СЏ РєР°Р¶РґСѓСЋ Р»РµРєСЃРµРјСѓ, РїРѕРјРµС‰Р°РµС‚СЃСЏ РІ <KBD>token</KBD> Рё РµРµ С‚РёРї (РѕРїСЂРµРґРµР»РµРЅРЅС‹Р№ РІ РїРµСЂРµС‡РёСЃР»РµРЅРёРё <KBD>tok_types</KBD>) Р·Р°РїРёСЃС‹РІР°РµС‚СЃСЏ РІ <KBD>token_type</KBD>. Р•СЃР»Рё Р»РµРєСЃРµРјР° РїСЂРµРґСЃС‚Р°РІР»СЏРµС‚ СЃРѕР±РѕР№ Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅРѕРµ СЃР»РѕРІРѕ, С‚Рѕ РµРіРѕ РІРЅСѓС‚СЂРµРЅРЅРµРµ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёРµ РїСЂРёСЃРІР°РёРІР°РµС‚СЃСЏ <KBD>tok</KBD> СЃ РїРѕРјРѕС‰СЊСЋ С„СѓРЅРєС†РёРё <KBD>look_up()</KBD> (РїСЂРёРІРµРґРµРЅР° РІ РїРѕР»РЅРѕРј Р»РёСЃС‚РёРЅРіРµ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р°С‚РѕСЂР°). РќРµРѕР±С…РѕРґРёРјРѕСЃС‚СЊ РІРЅСѓС‚СЂРµРЅРЅРµРіРѕ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёСЏ Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅС‹С… СЃР»РѕРІ Р±СѓРґРµС‚ РѕР±РѕСЃРЅРѕРІР°РЅР° РїРѕР·Р¶Рµ. Р¤СѓРЅРєС†РёСЏ <KBD>get_token()</KBD> РїСЂРµРѕР±СЂР°Р·СѓРµС‚ РґРІСѓС…СЃРёРјРІРѕР»СЊРЅС‹Рµ РѕРїРµСЂР°С‚РѕСЂС‹ СЃСЂР°РІРЅРµРЅРёСЏ РІ СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰РёРµ Р·РЅР°С‡РµРЅРёСЏ РїРµСЂРµС‡РёСЃР»РёРјРѕРіРѕ С‚РёРїР°. РўРµС…РЅРёС‡РµСЃРєРё РІ СЌС‚РѕРј РЅРµС‚ РєСЂР°Р№РЅРµР№ РЅРµРѕР±С…РѕРґРёРјРѕСЃС‚Рё, РѕРґРЅР°РєРѕ СЌС‚Рѕ СѓРїСЂРѕС‰Р°РµС‚ СЂРµР°Р»РёР·Р°С†РёСЋ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР°. Р, РЅР°РєРѕРЅРµС†, РµСЃР»Рё СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёР№ Р°РЅР°Р»РёР·Р°С‚РѕСЂ РЅР°С…РѕРґРёС‚ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєСѓСЋ РѕС€РёР±РєСѓ, С‚Рѕ РѕРЅ РІС‹Р·С‹РІР°РµС‚ С„СѓРЅРєС†РёСЋ <KBD>sntx_err()</KBD> СЃРѕ Р·РЅР°С‡РµРЅРёРµРј РїРµСЂРµС‡РёСЃР»РёРјРѕРіРѕ С‚РёРїР°, СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰РёРј С‚РёРїСѓ РЅР°Р№РґРµРЅРЅРѕР№ РѕС€РёР±РєРё. Р¤СѓРЅРєС†РёСЏ <KBD>sntx_err()</KBD> РІС‹Р·С‹РІР°РµС‚СЃСЏ С‚Р°РєР¶Рµ РґСЂСѓРіРёРјРё РїСЂРѕС†РµРґСѓСЂР°РјРё РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР° РєР°Р¶РґС‹Р№ СЂР°Р·, РєРѕРіРґР° РІСЃС‚СЂРµС‡Р°РµС‚СЃСЏ РѕС€РёР±РєР°. Р›РёСЃС‚РёРЅРі С„СѓРЅРєС†РёРё <KBD>sntx_err()</KBD> РёРјРµРµС‚ С‚Р°РєРѕР№ РІРёРґ:
<PRE>
/* Р’С‹РІРѕРґ СЃРѕРѕР±С‰РµРЅРёСЏ РѕР± РѕС€РёР±РєРµ. */
void sntx_err(int error)
{
  char *p, *temp;
  int linecount = 0;
  register int i;

  static char *e[]= {
    "СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєР°СЏ РѕС€РёР±РєР°",
    "РЅРµСЃР±Р°Р»Р°РЅСЃРёСЂРѕРІР°РЅРЅС‹Рµ СЃРєРѕР±РєРё",
    "РІС‹СЂР°Р¶РµРЅРёРµ РѕС‚СЃСѓС‚СЃС‚РІСѓРµС‚",
    "РѕР¶РёРґР°РµС‚СЃСЏ Р·РЅР°Рє СЂР°РІРµРЅСЃС‚РІР°",
    "РЅРµ РїРµСЂРµРјРµРЅРЅР°СЏ",
    "РѕС€РёР±РєР° РІ РїР°СЂР°РјРµС‚СЂРµ",
    "РѕР¶РёРґР°РµС‚СЃСЏ С‚РѕС‡РєР° СЃ Р·Р°РїСЏС‚РѕР№",
    "РЅРµСЃР±Р°Р»Р°РЅСЃРёСЂРѕРІР°РЅРЅС‹Рµ С„РёРіСѓСЂРЅС‹Рµ СЃРєРѕР±РєРё",
    "С„СѓРЅРєС†РёСЏ РЅРµ РѕРїСЂРµРґРµР»РµРЅР°",
    "РѕР¶РёРґР°РµС‚СЃСЏ СЃРїРµС†РёС„РёРєР°С‚РѕСЂ С‚РёРїР°",
    "СЃР»РёС€РєРѕРј РјРЅРѕРіРѕ РІР»РѕР¶РµРЅРЅС‹С… РІС‹Р·РѕРІРѕРІ С„СѓРЅРєС†РёР№",
    "РѕРїРµСЂР°С‚РѕСЂ return РІРЅРµ С„СѓРЅРєС†РёРё",
    "РѕР¶РёРґР°СЋС‚СЃСЏ СЃРєРѕР±РєРё",
    "РѕР¶РёРґР°РµС‚СЃСЏ while",
    "РѕР¶РёРґР°РµС‚СЃСЏ Р·Р°РєСЂС‹РІР°СЋС‰Р°СЏСЃСЏ РєР°РІС‹С‡РєР°",
    "РЅРµ СЃС‚СЂРѕРєР°",
    "СЃР»РёС€РєРѕРј РјРЅРѕРіРѕ Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…",
    "РґРµР»РµРЅРёРµ РЅР° РЅСѓР»СЊ"
  };
  printf("\n%s", e[error]);
  p = p_buf;
  while(p != prog) {  /* РїРѕРёСЃРє РЅРѕРјРµСЂР° СЃС‚СЂРѕРєРё СЃ РѕС€РёР±РєРѕР№ */
    p++;
    if(*p == '\r') {
      linecount++;
    }
  }
  printf(" in line %d\n", linecount);

  temp = p;
  for(i=0; i &lt; 20 && p &gt; p_buf && *p != '\n'; i++, p--);
  for(i=0; i &lt; 30 && p &lt;= temp; i++, p++) printf("%c", *p);

  longjmp(e_buf, 1); /* РІРѕР·РІСЂР°С‚ РІ Р±РµР·РѕРїР°СЃРЅСѓСЋ С‚РѕС‡РєСѓ */
}
</PRE>
<P class="tj">РћР±СЂР°С‚РёС‚Рµ РІРЅРёРјР°РЅРёРµ, <KBD>sntx_err()</KBD> РІС‹РІРѕРґРёС‚ РЅР° СЌРєСЂР°РЅ РЅРѕРјРµСЂ СЃС‚СЂРѕРєРё, РІ РєРѕС‚РѕСЂРѕР№ РѕР±РЅР°СЂСѓР¶РµРЅР° РѕС€РёР±РєР° (РёР»Рё РЅРѕРјРµСЂ СЃР»РµРґСѓСЋС‰РµР№ СЃС‚СЂРѕРєРё) Рё СЃР°РјСѓ СЃС‚СЂРѕРєСѓ. Р—Р°РєР°РЅС‡РёРІР°РµС‚СЃСЏ <KBD>sntx_err()</KBD> РІС‹Р·РѕРІРѕРј <KBD>longjmp()</KBD>. РЎРёРЅС‚Р°РєСЃРёС‡РµСЃРєР°СЏ РѕС€РёР±РєР° С‡Р°СЃС‚Рѕ РІСЃС‚СЂРµС‡Р°РµС‚СЃСЏ РІРЅСѓС‚СЂРё РіР»СѓР±РѕРєРѕ РІР»РѕР¶РµРЅРЅС‹С… РёР»Рё СЂРµРєСѓСЂСЃРёРІРЅС‹С… РїСЂРѕС†РµРґСѓСЂ, РїРѕСЌС‚РѕРјСѓ Р»СѓС‡С€РёРј СЃРїРѕСЃРѕР±РѕРј СЂРµР°РєС†РёРё РЅР° РѕС€РёР±РєСѓ СЏРІР»СЏРµС‚СЃСЏ РїРµСЂРµС…РѕРґ РІ РєР°РєРѕРµ-Р»РёР±Рѕ Р±РµР·РѕРїР°СЃРЅРѕРµ РјРµСЃС‚Рѕ. РљР°Рє Р°Р»СЊС‚РµСЂРЅР°С‚РёРІРЅС‹Р№ РїРѕРґС…РѕРґ, РјРѕР¶РЅРѕ Р±С‹Р»Рѕ Р±С‹ СѓСЃС‚Р°РЅРѕРІРёС‚СЊ РіР»РѕР±Р°Р»СЊРЅС‹Р№ С„Р»Р°Р¶РѕРє РѕС€РёР±РєРё Рё РїСЂРѕСЃРјРѕС‚СЂРµС‚СЊ РµРіРѕ Р·РЅР°С‡РµРЅРёРµ РІРѕ РІСЃРµС… С‚РѕС‡РєР°С… РєР°Р¶РґРѕР№ РїСЂРѕС†РµРґСѓСЂС‹, РѕРґРЅР°РєРѕ СЌС‚Рѕ СЃСѓС‰РµСЃС‚РІРµРЅРЅРѕ СѓСЃР»РѕР¶РЅРёР»Рѕ Р±С‹ РїСЂРСЂР°РјРјСѓ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР°.
<H2>Р РµРєСѓСЂСЃРёРІРЅС‹Р№ РЅРёСЃС…РѕРґСЏС‰РёР№ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёР№ Р°РЅР°Р»РёР·Р°С‚РѕСЂ Little C</H2>
<P class="tj">РќРёР¶Рµ РїСЂРёРІРµРґРµРЅ РїРѕР»РЅС‹Р№ С‚РµРєСЃС‚ СЂРµРєСѓСЂСЃРёРІРЅРѕРіРѕ РЅРёСЃС…РѕРґСЏС‰РµРіРѕ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р°С‚РѕСЂР° Little РЎ РІРјРµСЃС‚Рµ СЃРѕ РІСЃРµРјРё РµРіРѕ С„СѓРЅРєС†РёСЏРјРё, РіР»РѕР±Р°Р»СЊРЅС‹РјРё РґР°РЅРЅС‹РјРё Рё С‚РёРїР°РјРё РґР°РЅРЅС‹С…. РўРµРєСЃС‚ РїСЂРѕРіСЂР°РјРјС‹ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р°С‚РѕСЂР° РЅР°С…РѕРґРёС‚СЃСЏ РІ РѕРґРЅРѕРј С„Р°Р№Р»Рµ РїРѕРґ РёРјРµРЅРµРј PARSER.C. (РР·-Р·Р° Р±РѕР»СЊС€РѕРіРѕ РѕР±СЉРµРјР° РІСЃРµР№ РїСЂРѕРіСЂР°РјРјС‹ РёРЅС‚РµСЂРїСЂРёС‚Р°С‚РѕСЂР° Little РЎ РѕРЅР° СЃРѕРґРµСЂР¶РёС‚СЃСЏ РІ С‚СЂРµС… РѕС‚РґРµР»СЊРЅС‹С… С„Р°Р№Р»Р°С….)
<PRE>
/* Р РµРєСѓСЂСЃРёРІРЅС‹Р№ РЅРёСЃС…РѕРґСЏС‰РёР№ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёР№ Р°РЅР°Р»РёР·Р°С‚РѕСЂ
   С†РµР»РѕС‡РёСЃР»РµРЅРЅС‹С… РІС‹СЂР°Р¶РµРЅРёР№, СЃРѕРґРµСЂР¶Р°С‰РёС… РїРµСЂРµРјРµРЅРЅС‹Рµ
   Рё РІС‹Р·РѕРІС‹ С„СѓРЅРєС†РёР№.
*/
#include &lt;setjmp.h&gt;
#include &lt;math.h&gt;
#include &lt;ctype.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

#define NUM_FUNC        100
#define NUM_GLOBAL_VARS 100
#define NUM_LOCAL_VARS  200
#define ID_LEN          31
#define FUNC_CALLS      31
#define PROG_SIZE       10000
#define FOR_NEST        31

enum tok_types {DELIMITER, IDENTIFIER, NUMBER, KEYWORD,
                TEMP, STRING, BLOCK};

enum tokens {ARG, CHAR, INT, IF, ELSE, FOR, DO, WHILE,
             SWITCH, RETURN, EOL, FINISHED, END};

enum double_ops {LT=1, LE, GT, GE, EQ, NE};

/* Р­С‚Рё РєРѕРЅСЃС‚Р°РЅС‚С‹ РёСЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ РґР»СЏ РІС‹Р·РѕРІР° С„СѓРЅРєС†РёРё sntx_err()
   РІ СЃР»СѓС‡Р°Рµ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕР№ РѕС€РёР±РєРё. РџСЂРё РЅРµРѕР±С…РѕРґРёРјРѕСЃС‚Рё СЃРїРёСЃРѕРє
   РєРѕРЅСЃС‚Р°РЅС‚ РјРѕР¶РЅРѕ СЂР°СЃС€РёСЂРёС‚СЊ.
   Р’РќРРњРђРќРР•: РєРѕРЅСЃС‚Р°РЅС‚Р° SYNTAX РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ С‚РѕРіРґР°, РєРѕРіРґР°
   РёРЅС‚РµСЂРїСЂРёС‚Р°С‚РѕСЂ РЅРµ РјРѕР¶РµС‚ РєРІР°Р»РёС„РёС†РёСЂРѕРІР°С‚СЊ РѕС€РёР±РєСѓ.
*/
enum error_msg
     {SYNTAX, UNBAL_PARENS, NO_EXP, EQUALS_EXPECTED,
      NOT_VAR, PARAM_ERR, SEMI_EXPECTED,
      UNBAL_BRACES, FUNC_UNDEF, TYPE_EXPECTED,
      NEST_FUNC, RET_NOCALL, PAREN_EXPECTED,
      WHILE_EXPECTED, QUOTE_EXPECTED, NOT_TEMP,
      TOO_MANY_LVARS, DIV_BY_ZERO};

extern char *prog;  /* С‚РµРєСѓС‰РµРµ РїРѕР»РѕР¶РµРЅРёРµ РІ РёСЃС…РѕРґРЅРѕРј С‚РµРєСЃС‚Рµ РїСЂРѕРіСЂР°РјРјС‹ */
extern char *p_buf;  /* СѓРєР°Р·Р°С‚РµР»СЊ РЅР° РЅР°С‡Р°Р»Рѕ Р±СѓС„РµСЂР° РїСЂРѕРіСЂР°РјРјС‹ */
extern jmp_buf e_buf; /* СЃРѕРґРµСЂР¶РёС‚ РґР°РЅРЅС‹Рµ РґР»СЏ longjmp() */

/* РњР°СЃСЃРёРІ СЌС‚РѕР№ СЃС‚СЂСѓРєС‚СѓСЂС‹ СЃРѕРґРµСЂР¶РёС‚ РёРЅС„РѕСЂРјР°С†РёСЋ
   Рѕ РіР»РѕР±Р°Р»СЊРЅС‹Р№ РїРµСЂРµРјРµРЅРЅС‹С….
*/
extern struct var_type {
  char var_name[32];
  int v_type;
  int value;
}  global_vars[NUM_GLOBAL_VARS];

/* Р­С‚Рѕ СЃС‚РµРє РІС‹Р·РѕРІР° С„СѓРЅРєС†РёРё. */
extern struct func_type {
  char func_name[32];
  int ret_type; 
  char *loc;  /* Р°РґСЂРµСЃ РІС…РѕРґР° С„СѓРЅРєС†РёРё РІ С„Р°Р№Р»Рµ */
} func_stack[NUM_FUNC];

/* РўР°Р±Р»РёС†Р° Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅС‹С… СЃР»РѕРІ */
extern struct commands {
  char command[20];
  char tok;
} table[];

/* Р—РґРµСЃСЊ С„СѓРЅРєС†РёРё "СЃС‚Р°РЅРґР°СЂС‚РЅРѕР№ Р±РёР±Р»РёРѕС‚РµРєРё"
   РѕР±СЉСЏРІР»РµРЅС‹ С‚Р°РєРёРј РѕР±СЂР°Р·РѕРј, С‡С‚Рѕ РёС… РјРѕР¶РЅРѕ
   РїРѕРјРµСЃС‚РёС‚СЊ РІРѕ РІРЅСѓС‚СЂРµРЅСЋСЋ С‚Р°Р±Р»РёС†Сѓ С„СѓРЅРєС†РёРё.
*/
int call_getche(void), call_putch(void);
int call_puts(void), print(void), getnum(void);

struct intern_func_type {
  char *f_name; /* РёРјСЏ С„СѓРЅРєС†РёРё */
  int (*p)();   /* СѓРєР°Р·Р°С‚РµР»СЊ РЅР° С„СѓРЅРєС†РёСЋ */
} intern_func[] = {
  "getche", call_getche,
  "putch", call_putch,
  "puts", call_puts,
  "print", print,
  "getnum", getnum,
  "", 0  /* СЌС‚РѕС‚ СЃРїРёСЃРѕРє Р·Р°РєР°РЅС‡РёРІР°РµС‚СЃСЏ РЅСѓР»РµРј */
};

extern char token[80]; /* СЃС‚СЂРѕРєРѕРІРѕРµ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёРµ Р»РµРєСЃРµРјС‹ */
extern char token_type; /* СЃРѕРґРµСЂР¶РёС‚ С‚РёРї Р»РµРєСЃРµРјС‹ */
extern char tok; /* РІРЅСѓС‚СЂРµРЅРЅРµРµ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёРµ Р»РµРєСЃРµРјС‹ */

extern int ret_value; /* РІРѕР·РІСЂР°С‰Р°РµРјРѕРµ Р·РЅР°С‡РµРЅРёРµ С„СѓРЅРєС†РёРё */

void eval_exp0(int *value);
void eval_exp(int *value);
void eval_exp1(int *value);
void eval_exp2(int *value);
void eval_exp3(int *value);
void eval_exp4(int *value);
void eval_exp5(int *value);
void atom(int *value);
void sntx_err(int error), putback(void);
void assign_var(char *var_name, int value);
int isdelim(char c), look_up(char *s), iswhite(char c);
int find_var(char *s), get_token(void);
int internal_func(char *s);
int is_var(char *s);
char *find_func(char *name);
void call(void);

/* РўРѕС‡РєР° РІС…РѕРґР° РІ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёР№ Р°РЅР°Р»РёР·Р°С‚РѕСЂ РІС‹СЂР°Р¶РµРЅРёР№. */
void eval_exp(int *value)
{
  get_token();
  if(!*token) {
    sntx_err(NO_EXP);
    return;
  }
  if(*token == ';') {
    *value = 0; /* РїСѓСЃС‚РѕРµ РІС‹СЂР°Р¶РµРЅРёРµ */
    return;
  }
  eval_exp0(value);
  putback(); /* РІРѕР·РІСЂР°С‚ РїРѕСЃР»РµРґРЅРµР№ Р»РµРєСЃРµРјС‹ РІРѕ РІС…РѕРґРЅРѕР№ РїРѕС‚РѕРє */
}

/* РћР±СЂР°Р±РѕС‚РєР° РІС‹СЂР°Р¶РµРЅРёСЏ РІ РїСЂРёСЃРІР°РёРІР°РЅРёРё */
void eval_exp0(int *value)
{
  char temp[ID_LEN];  /* СЃРѕРґРµСЂР¶РёС‚ РёРјСЏ РїРµСЂРµРјРµРЅРЅРѕР№,
                         РєРѕС‚РѕСЂРѕР№ РїСЂРёСЃРІР°РёРІР°РµС‚СЃСЏ Р·РЅР°С‡РµРЅРёРµ */
  register int temp_tok;

  if(token_type == IDENTIFIER) {
    if(is_var(token)) {  /* РµСЃР»Рё СЌС‚Р° РїРµСЂРµРјРµРЅРЅР°СЏ,
       РїРѕСЃРјРѕС‚СЂРµС‚СЊ, РїСЂРёСЃРІР°РёРІР°РµС‚СЃСЏ Р»Рё РµР№ Р·РЅР°С‡РµРЅРёРµ */
      strcpy(temp, token);
      temp_tok = token_type;
      get_token();
      if(*token == '=') {  /* СЌС‚Рѕ РїСЂРёСЃРІР°РёРІР°РЅРёРµ */
        get_token();
        eval_exp0(value);  /* РІС‹С‡РёСЃР»РёС‚СЊ РїСЂРёСЃРІР°РµРјРѕРµ Р·РЅР°С‡РµРЅРёРµ */
        assign_var(temp, *value);  /* РїСЂРёСЃРІРѕРёС‚СЊ Р·РЅР°С‡РµРЅРёРµ */
        return;
      }
      else {  /* РЅРµ РїСЂРёСЃРІР°РёРІР°РЅРёРµ */
        putback();  /* РІРѕСЃС‚Р°РЅРѕРІР»РµРЅРёРµ Р»РµРєСЃРµРјС‹ */
        strcpy(token, temp);
        token_type = temp_tok;
      }
    }
  }
  eval_exp1(value);
}

/* РћР±СЂР°Р±РѕС‚РєР° РѕРїРµСЂР°С†РёР№ СЃСЂР°РІРЅРµРЅРёСЏ. */
void eval_exp1(int *value)
{
  int partial_value;
  register char op;
  char relops[7] = {
    LT, LE, GT, GE, EQ, NE, 0
  };

  eval_exp2(value);
  op = *token;
  if(strchr(relops, op)) {
    get_token();
    eval_exp2(&partial_value);
    switch(op) {  /* РІС‹С‡РёСЃР»РµРЅРёРµ СЂРµР·СѓР»СЊС‚Р°С‚Р° РѕРїРµСЂР°С†РёРё СЃСЂР°РІРЅРµРЅРёСЏ */
      case LT:
        *value = *value &lt; partial_value;
        break;
      case LE:
        *value = *value &lt;= partial_value;
        break;
      case GT:
        *value = *value &gt; partial_value;
        break;
      case GE:
        *value = *value &gt;= partial_value;
        break;
      case EQ:
        *value = *value == partial_value;
        break;
      case NE:
        *value = *value != partial_value;
        break;
    }
  }
}

/*  РЎСѓРјРјРёСЂРѕРІР°РЅРёРµ РёР»Рё РІС‹С‡РёСЃР»РµРЅРёРµ РґРІСѓС… С‚РµСЂРјРѕРІ. */
void eval_exp2(int *value)
{
  register char  op;
  int partial_value;

  eval_exp3(value);
  while((op = *token) == '+' || op == '-') {
    get_token();
    eval_exp3(&partial_value);
    switch(op) { /* СЃСѓРјРјРёСЂРѕРІР°РЅРёРµ РёР»Рё РІС‹С‡РёС‚Р°РЅРёРµ */
      case '-':
        *value = *value - partial_value;
        break;
      case '+':
        *value = *value + partial_value;
        break;
    }
  }
}

/* РЈРјРЅРѕР¶РµРЅРёРµ РёР»Рё РґРµР»РµРЅРёРµ РґРІСѓС… РјРЅРѕР¶РёС‚РµР»РµР№. */
void eval_exp3(int *value)
{
  register char  op;
  int partial_value, t;

  eval_exp4(value);
  while((op = *token) == '*' || op == '/' || op == '%') {
    get_token();
    eval_exp4(&partial_value);
    switch(op) { /* СѓРјРЅРѕР¶РµРЅРёРµ, РґРµР»РµРЅРёРµ РёР»Рё РґРµР»РµРЅРёРµ С†РµР»С‹С… */
      case '*':
        *value = *value * partial_value;
        break;
      case '/':
        if(partial_value == 0) sntx_err(DIV_BY_ZERO);       
        *value = (*value) / partial_value;
        break;
      case '%':
        t = (*value) / partial_value;
        *value = *value-(t * partial_value);
        break;
    }
  }
}

/* РЈРЅР°СЂРЅС‹Р№ + РёР»Рё -. */
void eval_exp4(int *value)
{
  register char  op;

  op = '\0';
  if(*token == '+' || *token == '-') {
    op = *token;
    get_token();
  }
  eval_exp5(value);
  if(op)
    if(op == '-') *value = -(*value);
}

/* РћР±СЂР°Р±РѕС‚РєР° РІС‹СЂР°Р¶РµРЅРёСЏ РІ СЃРєРѕР±РєР°С…. */
void eval_exp5(int *value)
{
  if((*token == '(')) {
    get_token();
    eval_exp0(value);   /* РІС‹С‡РёСЃР»РµРЅРёРµ РїРѕРґРІС‹СЂР°Р¶РµРЅРёСЏ */
    if(*token != ')') sntx_err(PAREN_EXPECTED);
    get_token();
  }
  else
    atom(value);
}

/* РџРѕР»СѓС‡РµРЅРёРµ Р·РЅР°С‡РµРЅРёСЏ С‡РёСЃР»Р°, РїРµСЂРµРјРµРЅРЅРѕР№ РёР»Рё С„СѓРЅРєС†РёРё. */
void atom(int *value)
{
  int i;

  switch(token_type) {
  case IDENTIFIER:
    i = internal_func(token);
    if(i!= -1) {  /* РІС‹Р·РѕРІ С„СѓРЅРєС†РёРё РёР· "СЃС‚Р°РЅРґР°СЂС‚РЅРѕР№ Р±РёР»РёРѕС‚РµРєРё" */
      *value = (*intern_func[i].p)();
    }
    else
    if(find_func(token)) { /* РІС‹Р·РѕРІ С„СѓРЅРєС†РёРё,
                              РѕРїСЂРµРґРµР»РµРЅРЅРѕР№ РїРѕР»СЊР·РѕРІР°С‚РµР»РµРј */
      call();
      *value = ret_value;
    }
    else *value = find_var(token); /* РїРѕР»СѓС‡РµРЅРёРµ Р·РЅР°С‡РµРЅРёСЏ РїРµСЂРµРјРµРЅРЅРѕР№ */
    get_token();
    return;
  case NUMBER: /* С‡РёСЃР»РѕРІР°СЏ РєРѕРЅСЃС‚Р°РЅС‚Р° */
    *value = atoi(token);
    get_token();
    return;
  case DELIMITER: /* СЌС‚Рѕ СЃРёРјРІРѕР»СЊРЅР°СЏ РєРѕРЅСЃС‚Р°РЅС‚Р°? */
    if(*token == '\'') {
      *value = *prog;
      prog++;
      if(*prog!='\'') sntx_err(QUOTE_EXPECTED);
      prog++;
      get_token();
      return ;
    }
    if(*token==')') return; /* РѕР±СЂР°Р±РѕС‚РєР° РїСѓСЃС‚РѕРіРѕ РІС‹СЂР°Р¶РµРЅРёСЏ */
    else sntx_err(SYNTAX); /* СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєР°СЏ РѕС€РёР±РєР° */
  default:
    sntx_err(SYNTAX); /* СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєР°СЏ РѕС€РёР±РєР° */
  }
}

/* Р’С‹РІРѕРґ СЃРѕРѕР±С‰РµРЅРёСЏ РѕР± РѕС€РёР±РєРµ. */
void sntx_err(int error)
{
  char *p, *temp;
  int linecount = 0;
  register int i;

  static char *e[]= {
    "СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєР°СЏ РѕС€РёР±РєР°",
    "РЅРµСЃР±Р°Р»Р°РЅСЃРёСЂРѕРІР°РЅРЅС‹Рµ СЃРєРѕР±РєРё",
    "РІС‹СЂР°Р¶РµРЅРёРµ РѕС‚СЃСѓС‚СЃС‚РІСѓРµС‚",
    "РѕР¶РёРґР°РµС‚СЃСЏ Р·РЅР°Рє СЂР°РІРµРЅСЃС‚РІР°",
    "РЅРµ РїРµСЂРµРјРµРЅРЅР°СЏ",
    "РѕС€РёР±РєР° РІ РїР°СЂР°РјРµС‚СЂРµ",
    "РѕР¶РёРґР°РµС‚СЃСЏ С‚РѕС‡РєР° СЃ Р·Р°РїСЏС‚РѕР№",
    "РЅРµСЃР±Р°Р»Р°РЅСЃРёСЂРѕРІР°РЅРЅС‹Рµ С„РёРіСѓСЂРЅС‹Рµ СЃРєРѕР±РєРё",
    "С„СѓРЅРєС†РёСЏ РЅРµ РѕРїСЂРµРґРµР»РµРЅР°",
    "РѕР¶РёРґР°РµС‚СЃСЏ СЃРїРµС†РёС„РёРєР°С‚РѕСЂ С‚РёРїР°",
    "СЃР»РёС€РєРѕРј РјРЅРѕРіРѕ РІР»РѕР¶РµРЅРЅС‹С… РІС‹Р·РѕРІРѕРІ С„СѓРЅРєС†РёР№",
    "РѕРїРµСЂР°С‚РѕСЂ return РІРЅРµ С„СѓРЅРєС†РёРё",
    "РѕР¶РёРґР°СЋС‚СЃСЏ СЃРєРѕР±РєРё",
    "РѕР¶РёРґР°РµС‚СЃСЏ while",
    "РѕР¶РёРґР°РµС‚СЃСЏ Р·Р°РєСЂС‹РІР°СЋС‰Р°СЏСЃСЏ РєР°РІС‹С‡РєР°",
    "РЅРµ СЃС‚СЂРѕРєР°",
    "СЃР»РёС€РєРѕРј РјРЅРѕРіРѕ Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…",
    "РґРµР»РµРЅРёРµ РЅР° РЅСѓР»СЊ"
  };
  printf("\n%s", e[error]);
  p = p_buf;
  while(p != prog) {  /* РїРѕРёСЃРє РЅРѕРјРµСЂР° СЃС‚СЂРѕРєРё СЃ РѕС€РёР±РєРѕР№ */
    p++;
    if(*p == '\r') {
      linecount++;
    }
  }
  printf(" in line %d\n", linecount);

  temp = p;
  for(i=0; i &lt; 20 && p &gt; p_buf && *p != '\n'; i++, p--);
  for(i=0; i &lt; 30 && p &lt;= temp; i++, p++) printf("%c", *p);

  longjmp(e_buf, 1); /* РІРѕР·РІСЂР°С‚ РІ Р±РµР·РѕРїР°СЃРЅСѓСЋ С‚РѕС‡РєСѓ */
}

/* РЎС‡РёС‚С‹РІР°РЅРёРµ Р»РµРєСЃРµРјС‹ РёР· РІС…РѕРґРЅРѕРіРѕ РїРѕС‚РѕРєР°. */
int get_token(void)
{

  register char *temp;

  token_type = 0; tok = 0;

  temp = token;
  *temp = '\0';

  /* РїСЂРѕРїСѓСЃРє РїСЂРѕР±РµР»РѕРІ, СЃРёРјРІРѕР»РѕРІ С‚Р°Р±СѓР»СЏС†РёРё Рё РїСѓСЃС‚РѕР№ СЃС‚СЂРѕРєРё */
  while(iswhite(*prog) && *prog) ++prog;

  if(*prog == '\r') {
    ++prog;
    ++prog;
    /* РїСЂРѕРїСѓСЃРє РїСЂРѕР±РµР»РѕРІ */
    while(iswhite(*prog) && *prog) ++prog;
  }

  if(*prog == '\0') { /* РєРѕРЅРµС† С„Р°Р№Р»Р° */
    *token = '\0';
    tok = FINISHED;
    return (token_type = DELIMITER);
  }

  if(strchr("{}", *prog)) { /* РѕРіСЂР°РЅРёС‡РµРЅРёРµ Р±Р»РѕРєР° */
    *temp = *prog;
    temp++;
    *temp = '\0';
    prog++;
    return (token_type = BLOCK);
  }

  /* РїРѕРёСЃРє РєРѕРјРјРµРЅС‚Р°СЂРёРµРІ */
  if(*prog == '/')
    if(*(prog+1) == '*') { /* СЌС‚Рѕ РєРѕРјРјРµРЅС‚Р°СЂРёР№ */
      prog += 2;
      do { /* РЅР°Р№С‚Рё РєРѕРЅРµС† РєРѕРјРјРµРЅС‚Р°СЂРёСЏ */
        while(*prog != '*') prog++;
        prog++;
      } while (*prog != '/');
      prog++;
    }

  if(strchr("!&lt;&gt;=", *prog)) { /* РІРѕР·РјРѕР¶РЅРѕ, СЌС‚Рѕ
                                       РѕРїРµСЂР°С‚РѕСЂ СЃСЂР°РІРЅРµРЅРёСЏ */
    switch(*prog) {
      case '=': if(*(prog+1) == '=') {
          prog++; prog++;
          *temp = EQ;
          temp++; *temp = EQ; temp++;
          *temp = '\0';
       }
       break;
      case '!': if(*(prog+1) == '=') {
          prog++; prog++;
          *temp = NE;
          temp++; *temp = NE; temp++;
          *temp = '\0';
       }
       break;
      case '&lt;': if(*(prog+1) == '=') {
          prog++; prog++;
          *temp = LE; temp++; *temp = LE;
       }
       else {
          prog++;
          *temp = LT;
       }
       temp++;
       *temp = '\0';
       break;
      case '&gt;': if(*(prog+1) == '=') {
          prog++; prog++;
          *temp = GE; temp++; *temp = GE;
       }
       else {
         prog++;
         *temp = GT;
       }
       temp++;
       *temp = '\0';
       break;
    }
    if(*token) return(token_type = DELIMITER);
  }

  if(strchr("+-*^/%=;(),'", *prog)){ /* СЂР°Р·РґРµР»РёС‚РµР»СЊ */
    *temp = *prog;
    prog++; /* РїСЂРѕРґРІРёР¶РµРЅРёРµ РЅР° СЃР»РµРґСѓСЋС‰СѓСЋ РїРѕР·РёС†РёСЋ */
    temp++;
    *temp = '\0';
    return (token_type = DELIMITER);
  }

  if(*prog=='"') { /* СЃС‚СЂРѕРєР° РІ РєР°РІС‹С‡РєР°С… */
    prog++;
    while(*prog != '"'&& *prog != '\r') *temp++ = *prog++;
    if(*prog == '\r') sntx_err(SYNTAX);
    prog++; *temp = '\0';
    return (token_type = STRING);
  }

  if(isdigit(*prog)) { /* С‡РёСЃР»Рѕ */
    while(!isdelim(*prog)) *temp++ = *prog++;
    *temp = '\0';
    return (token_type = NUMBER);
  }

  if(isalpha(*prog)) { /* РїРµСЂРµРјРµРЅРЅР°СЏ РёР»Рё РѕРїРµСЂР°С‚РѕСЂ */
    while(!isdelim(*prog)) *temp++ = *prog++;
    token_type = TEMP;
  }

  *temp = '\0';

  /* СЌС‚Р° СЃС‚СЂРѕРєР° СЏРІР»СЏРµС‚СЃСЏ РѕРїРµСЂР°С‚РѕСЂРѕРј РёР»Рё РїРµСЂРµРјРµРЅРЅРѕР№? */
  if(token_type==TEMP) {
    tok = look_up(token); /* РїСЂРµРѕР±СЂР°Р·РѕРІР°С‚СЊ РІРѕ РІРЅСѓС‚СЂРµРЅРµРµ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёРµ */
    if(tok) token_type = KEYWORD; /* СЌС‚Рѕ Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅРѕРµ СЃР»РѕРІРѕ */
    else token_type = IDENTIFIER;
  }
  return token_type;
}

/* Р’РѕР·РІСЂР°С‚ Р»РµРєСЃРµРјС‹ РІРѕ РІС…РѕРґРЅРѕР№ РїРѕС‚РѕРє. */
void putback(void)
{
  char *t;

  t = token;
  for(; *t; t++) prog--;
}

/* РџРѕРёСЃРє РІРЅСѓС‚СЂРµРЅРЅРµРіРѕ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёСЏ Р»РµРєСЃРµРјС‹
   РІ С‚Р°Р±Р»РёС†Рµ Р»РµРєСЃРµРј.
*/
int look_up(char *s)
{
  register int i;
  char *p;

  /* РїСЂРµРѕР±СЂР°Р·РѕРІР°РЅРёРµ РІ РЅРёР¶РЅРёР№ СЂРµРіРёСЃС‚СЂ */
  p = s;
  while(*p) { *p = tolower(*p); p++; }

  /* РµСЃС‚СЊ Р»Рё Р»РµРєСЃРµРјС‹ РІ С‚Р°Р±Р»РёС†Рµ? */
  for(i=0; *table[i].command; i++) {
    if(!strcmp(table[i].command, s)) return table[i].tok;
  }
  return 0; /* РЅРµР·РЅР°РєРѕРјС‹Р№ РѕРїРµСЂР°С‚РѕСЂ */
}

/* Р’РѕР·РІСЂР°С‰Р°РµС‚ РёРґРµРєСЃ С„СѓРЅРєС†РёРё РІРѕ РІРЅСѓС‚СЂРµРЅРЅРµР№
   Р±РёР±Р»РёРѕС‚РµРєРµ, РёР»Рё -1, РµСЃР»Рё РЅРµ РЅР°Р№РґРµРЅР°.
*/
int internal_func(char *s)
{
  int i;

  for(i=0; intern_func[i].f_name[0]; i++) {
    if(!strcmp(intern_func[i].f_name, s))  return i;
  }
  return -1;
}

/* Р’РѕР·РІСЂР°С‰Р°РµС‚ true (РРЎРўРРќРђ), РµСЃР»Рё СЃ - СЂР°Р·РґРµР»РёС‚РµР»СЊ. */
int isdelim(char c)
{
  if(strchr(" !;,+-&lt;&gt;'/*%^=()", c) || c == 9 ||
     c == '\r' || c == 0) return 1;
  return 0;
}

/* Р’РѕР·РІСЂР°С‰Р°РµС‚ 1, РµСЃР»Рё СЃ - РїСЂРѕР±РµР» РёР»Рё С‚Р°Р±СѓР»СЏС†РёСЏ. */
int iswhite(char c)
{
  if(c == ' ' || c == '\t') return 1;
  else return 0;
}
</PRE>
<P class="tj">Р¤СѓРЅРєС†РёРё, РЅР°С‡РёРЅР°СЋС‰РёРµСЃСЏ СЃ <KBD>eval_exp</KBD>, Рё С„СѓРЅРєС†РёСЏ <KBD>atom()</KBD> СЂРµР°Р»РёР·СѓСЋС‚ РїРѕСЂРѕР¶РґР°СЋС‰РёРµ РїСЂР°РІРёР»Р° РґР»СЏ РІС‹СЂР°Р¶РµРЅРёР№ РІ Little РЎ. Р”Р»СЏ РёС… РїСЂРѕРІРµСЂРєРё (Рё РІ РєР°С‡РµСЃС‚РІРµ СѓРїСЂР°Р¶РЅРµРЅРёСЏ) СЂРµРєРѕРјРµРЅРґСѓРµС‚СЃСЏ РјС‹СЃР»РµРЅРЅРѕ РІС‹РїРѕР»РЅРёС‚СЊ РґРµР№СЃС‚РІРёСЏ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р°С‚РѕСЂР° РґР»СЏ РєР°РєРѕРіРѕ-Р»РёР±Рѕ РїСЂРѕСЃС‚РѕРіРѕ РІС‹СЂР°Р¶РµРЅРёСЏ.
<P class="tj">Р¤СѓРЅРєС†РёСЏ <KBD>atom()</KBD> РЅР°С…РѕРґРёС‚ Р·РЅР°С‡РµРЅРёРµ С†РµР»РѕР№ РєРѕРЅСЃС‚Р°РЅС‚С‹ РёР»Рё РїРµСЂРµРјРµРЅРЅРѕР№, С„СѓРЅРєС†РёРё РёР»Рё СЃРёРјРІРѕР»СЊРЅРѕР№ РєРѕРЅСЃС‚Р°РЅС‚С‹. Р’ С‚РµРєСЃС‚Рµ РїСЂРѕРіСЂР°РјРјС‹ РјРѕРіСѓС‚ РїСЂРёСЃСѓС‚СЃС‚РІРѕРІР°С‚СЊ С„СѓРЅРєС†РёРё РґРІСѓС… РІРёРґРѕРІ: РѕРїСЂРµРґРµР»РµРЅРЅС‹Рµ РїРѕР»СЊР·РѕРІР°С‚РµР»РµРј Рё Р±РёР±Р»РёРѕС‚РµС‡РЅС‹Рµ. Р•СЃР»Рё РІСЃС‚СЂРµС‚РёР»Р°СЃСЊ РїРѕР»СЊР·РѕРІР°С‚РµР»СЊСЃРєР°СЏ С„СѓРЅРєС†РёСЏ, РµРµ С‚РµРєСЃС‚ РѕР±СЂР°Р±Р°С‚С‹РІР°РµС‚СЃСЏ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂРѕРј РґРѕ РїРѕР»СѓС‡РµРЅРёСЏ РІРѕР·РІСЂР°С‰Р°РµРјРѕРіРѕ Р·РЅР°С‡РµРЅРёСЏ Рё РІС‹С…РѕРґР° РёР· С„СѓРЅРєС†РёРё. (Р’С‹Р·РѕРІ С„СѓРЅРєС†РёРё СЂР°СЃСЃРјР°С‚СЂРёРІР°РµС‚СЃСЏ РІ СЃР»РµРґСѓСЋС‰РµРј СЂР°Р·РґРµР»Рµ.) Р•СЃР»Рё РІСЃС‚СЂРµС‚РёР»Р°СЃСЊ Р±РёР±Р»РёРѕС‚РµС‡РЅР°СЏ С„СѓРЅРєС†РёСЏ, С‚Рѕ СЃРЅР°С‡Р°Р»Р° РёС‰РµС‚СЃСЏ РµРµ Р°РґСЂРµСЃ СЃ РїРѕРјРѕС‰СЊСЋ С„СѓРЅРєС†РёРё <KBD>internal_func()</KBD>, Р° Р·Р°С‚РµРј СѓСЃС‚Р°РЅР°РІР»РёРІР°РµС‚СЃСЏ РґРѕСЃС‚СѓРї Рє РЅРµР№ СЃ РїРѕРјРѕС‰СЊСЋ РµРµ РёРЅС‚РµСЂС„РµР№СЃРЅРѕР№ С„СѓРЅРєС†РёРё. Р‘РёР±Р»РёРѕС‚РµС‡РЅС‹Рµ С„СѓРЅРєС†РёРё Рё Р°РґСЂРµСЃР° РёС… РёРЅС‚РµСЂС„РµР№СЃРЅС‹С… С„СѓРЅРєС†РёР№ СЃРѕРґРµСЂР¶Р°С‚СЃСЏ РІ РјР°СЃСЃРёРІРµ <KBD>intern_func</KBD>, РїСЂРёРІРµРґРµРЅРЅРѕРј РЅРёР¶Рµ:
<PRE>
/* Р—РґРµСЃСЊ С„СѓРЅРєС†РёРё "СЃС‚Р°РЅРґР°СЂС‚РЅРѕР№ Р±РёР±Р»РёРѕС‚РµРєРё"
   РѕР±СЉСЏРІР»РµРЅС‹ С‚Р°РєРёРј РѕР±СЂР°Р·РѕРј, С‡С‚Рѕ РёС… РјРѕР¶РЅРѕ
   РїРѕРјРµСЃС‚РёС‚СЊ РІРѕ РІРЅСѓС‚СЂРµРЅСЋСЋ С‚Р°Р±Р»РёС†Сѓ С„СѓРЅРєС†РёРё.
*/
int call_getche(void), call_putch(void);
int call_puts(void), print(void), getnum(void);

struct intern_func_type {
  char *f_name; /* РёРјСЏ С„СѓРЅРєС†РёРё */
  int (*p)();   /* СѓРєР°Р·Р°С‚РµР»СЊ РЅР° С„СѓРЅРєС†РёСЋ */
} intern_func[] = {
  "getche", call_getche,
  "putch", call_putch,
  "puts", call_puts,
  "print", print,
  "getnum", getnum,
  "", 0  /* СЌС‚РѕС‚ СЃРїРёСЃРѕРє Р·Р°РєР°РЅС‡РёРІР°РµС‚СЃСЏ РЅСѓР»РµРј */
};
</PRE>
<P class="tj">РўР°РєРёРј РѕР±СЂР°Р·РѕРј, РІ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂРµ Little РЎ РїСЂРµРґСѓСЃРјРѕС‚СЂРµРЅРѕ С‚РѕР»СЊРєРѕ РЅРµСЃРєРѕР»СЊРєРѕ С„СѓРЅРєС†РёР№ СЃС‚Р°РЅРґР°СЂС‚РЅРѕР№ Р±РёР±Р»РёРѕС‚РµРєРё, РѕРґРЅР°РєРѕ СЂР°СЃС€РёСЂРёС‚СЊ РёС… СЃРїРёСЃРѕРє РѕС‡РµРЅСЊ Р»РµРіРєРѕ. (РўРµРєСЃС‚С‹ РёРЅС‚РµСЂС„РµР№СЃРЅС‹С… С„СѓРЅРєС†РёР№ СЃРѕРґРµСЂР¶Р°С‚СЃСЏ РІ РѕС‚РґРµР»СЊРЅРѕРј С„Р°Р№Р»Рµ, СЂР°СЃСЃРјР°С‚СЂРёРІР°РµРјРѕРј РґР°Р»РµРµ РІ СЂР°Р·РґРµР»Рµ "Р‘РёР±Р»РёРѕС‚РµС‡РЅС‹Рµ С„СѓРЅРєС†РёРё Little РЎ".)
<P class="tj">РќРµРѕР±С…РѕРґРёРјРѕ СЃРґРµР»Р°С‚СЊ РµС‰Рµ РѕРґРЅРѕ Р·Р°РјРµС‡Р°РЅРёРµ Рѕ РїСЂРѕС†РµРґСѓСЂР°С… РІ С„Р°Р№Р»Рµ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р°С‚РѕСЂР°. Р”Р»СЏ РїСЂР°РІРёР»СЊРЅРѕРіРѕ Р°РЅР°Р»РёР·Р° РїСЂРѕРіСЂР°РјРјС‹ РЅР° РЎ РІ РЅРµРєРѕС‚РѕСЂС‹С… СЃР»СѓС‡Р°СЏС… С‚СЂРµР±СѓРµС‚СЃСЏ С‚Р°Рє РЅР°Р·С‹РІР°РµРјС‹Р№ <I>РїСЂРѕСЃРјРѕС‚СЂ РЅР° РѕРґРЅСѓ Р»РµРєСЃРµРјСѓ РІРїРµСЂРµРґ</I>. РќР°РїСЂРёРјРµСЂ, РІ РѕРїРµСЂР°С‚РѕСЂРµ
<PRE>alpha = count();</PRE>
<P class="t">РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂ СЃРјРѕР¶РµС‚ РѕРїСЂРµРґРµР»РёС‚СЊ, С‡С‚Рѕ <KBD>count</KBD> СЏРІР»СЏРµС‚СЃСЏ С„СѓРЅРєС†РёРµР№, Р° РЅРµ РїРµСЂРµРјРµРЅРЅРѕР№, С‚РѕР»СЊРєРѕ РµСЃР»Рё РїСЂРѕСЃРјРѕС‚СЂРёС‚ РЅР° РѕРґРЅСѓ Р»РµРєСЃРµРјСѓ РІРїРµСЂРµРґ, С‚Рѕ РµСЃС‚СЊ РїСЂРѕС‡С‚РµС‚ СЃР»РµРґСѓСЋС‰СѓСЋ СЃРєРѕР±РєСѓ. РћРґРЅР°РєРѕ, РµСЃР»Рё РѕРїРµСЂР°С‚РѕСЂ РІС‹РіР»СЏРґРёС‚ РєР°Рє
<PRE>alpha = count * 10;</PRE>
<P class="t">С‚Рѕ СЃР»РµРґСѓСЋС‰СѓСЋ РїРѕСЃР»Рµ <KBD>count</KBD> Р»РµРєСЃРµРјСѓ (РІ РґР°РЅРЅРѕРј СЃР»СѓС‡Р°Рµ *) РЅСѓР¶РЅРѕ РІРµСЂРЅСѓС‚СЊ РѕР±СЂР°С‚РЅРѕ РІРѕ РІС…РѕРґРЅРѕР№ РїРѕС‚РѕРє; РѕРЅР° Р±СѓРґРµС‚ РёСЃРїРѕР»СЊР·РѕРІР°РЅР° РїРѕР·РґРЅРµРµ. РџРѕСЌС‚РѕРјСѓ РІ С„Р°Р№Р» СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р°С‚РѕСЂР° РІС‹СЂР°Р¶РµРЅРёР№ РІРєР»СЋС‡РµРЅР° С„СѓРЅРєС†РёСЏ <KBD>putback()</KBD>, РєРѕС‚РѕСЂР°СЏ РІРѕР·РІСЂР°С‰Р°РµС‚ РїРѕСЃР»РµРґРЅСЋСЋ РїСЂРѕС‡РёС‚Р°РЅРЅСѓСЋ Р»РµРєСЃРµРјСѓ РѕР±СЂР°С‚РЅРѕ РІРѕ РІС…РѕРґРЅРѕР№ РїРѕС‚РѕРє.
<P class="tj">Р’ С„Р°Р№Р»Рµ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р°С‚РѕСЂР° РІС‹СЂР°Р¶РµРЅРёР№ РјРѕРіСѓС‚ РІСЃС‚СЂРµС‚РёС‚СЊСЃСЏ С„СѓРЅРєС†РёРё, РІ РґР°РЅРЅС‹Р№ РјРѕРјРµРЅС‚ РЅРµРїРѕРЅСЏС‚РЅС‹Рµ РґР»СЏ С‡РёС‚Р°С‚РµР»СЏ, РѕРґРЅР°РєРѕ РІ РїСЂРѕС†РµСЃСЃРµ РёР·СѓС‡РµРЅРёСЏ Little РЎ РёС… РЅР°Р·РЅР°С‡РµРЅРёРµ Рё РїСЂРёРЅС†РёРї СЂР°Р±РѕС‚С‹ СЃС‚Р°РЅСѓС‚ СЏСЃРЅРµРµ.
<P><IMG src="../work/sup.bmp" alt="----------">
<BLOCKQUOTE>
<P class="tj"><SUP><A href="#1" id="11">[1]</A></SUP>РўР°Рє РЅР°Р·С‹РІР°РµС‚СЃСЏ РїСЂРѕРіСЂР°РјРјР°, РІС‹РїРѕР»РЅСЏСЋС‰Р°СЏ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёР№ Р°РЅР°Р»РёР· РјРµС‚РѕРґРѕРј СЂРµРєСѓСЂСЃРёРІРЅРѕРіРѕ СЃРїСѓСЃРєР°.
</BLOCKQUOTE>


<p>






</p>
<small>
 
</small><HR><A href="../main.htm#29">РЎРѕРґРµСЂР¶Р°РЅРёРµ</A> | <A href="2904.htm">&lt;&lt;&lt;</A> | <A href="2906.htm">&gt;&gt;&gt;</A>
</BODY>
</html>
