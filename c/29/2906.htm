<!DOCTYPE HTML>
<html lang="ru">
<HEAD>
<TITLE>РРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂ Little C - cРїСЂР°РІРѕС‡РЅРёРє РїРѕ РЎРё</TITLE>
<meta charset="utf-8"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#29">РЎРѕРґРµСЂР¶Р°РЅРёРµ</A> | <A href="2905.htm">&lt;&lt;&lt;</A> | <A href="2907.htm">&gt;&gt;&gt;</A><HR>
<H1>РРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂ Little C</H1>








<P class="tj">Р’ СЌС‚РѕРј СЂР°Р·РґРµР»Рµ СЂР°СЃСЃРјР°С‚СЂРёРІР°РµС‚СЃСЏ РЅР°РёР±РѕР»РµРµ РІР°Р¶РЅР°СЏ С‡Р°СЃС‚СЊ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР° Little РЎ. РџРµСЂРµРґ С‚РµРј РєР°Рє РїСЂРёСЃС‚СѓРїРёС‚СЊ Рє РїРѕРґСЂРѕР±РЅРѕРјСѓ С‡С‚РµРЅРёСЋ С‚РµРєСЃС‚Р° РїСЂРѕРіСЂР°РјРјС‹ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР°, РЅСѓР¶РЅРѕ РїРѕРЅСЏС‚СЊ, РєР°Рє РІРѕРѕР±С‰Рµ СЂР°Р±РѕС‚Р°РµС‚ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂ. РџРѕРЅСЏС‚СЊ РїСЂРѕРіСЂР°РјРјСѓ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР° РІ РЅРµРєРѕС‚РѕСЂРѕРј СЃРјС‹СЃР»Рµ Р»РµРіС‡Рµ, С‡РµРј РїСЂРѕРіСЂР°РјРјСѓ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р°С‚РѕСЂР° РІС‹СЂР°Р¶РµРЅРёР№, РїРѕС‚РѕРјСѓ С‡С‚Рѕ СЂР°Р±РѕС‚Р° РїРѕ РёРЅС‚РµСЂРїСЂРµС‚Р°С†РёРё РїСЂРѕРіСЂР°РјРјС‹ РЅР° РЎ РјРѕР¶РµС‚ Р±С‹С‚СЊ РІС‹СЂР°Р¶РµРЅР° СЃР»РµРґСѓСЋС‰РёРј РїСЂРѕСЃС‚С‹Рј Р°Р»РіРѕСЂРёС‚РјРѕРј:
<PRE>
while (РµСЃС‚СЊ_Р»РµРєСЃРµРјС‹_РІРѕ_РІС…РѕРґРЅРѕРј_РїРѕС‚РѕРєРµ) {
       С‡РёС‚Р°С‚СЊ СЃР»РµРґСѓСЋС‰СѓСЋ Р»РµРєСЃРµРјСѓ;
       РІС‹РїРѕР»РЅРёС‚СЊ СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰РµРµ РґРµР№СЃС‚РІРёРµ;
}
</PRE>
<P class="tj">Р­С‚РѕС‚ Р°Р»РіРѕСЂРёС‚Рј РјРѕР¶РµС‚ РїРѕРєР°Р·Р°С‚СЊСЃСЏ РЅРµРІРµСЂРѕСЏС‚РЅРѕ РїСЂРѕСЃС‚С‹Рј РїРѕ СЃСЂР°РІРЅРµРЅРёСЋ СЃ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёРј Р°РЅР°Р»РёР·Р°С‚РѕСЂРѕРј РІС‹СЂР°Р¶РµРЅРёР№, РЅРѕ СЌС‚Рѕ РёРјРµРЅРЅРѕ С‚Рѕ, С‡С‚Рѕ РґРµР»Р°РµС‚ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂ. РќСѓР¶РЅРѕ С‚РѕР»СЊРєРѕ РёРјРµС‚СЊ РІ РІРёРґСѓ СЃР»РµРґСѓСЋС‰РµРµ: С€Р°Рі "РІС‹РїРѕР»РЅРёС‚СЊ СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰РµРµ РґРµР№СЃС‚РІРёРµ" РјРѕР¶РµС‚ СЃРѕРґРµСЂР¶Р°С‚СЊ С‡С‚РµРЅРёРµ РґРѕРїРѕР»РЅРёС‚РµР»СЊРЅС‹С… Р»РµРєСЃРµРј РёР· РІС…РѕРґРЅРѕРіРѕ РїРѕС‚РѕРєР°. Р”Р»СЏ Р»СѓС‡С€РµРіРѕ РїРѕРЅРёРјР°РЅРёСЏ СЌС‚РѕРіРѕ Р°Р»РіРѕСЂРёС‚РјР° РјС‹СЃР»РµРЅРЅРѕ РІС‹РїРѕР»РЅРёРј РёРЅС‚РµСЂРїСЂРµС‚Р°С†РёСЋ СЃР»РµРґСѓСЋС‰РµРіРѕ С„СЂР°РіРјРµРЅС‚Р° РїСЂРѕРіСЂР°РјРјС‹:
<PRE>
int a;

a = 10;
if(a &lt; 100) printf("%d", a);
</PRE>
<P class="tj">РЎРѕРіР»Р°СЃРЅРѕ Р°Р»РіРѕСЂРёС‚РјСѓ, РїСЂРѕС‡С‚РµРј РїРµСЂРІСѓСЋ Р»РµРєСЃРµРјСѓ <KBD>int</KBD>. Р­С‚Р° Р»РµРєСЃРµРјР° СѓРєР°Р·С‹РІР°РµС‚ РЅР° С‚Рѕ, С‡С‚Рѕ СЃР»РµРґСѓСЋС‰РёРј РґРµР№СЃС‚РІРёРµРј РґРѕР»Р¶РЅРѕ Р±С‹С‚СЊ С‡С‚РµРЅРёРµ СЃР»РµРґСѓСЋС‰РµР№ Р»РµРєСЃРµРјС‹ РґР»СЏ С‚РѕРіРѕ, С‡С‚РѕР±С‹ СѓР·РЅР°С‚СЊ, РєР°Рє РЅР°Р·С‹РІР°РµС‚СЃСЏ РїРµСЂРµРјРµРЅРЅР°СЏ (<KBD>a</KBD>), РєРѕС‚РѕСЂСѓСЋ РЅСѓР¶РЅРѕ РѕР±СЉСЏРІРёС‚СЊ Рё РґР»СЏ РєРѕС‚РѕСЂРѕР№ РЅСѓР¶РЅРѕ РІС‹РґРµР»РёС‚СЊ РѕР±Р»Р°СЃС‚СЊ РїР°РјСЏС‚Рё. РЎР»РµРґСѓСЋС‰Р°СЏ Р»РµРєСЃРµРјР° (С‚РѕС‡РєР° СЃ Р·Р°РїСЏС‚РѕР№) Р·Р°РєР°РЅС‡РёРІР°РµС‚ СЃС‚СЂРѕРєСѓ. РЎРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰РµРµ РґРµР№СЃС‚РІРёРµ вЂ” РїСЂРѕРёРіРЅРѕСЂРёСЂРѕРІР°С‚СЊ РµРµ. Р”Р°Р»РµРµ, РЅР°С‡РёРЅР°РµРј СЃР»РµРґСѓСЋС‰СѓСЋ РёС‚РµСЂР°С†РёСЋ Р°Р»РіРѕСЂРёС‚РјР° Рё СЃС‡РёС‚С‹РІР°РµРј СЃР»РµРґСѓСЋС‰СѓСЋ Р»РµРєСЃРµРјСѓ, СЌС‚Рѕ Р° РёР· РІС‚РѕСЂРѕР№ СЃС‚СЂРѕРєРё. РЎС‚СЂРѕРєР° РЅРµ РЅР°С‡РёРЅР°РµС‚СЃСЏ СЃ Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅРѕРіРѕ СЃР»РѕРІР°, СЃР»РµРґРѕРІР°С‚РµР»СЊРЅРѕ, СЌС‚Рѕ РІС‹СЂР°Р¶РµРЅРёРµ СЏР·С‹РєР° РЎ. РџРѕСЌС‚РѕРјСѓ СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰РёРј РґРµР№СЃС‚РІРёРµРј СЏРІР»СЏРµС‚СЃСЏ РїСЂРёРјРµРЅРµРЅРёРµ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р°С‚РѕСЂР° РІС‹СЂР°Р¶РµРЅРёР№ РґР»СЏ РІС‹С‡РёСЃР»РµРЅРёСЏ Р·РЅР°С‡РµРЅРёСЏ РІС‹СЂР°Р¶РµРЅРёСЏ. Р­С‚РѕС‚ РїСЂРѕС†РµСЃСЃ "СЃСЉРµРґР°РµС‚" РІСЃРµ Р»РµРєСЃРµРјС‹ РІРѕ РІС‚РѕСЂРѕР№ СЃС‚СЂРѕРєРµ. РќР°РєРѕРЅРµС†, С‡РёС‚Р°РµРј Р»РµРєСЃРµРјСѓ <KBD>if</KBD>. РћРЅР° СѓРєР°Р·С‹РІР°РµС‚ РЅР° С‚Рѕ, С‡С‚Рѕ РЅР°С‡РёРЅР°РµС‚СЃСЏ РѕРїРµСЂР°С‚РѕСЂ <KBD>if</KBD>. РЎРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰РµРµ РґРµР№СЃС‚РІРёРµ вЂ” РІС‹РїРѕР»РЅРёС‚СЊ РµРіРѕ. РђРЅР°Р»РѕРіРёС‡РЅС‹Р№ РїСЂРѕС†РµСЃСЃ РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ РјРЅРѕРіРѕРєСЂР°С‚РЅРѕ, РїРѕРєР° РЅРµ Р±СѓРґРµС‚ СЃС‡РёС‚Р°РЅР° РїРѕСЃР»РµРґРЅСЏСЏ Р»РµРєСЃРµРјР° РїСЂРѕРіСЂР°РјРјС‹. Р­С‚Рѕ РѕС‚РЅРѕСЃРёС‚СЃСЏ Рє Р»СЋР±РѕР№ РїСЂРѕРіСЂР°РјРјРµ РЅР° РЎ. РџРѕР»СЊР·СѓСЏСЃСЊ СЌС‚РёРј Р°Р»РіРѕСЂРёС‚РјРѕРј, РїСЂРёСЃС‚СѓРїРёРј Рє СЃРѕР·РґР°РЅРёСЋ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР°.
<H2>РџСЂРµРґРІР°СЂРёС‚РµР»СЊРЅС‹Р№ РїСЂРѕС…РѕРґ РёРЅС‚РµСЂРїСЂРёС‚Р°С‚РѕСЂР°</H2>
<P class="tj">РџРµСЂРµРґ С‚РµРј РєР°Рє РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂ РЅР°С‡РЅРµС‚ РІС‹РїРѕР»РЅСЏС‚СЊ РїСЂРѕРіСЂР°РјРјСѓ, РґРѕР»Р¶РЅС‹ Р±С‹С‚СЊ РІС‹РїРѕР»РЅРµРЅС‹ РЅРµРєРѕС‚РѕСЂС‹Рµ СЂСѓС‚РёРЅРЅС‹Рµ РїСЂРѕС†РµРґСѓСЂС‹. РҐР°СЂР°РєС‚РµСЂРЅРѕР№ С‡РµСЂС‚РѕР№ СЏР·С‹РєРѕРІ, РїСЂРµРґРЅР°Р·РЅР°С‡РµРЅРЅС‹С… Р±РѕР»СЊС€Рµ РґР»СЏ РёРЅС‚РµСЂРїСЂРµС‚Р°С†РёРё, С‡РµРј РґР»СЏ РєРѕРјРїРёР»СЏС†РёРё, СЏРІР»СЏРµС‚СЃСЏ С‚Рѕ, С‡С‚Рѕ РІС‹РїРѕР»РЅРµРЅРёРµ РїСЂРѕРіСЂР°РјРјС‹ РЅР°С‡РёРЅР°РµС‚СЃСЏ РІ РЅР°С‡Р°Р»Рµ С‚РµРєСЃС‚Р° РїСЂРѕРіСЂР°РјРјС‹ Рё Р·Р°РєР°РЅС‡РёРІР°РµС‚СЃСЏ РІ РµРіРѕ РєРѕРЅС†Рµ. РўР°Рє РІС‹РїРѕР»РЅСЏСЋС‚СЃСЏ РїСЂРѕРіСЂР°РјРјС‹, РЅР°РїРёСЃР°РЅРЅС‹Рµ РЅР° СЃС‚Р°СЂС‹С… РІРµСЂСЃРёСЏС… СЏР·С‹РєР° BASIC. Р­С‚Рѕ, РѕРґРЅР°РєРѕ, РЅРµ РѕС‚РЅРѕСЃРёС‚СЃСЏ Рє СЏР·С‹РєСѓ РЎ (РєР°Рє Рё Рє Р»СЋР±РѕРјСѓ РґСЂСѓРіРѕРјСѓ СЃС‚СЂСѓРєС‚СѓСЂРёСЂРѕРІР°РЅРЅРѕРјСѓ СЏР·С‹РєСѓ) РїРѕ С‚СЂРµРј РѕСЃРЅРѕРІРЅС‹Рј РїСЂРёС‡РёРЅР°Рј.
<P class="tj">Р’Рѕ-РїРµСЂРІС‹С…, РІСЃРµ РїСЂРѕРіСЂР°РјРјС‹ РЅР° РЎ РЅР°С‡РёРЅР°СЋС‚ РІС‹РїРѕР»РЅСЏС‚СЊСЃСЏ СЃ С„СѓРЅРєС†РёРё <KBD>main()</KBD>. Р’РѕРІСЃРµ РЅРµ РѕР±СЏР·Р°С‚РµР»СЊРЅРѕ, С‡С‚РѕР±С‹ СЌС‚Р° С„СѓРЅРєС†РёСЏ Р±С‹Р»Р° РїРµСЂРІРѕР№ РІ РїСЂРѕРіСЂР°РјРјРµ. РџРѕСЌС‚РѕРјСѓ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂ, С‡С‚РѕР±С‹ РЅР°С‡Р°С‚СЊ РІС‹РїРѕР»РЅРµРЅРёРµ СЃ РЅРµРµ, РґРѕР»Р¶РµРЅ РµС‰Рµ РґРѕ РЅР°С‡Р°Р»Р° РІС‹РїРѕР»РЅРµРЅРёСЏ РїСЂРѕРіСЂР°РјРјС‹ СѓР·РЅР°С‚СЊ, РіРґРµ РѕРЅР° РЅР°С…РѕРґРёС‚СЃСЏ. РЎР»РµРґРѕРІР°С‚РµР»СЊРЅРѕ, РґРѕР»Р¶РµРЅ Р±С‹С‚СЊ СЂРµР°Р»РёР·РѕРІР°РЅ РЅРµРєРѕС‚РѕСЂС‹Р№ РјРµС‚РѕРґ, РїРѕР·РІРѕР»СЏСЋС‰РёР№ РЅР°С‡Р°С‚СЊ РІС‹РїРѕР»РЅРµРЅРёРµ РїСЂРѕРіСЂР°РјРјС‹ СЃ РЅСѓР¶РЅРѕР№ С‚РѕС‡РєРё. (Р“Р»РѕР±Р°Р»СЊРЅС‹Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ С‚Р°РєР¶Рµ РјРѕРіСѓС‚ РїСЂРµРґС€РµСЃС‚РІРѕРІР°С‚СЊ С„СѓРЅРєС†РёРё <KBD>main()</KBD>, РїРѕСЌС‚РѕРјСѓ, РґР°Р¶Рµ РµСЃР»Рё РѕРЅР° СЏРІР»СЏРµС‚СЃСЏ РїРµСЂРІРѕР№ С„СѓРЅРєС†РёРµР№ РїСЂРѕРіСЂР°РјРјС‹, РІСЃРµ СЂР°РІРЅРѕ Рё РІ СЌС‚РѕРј СЃР»СѓС‡Р°Рµ РѕРЅР° РЅРµ РЅР°С‡РёРЅР°РµС‚СЃСЏ СЃ РїРµСЂРІРѕР№ СЃС‚СЂРѕРєРё.)
<P class="tj">Р’Рѕ-РІС‚РѕСЂС‹С…, РІСЃРµ РіР»РѕР±Р°С‚СЊРЅС‹Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ РґРѕР»Р¶РЅС‹ Р±С‹С‚СЊ РёР·РІРµСЃС‚РЅС‹ РїРµСЂРµРґ РЅР°С‡Р°Р»РѕРј РІС‹РїРѕР»РЅРµРЅРёСЏ <KBD>main()</KBD>. РћРїРµСЂР°С‚РѕСЂС‹ РѕР±СЉСЏРІР»РµРЅРёСЏ РіР»РѕР±Р°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… РЅРёРєРѕРіРґР° РЅРµ РІС‹РїРѕР»РЅСЏСЋС‚СЃСЏ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂРѕРј, РїРѕС‚РѕРјСѓ С‡С‚Рѕ РѕРЅРё РЅР°С…РѕРґСЏС‚СЃСЏ РІРЅРµ РІСЃРµС… С„СѓРЅРєС†РёР№. (Р’ СЏР·С‹РєРµ РЎ РІРµСЃСЊ РІС‹РїРѕР»РЅСЏСЋС‰РёР№СЃСЏ С‚РµРєСЃС‚ РїСЂРѕРіСЂР°РјРјС‹ РЅР°С…РѕРґРёС‚СЃСЏ <I>РІРЅСѓС‚СЂРё</I> С„СѓРЅРєС†РёР№, РїРѕСЌС‚РѕРјСѓ РїСЂРё РІС‹РїРѕР»РЅРµРЅРёРё РїСЂРѕРіСЂР°РјРјС‹ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂ Little РЎ РЅРёРєРѕРіРґР° РЅРµ РІС‹С…РѕРґРёС‚ Р·Р° РїСЂРµРґРµР»С‹ С„СѓРЅРєС†РёР№.)
<P class="tj">Р РЅР°РєРѕРЅРµС†, РІ-С‚СЂРµС‚СЊРёС…, РґР»СЏ РїРѕРІС‹С€РµРЅРёСЏ СЃРєРѕСЂРѕСЃС‚Рё РІС‹РїРѕР»РЅРµРЅРёСЏ РЅРµРѕР±С…РѕРґРёРјРѕ (РїСЂР°РІРґР°, РЅРµ РІСЃРµРіРґР°) Р·РЅР°С‚СЊ, РіРґРµ РІ РїСЂРѕРіСЂР°РјРјРµ СЂР°СЃРїРѕР»РѕР¶РµРЅР° РєР°Р¶РґР°СЏ С„СѓРЅРєС†РёСЏ; СЌС‚Рѕ РїРѕР·РІРѕР»РёС‚ РІС‹Р·С‹РІР°С‚СЊ РµРµ РєР°Рє РјРѕР¶РЅРѕ Р±С‹СЃС‚СЂРµРµ. Р•СЃР»Рё СЌС‚Рѕ СѓСЃР»РѕРІРёРµ РЅРµ Р±СѓРґРµС‚ РІС‹РїРѕР»РЅРµРЅРѕ, С‚Рѕ РїСЂРё РєР°Р¶РґРѕРј РІС‹Р·РѕРІРµ С„СѓРЅРєС†РёРё РїРѕРЅР°РґРѕР±РёС‚СЃСЏ РґР»РёС‚РµР»СЊРЅС‹Р№ РїРѕСЃР»РµРґРѕРІР°С‚РµР»СЊРЅС‹Р№ РїРѕРёСЃРє СЌС‚РѕР№ С„СѓРЅРєС†РёРё РІ С‚РµРєСЃС‚Рµ РїСЂРѕРіСЂР°РјРјС‹.
<P class="tj">Р­С‚Рё РїСЂРѕР±Р»РµРјС‹ СЂРµС€Р°СЋС‚СЃСЏ СЃ РїРѕРјРѕС‰СЊСЋ <I>РїСЂРµРґРІР°СЂРёС‚РµР»СЊРЅРѕРіРѕ РїСЂРѕС…РѕРґР° РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР°</I>. РџСЂРѕРіСЂР°РјРјР° РїСЂРµРґРІР°СЂРёС‚РµР»СЊРЅРѕРіРѕ РїСЂРѕС…РѕРґР° (РёРЅРѕРіРґР° РµРµ РЅР°Р·С‹РІР°СЋС‚ РїСЂРµРїСЂРѕС†РµСЃСЃРѕСЂРѕРј, РїСЂР°РІРґР° СЌС‚Рѕ РЅР°Р·РІР°РЅРёРµ РѕС‡РµРЅСЊ РЅРµСѓРґР°С‡РЅРѕРµ РёР·-Р·Р° С‚РѕРіРѕ, С‡С‚Рѕ СЃРѕРІРїР°РґР°РµС‚ СЃ РЅР°Р·РІР°РЅРёРµРј РїСЂРµРїСЂРѕС†РµСЃСЃРѕСЂР° РєРѕРјРїРёР»СЏС‚РѕСЂР° РЎ, С…РѕС‚СЏ РїСЂР°РєС‚РёС‡РµСЃРєРё РЅРёС‡РµРіРѕ РѕР±С‰РµРіРѕ СЃ РЅРёРј РЅРµ РёРјРµРµС‚) РїСЂРёРјРµРЅСЏРµС‚СЃСЏ РІРѕ РІСЃРµС… РєРѕРјРјРµСЂС‡РµСЃРєРёС… РєРѕРјРїРёР»СЏС‚РѕСЂР°С… РЅРµР·Р°РІРёСЃРёРјРѕ РѕС‚ РёРЅС‚РµСЂРїСЂРµС‚РёСЂСѓРµРјРѕРіРѕ СЏР·С‹РєР°. РџСЂРѕРіСЂР°РјРјР° РїСЂРµРґРІР°СЂРёС‚РµР»СЊРЅРѕРіРѕ РїСЂРѕС…РѕРґР° С‡РёС‚Р°РµС‚ РёСЃС…РѕРґРЅС‹Р№ С‚РµРєСЃС‚ РїСЂРѕРіСЂР°РјРјС‹ РїРµСЂРµРґ РµРµ РІС‹РїРѕР»РЅРµРЅРёРµРј Рё РґРµР»Р°РµС‚ РІСЃРµ, С‡С‚Рѕ РЅСѓР¶РЅРѕ СЃРґРµР»Р°С‚СЊ РґРѕ РІС‹РїРѕР»РЅРµРЅРёСЏ. Р’ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂРµ Little РЎ РѕРЅР° РІС‹РїРѕР»РЅСЏРµС‚ РґРІРµ РІР°Р¶РЅС‹Рµ Р·Р°РґР°С‡Рё: РІРѕ-РїРµСЂРІС‹С…, РЅР°С…РѕРґРёС‚ Рё Р·Р°РїРѕРјРёРЅР°РµС‚ РїРѕР»РѕР¶РµРЅРёРµ РІСЃРµС… РїРѕР»СЊР·РѕРІР°С‚РµР»СЊСЃРєРёС… С„СѓРЅРєС†РёР№, РІРєР»СЋС‡Р°СЏ <KBD>main()</KBD>, Рё РІРѕ-РІС‚РѕСЂС‹С…, РЅР°С…РѕРґРёС‚ РІСЃРµ РіР»РѕР±Р°Р»СЊРЅС‹Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ Рё РѕРїСЂРµРґРµР»СЏРµС‚ РѕР±Р»Р°СЃС‚СЊ РёС… РІРёРґРёРјРѕСЃС‚Рё. Р’ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂРµ Little РЎ РїСЂРµРґРІР°СЂРёС‚РµР»СЊРЅС‹Р№ РїСЂРѕС…РѕРґ РІС‹РїРѕР»РЅСЏРµС‚ С„СѓРЅРєС†РёСЏ <KBD>prescan()</KBD>:
<PRE>
/* РќР°Р№С‚Рё Р°РґСЂРµСЃР° РІСЃРµС… С„СѓРЅРєС†РёР№ РІ РїСЂРѕРіСЂР°РјРјРµ
   Рё Р·Р°РїРѕРјРЅРёС‚СЊ РіР»РѕР±Р°Р»СЊРЅС‹Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ. */
void prescan(void)
{
  char *p, *tp;
  char temp[32];
  int datatype; 
  int brace = 0;  /* Р•СЃР»Рё brace = 0, С‚Рѕ С‚РµРєСѓС‰Р°СЏ
                     РїРѕР·РёС†РёСЏ СѓРєР°Р·Р°С‚РµР»СЏ РїСЂРѕРіСЂР°РјРјС‹ РЅР°С…РѕРґРёС‚СЃСЏ
                     РІ РЅРµ РєР°РєРѕР№-Р»РёР±Рѕ С„СѓРЅРєС†РёРё. */

  p = prog;
  func_index = 0;
  do {
    while(brace) {  /* РѕР±С…РѕРґ РєРѕРґР° С„СѓРЅРєС†РёРё */
      get_token();
      if(*token == '{') brace++;
      if(*token == '}') brace--;
    }

    tp = prog; /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ С‚РµРєСѓС‰РµР№ РїРѕР·РёС†РёРё */
    get_token();
    /* С‚РёРї РіР»РѕР±Р°Р»СЊРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№ РёР»Рё РІРѕР·РІСЂР°С‰Р°РµРјРѕРіРѕ Р·РЅР°С‡РµРЅРёСЏ С„СѓРЅРєС†РёРё */
    if(tok==CHAR || tok==INT) { 
      datatype = tok; /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ С‚РёРїР° РґР°РЅРЅС‹С… */
      get_token();
      if(token_type == IDENTIFIER) {
        strcpy(temp, token);
        get_token();
        if(*token != '(') { /* СЌС‚Рѕ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ РіР»РѕР±Р°Р»СЊРЅР°СЏ РїРµСЂРµРјРµРЅРЅР°СЏ */
          prog = tp; /* РІРѕР·РІСЂР°С‚ РІ РЅР°С‡Р°Р»Рѕ РѕР±СЉСЏРІР»РµРЅРёСЏ */
          decl_global();
        }
        else if(*token == '(') {  /* СЌС‚Рѕ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ С„СѓРЅРєС†РёСЏ */
          func_table[func_index].loc = prog;
          func_table[func_index].ret_type = datatype;
          strcpy(func_table[func_index].func_name, temp);
          func_index++;
          while(*prog != ')') prog++;
          prog++;
          /* СЃРµР№С‡Р°СЃ prog СѓРєР°Р·С‹РІР°РµС‚ РЅР° РѕС‚РєСЂС‹РІР°СЋС‰СѓСЋСЃСЏ
             С„РёРіСѓСЂРЅСѓСЋ СЃРєРѕР±РєСѓ С„СѓРЅРєС†РёРё */
        }
        else putback();
      }
    }
    else if(*token == '{') brace++;
  } while(tok != FINISHED);
  prog = p;
}
</PRE>
<P class="tj">Р¤СѓРЅРєС†РёСЏ <KBD>prescan()</KBD> СЂР°Р±РѕС‚Р°РµС‚ СЃР»РµРґСѓСЋС‰РёРј РѕР±СЂР°Р·РѕРј. РљР°Р¶РґС‹Р№ СЂР°Р·, РєРѕРіРґР° РІСЃС‚СЂРµС‡Р°РµС‚СЃСЏ РѕС‚РєСЂС‹РІР°СЋС‰Р°СЏСЃСЏ С„РёРіСѓСЂРЅР°СЏ СЃРєРѕР±РєР°, РїРµСЂРµРјРµРЅРЅР°СЏ <KBD>brace</KBD> СѓРІРµР»РёС‡РёРІР°РµС‚СЃСЏ РЅР° 1, Р° РєРѕРіРґР° Р·Р°РєСЂС‹РІР°СЋС‰Р°СЏСЃСЏ вЂ” СѓРјРµРЅСЊС€Р°РµС‚СЃСЏ РЅР° 1. РЎР»РµРґРѕРІР°С‚РµР»СЊРЅРѕ, РµСЃР»Рё <KBD>brace</KBD> Р±РѕР»СЊС€Рµ РЅСѓР»СЏ, С‚Рѕ С‚РµРєСѓС‰Р°СЏ Р»РµРєСЃРµРјР° РЅР°С…РѕРґРёС‚СЃСЏ РІРЅСѓС‚СЂРё С„СѓРЅРєС†РёРё<SUP><A href="#11" id="1">[1]</A></SUP>. РџРѕСЌС‚РѕРјСѓ РѕР±СЉСЏРІР»РµРЅРёРµ РїРµСЂРµРјРµРЅРЅРѕР№ СЃС‡РёС‚Р°РµС‚СЃСЏ РіР»РѕР±Р°Р»СЊРЅС‹Рј, РµСЃР»Рё РѕРЅРѕ РІСЃС‚СЂРµС‚РёР»РѕСЃСЊ, РєРѕРіРґР° <KBD>brace</KBD> СЂР°РІРЅРѕ РЅСѓР»СЋ. РђРЅР°Р»РѕРіРёС‡РЅРѕ, РµСЃР»Рё РїСЂРё <KBD>brace</KBD>, СЂР°РІРЅРѕРј РЅСѓР»СЋ, РІСЃС‚СЂРµС‚РёР»РѕСЃСЊ РёРјСЏ С„СѓРЅРєС†РёРё, Р·РЅР°С‡РёС‚, РѕРЅРѕ РїСЂРёРЅР°РґР»РµР¶РёС‚ РѕРїСЂРµРґРµР»РµРЅРёСЋ С„СѓРЅРєС†РёРё (РІ Little РЎ РЅРµС‚ РїСЂРѕС‚РѕС‚РёРїРѕРІ С„СѓРЅРєС†РёР№).
<P class="tj">Р¤СѓРЅРєС†РёСЏ <KBD>decl_global()</KBD> Р·Р°РїРѕРјРёРЅР°РµС‚ РіР»РѕР±Р°Р»СЊРЅС‹Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ РІ С‚Р°Р±Р»РёС†Рµ <KBD>global_vars</KBD>:
<PRE>
/* РњР°СЃСЃРёРІ СЌС‚РёС… СЃС‚СЂСѓРєС‚СѓСЂ СЃРѕРґРµСЂР¶РёС‚ РёРЅС„РѕСЂРјР°С†РёСЋ
   Рѕ РіР»РѕР±Р°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С….
*/
struct var_type {
  char var_name[ID_LEN];
  int v_type;
  int value;
}  global_vars[NUM_GLOBAL_VARS];

int gvar_index; /* РёРЅРґРµРєСЃ РІ С‚Р°Р±Р»РёС†Рµ РіР»РѕР±Р°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */

/* РћР±СЉСЏРІР»РµРЅРёРµ РіР»РѕР±Р°Р»СЊРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№. */
void decl_global(void)
{
  int vartype;

  get_token();  /* РѕРїСЂРµРґРµР»РµРЅРёРµ С‚РёРїР° */

  vartype = tok; /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ С‚РёРїР° РїРµСЂРµРјРµРЅРЅРѕР№ */

  do { /* РѕР±СЂР°Р±РѕС‚РєР° СЃРїРёСЃРєР° */
    global_vars[gvar_index].v_type = vartype;
    global_vars[gvar_index].value = 0;  /* РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РЅСѓР»РµРј */
    get_token();  /* РѕРїСЂРµРґРµР»РµРЅРёРµ РёРјРµРЅРё */
    strcpy(global_vars[gvar_index].var_name, token);
    get_token();
    gvar_index++;
  } while(*token == ',');
  if(*token != ';') sntx_err(SEMI_EXPECTED);
}
</PRE>
<P class="tj">РџРµСЂРµРјРµРЅРЅР°СЏ С†РµР»РѕРіРѕ С‚РёРїР° <KBD>gvar_index</KBD> СЃРѕРґРµСЂР¶РёС‚ РёРЅРґРµРєСЃ РїРµСЂРІРѕРіРѕ СЃРІРѕР±РѕРґРЅРѕРіРѕ СЌР»РµРјРµРЅС‚Р° РјР°СЃСЃРёРІР° <KBD>global_vars</KBD>.
<P class="tj">РђРґСЂРµСЃ РєР°Р¶РґРѕР№ С„СѓРЅРєС†РёРё, РѕРїСЂРµРґРµР»РµРЅРЅРѕР№ РїРѕР»СЊР·РѕРІР°С‚РµР»РµРј, РїРѕРјРµС‰Р°РµС‚СЃСЏ РІ РјР°СЃСЃРёРІ <KBD>func_table</KBD>:
<PRE>
struct func_type {
  char func_name[ID_LEN];
  int ret_type; 
  char *loc;  /* Р°РґСЂРµСЃ С‚РѕС‡РєРё РІС…РѕРґР° РІ С„Р°Р№Р» */
} func_table[NUM_FUNC];

int func_index; /* РёРЅРґРµРєСЃ РІ С‚Р°Р±Р»РёС†Рµ С„СѓРЅРєС†РёР№ */
</PRE>
<P class="tj">РџРµСЂРµРјРµРЅРЅР°СЏ <KBD>func_index</KBD> СЃРѕРґРµСЂР¶РёС‚ РёРЅРґРµРєСЃ РїРµСЂРІРѕР№ СЃРІРѕР±РѕРґРЅРѕР№ РїРѕР·РёС†РёРё РІ С‚Р°Р±Р»РёС†Рµ <KBD>func_table</KBD>.
<H2>Р¤СѓРЅРєС†РёСЏ main()</H2>
<P class="tj">Р“Р»Р°РІРЅР°СЏ С„СѓРЅРєС†РёСЏ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР° Little РЎ Р·Р°РіСЂСѓР¶Р°РµС‚ РёСЃС…РѕРґРЅС‹Р№ С‚РµРєСЃС‚ РїСЂРѕРіСЂР°РјРјС‹, РёРЅРёС†РёР°Р»РёР·РёСЂСѓРµС‚ РіР»РѕР±Р°Р»СЊРЅС‹Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ, РіРѕС‚РѕРІРёС‚ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂ Рє РІС‹Р·РѕРІСѓ <KBD>main()</KBD> Рё РІС‹Р·С‹РІР°РµС‚ С„СѓРЅРєС†РёСЋ <KBD>call()</KBD>, РєРѕС‚РѕСЂР°СЏ РЅР°С‡РёРЅР°РµС‚ РІС‹РїРѕР»РЅРµРЅРёРµ РїСЂРѕРіСЂР°РјРјС‹. Р Р°Р±РѕС‚Р° <KBD>call()</KBD> Р±СѓРґРµС‚ СЂР°СЃСЃРјРѕС‚СЂРµРЅР° РґР°Р»РµРµ РІ СЌС‚РѕР№ РіР»Р°РІРµ.
<PRE>
int main(int argc, char *argv[])
{
  if(argc != 2) {
    printf("РџСЂРёРјРµРЅРµРЅРёРµ: littlec &lt;РёРјСЏ_С„Р°Р№Р»Р°&gt;\n");
    exit(1);
  }

  /* РІС‹РґРµР»РµРЅРёРµ РїР°РјСЏС‚Рё РґР»СЏ РїСЂРѕРіСЂР°РјРјС‹ */
  if((p_buf = (char *) malloc(PROG_SIZE))==NULL) {
    printf("Р’С‹РґРµР»РёС‚СЊ РїР°РјСЏС‚СЊ РЅРµ СѓРґР°Р»РѕСЃСЊ");
    exit(1);
  }

  /* Р·Р°РіСЂСѓР·РєР° РїСЂРѕРіСЂР°РјРјС‹ РґР»СЏ РІС‹РїРѕР»РЅРµРЅРёСЏ */
  if(!load_program(p_buf, argv[1])) exit(1);
  if(setjmp(e_buf)) exit(1); /* РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ Р±СѓС„РµСЂР° long jump */

  gvar_index = 0;  /* РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РёРЅРґРµРєСЃР° РіР»РѕР±Р°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */

  /* СѓСЃС‚Р°РЅРѕРІРєР° СѓРєР°Р·Р°С‚РµР»СЏ РїСЂРѕРіСЂР°РјРјС‹ РЅР° РЅР°С‡Р°Р»Рѕ Р±СѓС„РµСЂР° РїСЂРѕРіСЂР°РјРјС‹ */
  prog = p_buf;
  prescan(); /* РѕРїСЂРµРґРµР»РµРЅРёРµ Р°РґСЂРµСЃРѕРІ РІСЃРµС… С„СѓРЅРєС†РёР№
                Рё РіР»РѕР±Р°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… РїСЂРѕРіСЂР°РјРјС‹ */

  lvartos = 0;     /* РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РёРЅРґРµРєСЃР° СЃС‚РµРєР° Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */
  functos = 0;     /* РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РёРЅРґРµРєСЃР° СЃС‚РµРєР° РІС‹Р·РѕРІР° (CALL) */

  /* РїРµСЂРІРѕР№ РІС‹Р·С‹РІР°РµС‚СЃСЏ main() */
  prog = find_func("main"); /* РїРѕРёСЃРє С‚РѕС‡РєРё РІС…РѕРґР° РїСЂРѕРіСЂР°РјРјС‹ */

  if(!prog) { /* С„СѓРЅРєС†РёСЏ main() РЅРµРїСЂР°РІРёР»СЊРЅР° РёР»Рё РѕС‚СЃСѓС‚СЃС‚РІСѓРµС‚ */
    printf("main() РЅРµ РЅР°Р№РґРµРЅР°.\n");
    exit(1);
  }

  prog--; /* РІРѕР·РІСЂР°С‚ Рє РѕС‚РєСЂС‹РІР°СЋС‰РµР№СЃСЏ СЃРєРѕР±РєРµ ( */
  strcpy(token, "main");
  call(); /* РЅР°С‡Р°Р»Рѕ РёРЅС‚РµСЂРїСЂРёС‚Р°С†РёРё main() */

  return 0;
}
</PRE>
<H2>Р¤СѓРЅРєС†РёСЏ interp_block()</H2>
<P class="tj">Р¤СѓРЅРєС†РёСЏ <KBD>interp_block()</KBD> СЏРІР»СЏРµС‚СЃСЏ СЃРµСЂРґС†РµРј РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР°. Р’ СЌС‚РѕР№ С„СѓРЅРєС†РёРё РїСЂРёРЅРёРјР°РµС‚СЃСЏ СЂРµС€РµРЅРёРµ Рѕ С‚РѕРј, РєР°РєРѕРµ РґРµР№СЃС‚РІРёРµ РІС‹РїРѕР»РЅРёС‚СЊ РїСЂРё РїСЂРѕС‡С‚РµРЅРёРё РѕС‡РµСЂРµРґРЅРѕР№ Р»РµРєСЃРµРјС‹ РёР· РІС…РѕРґРЅРѕРіРѕ РїРѕС‚РѕРєР°. Р¤СѓРЅРєС†РёСЏ РёРЅС‚РµСЂРїСЂРµС‚РёСЂСѓРµС‚ РѕРґРёРЅ Р±Р»РѕРє РїСЂРѕРіСЂР°РјРјС‹, РїРѕСЃР»Рµ С‡РµРіРѕ РІРѕР·РІСЂР°С‰Р°РµС‚ СѓРїСЂР°РІР»РµРЅРёРµ. Р•СЃР»Рё Р±Р»РѕРє СЃРѕСЃС‚РѕРёС‚ РёР· РµРґРёРЅСЃС‚РІРµРЅРЅРѕРіРѕ РѕРїРµСЂР°С‚РѕСЂР°, СЌС‚РѕС‚ РѕРїРµСЂР°С‚РѕСЂ РёРЅС‚РµСЂРїСЂРµС‚РёСЂСѓРµС‚СЃСЏ Рё С„СѓРЅРєС†РёСЏ РІРѕР·РІСЂР°С‰Р°РµС‚ СѓРїСЂР°РІР»РµРЅРёРµ РІС‹Р·РІР°РІС€РµР№ РїСЂРѕРіСЂР°РјРјРµ. РџРѕ СѓРјРѕР»С‡Р°РЅРёСЋ <KBD>interp_block()</KBD> РёРЅС‚РµСЂРїСЂРµС‚РёСЂСѓРµС‚ РѕРґРёРЅ РѕРїРµСЂР°С‚РѕСЂ, РїРѕСЃР»Рµ С‡РµРіРѕ РІРѕР·РІСЂР°С‰Р°РµС‚ СѓРїСЂР°РІР»РµРЅРёРµ РІС‹Р·РІР°РІС€РµР№ РїСЂРѕРіСЂР°РјРјРµ. РћРґРЅР°РєРѕ, РµСЃР»Рё РІСЃС‚СЂРµС‡Р°РµС‚СЃСЏ РѕС‚РєСЂС‹РІР°СЋС‰Р°СЏСЃСЏ С„РёРіСѓСЂРЅР°СЏ СЃРєРѕР±РєР°, С‚Рѕ С„Р»Р°Р¶РѕРє <KBD>block</KBD> СѓСЃС‚Р°РЅР°РІР»РёРІР°РµС‚СЃСЏ РІ 1 Рё С„СѓРЅРєС†РёСЏ РїСЂРѕРґРѕР»Р¶Р°РµС‚ РёРЅС‚РµСЂРїСЂРµС‚Р°С†РёСЋ РѕРїРµСЂР°С‚РѕСЂРѕРІ, РїРѕРєР° РЅРµ РІСЃС‚СЂРµС‚РёС‚ Р·Р°РєСЂС‹РІР°СЋС‰СѓСЋСЃСЏ С„РёРіСѓСЂРЅСѓСЋ СЃРєРѕР±РєСѓ. РўРµРєСЃС‚ С„СѓРЅРєС†РёРё <KBD>interp_block()</KBD> РїСЂРёРІРµРґРµРЅ РЅРёР¶Рµ:
<PRE>
/* РРЅС‚РµСЂРїСЂРёС‚Р°С†РёСЏ РѕРґРЅРѕРіРѕ РѕРїРµСЂР°С‚РѕСЂР° РёР»Рё Р±Р»РѕРєР°. РљРѕРіРґР°
   interp_block() РІРѕР·РІСЂР°С‰Р°РµС‚ СѓРїСЂР°РІР»РµРЅРёРµ РїРѕСЃР»Рµ РїРµСЂРІРѕРіРѕ
   РІС‹Р·РѕРІР°, РІ main() РІСЃС‚СЂРµС‚РёР»Р°СЃСЊ РїРѕСЃР»РµРґРЅСЏСЏ
   Р·Р°РєСЂС‹РІР°СЋС‰Р°СЏСЃСЏ С„РёРіСѓСЂРЅР°СЏ СЃРєРѕР±РєР° РёР»Рё РѕРїРµСЂР°С‚РѕСЂ return.
*/
void interp_block(void)
{
  int value;
  char block = 0;

  do {
    token_type = get_token();

    /* РџСЂРё РёРЅС‚РµСЂРїСЂРёС‚Р°С†РёРё РѕРґРЅРѕРіРѕ РѕРїРµСЂР°С‚РѕСЂР°РІРѕР·РІСЂР°С‚
       РїРѕСЃР»Рµ РїРµСЂРІРѕР№ С‚РѕС‡РєРё СЃ Р·Р°РїСЏС‚РѕР№.
    */

    /* РѕРїСЂРµРґРµР»РµРЅРёРµ СРёРїР° Р»РµРєСЃРµРјС‹ */
    if(token_type == IDENTIFIER) {
      /* Р­С‚Рѕ РЅРµ Р·Р°СЂРµРіРµСЃС‚СЂРёСЂРѕРІР°РЅРЅРѕРµ СЃР»РѕРІРѕ,
         РѕР±СЂР°Р±Р°С‚С‹РІР°РµС‚СЃСЏ РІС‹СЂР°Р¶РµРЅРёРµ. */
      putback();  /* РІРѕР·РІСЂР°С‚ Р»РµРєСЃРµРјС‹РІРѕ РІС…РѕРґРЅРѕР№ РїРѕС‚РѕРє
        РґР»СЏ РґР°Р»СЊРЅРµР№С€РµР№ РѕР±СЂР°Р±РѕС‚РєРё С„СѓРЅРєС†РёРµР№ eval_exp() */
      eval_exp(&value);  /* РѕР±СЂР°Р±РѕС‚РєР° РІС‹СЂР°Р¶РµРЅРёСЏ */
      if(*token!=';') sntx_err(SEMI_EXPECTED);
    }
    else if(token_type==BLOCK) {
      /* РµСЃР»Рё СЌС‚Рѕ РіСЂР°РЅРёС‡РёС‚РµР»СЊ Р±Р»РѕРєР° */
      if(*token == '{') /* Р±Р»РѕРє */
        block = 1; /* РёРЅС‚РµСЂРїСЂРёС‚Р°С†РёСЏ Р±Р»РѕРєР°, Р° РЅРµ РѕРїРµСЂР°С‚РѕСЂР° */
      else return; /* СЌС‚Рѕ }, РІРѕР·РІСЂР°С‚ */
    }
    else /* Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅРѕРµ СЃР»РѕРІРѕ */
      switch(tok) {
        case CHAR:
        case INT:     /* РѕР±СЉСЏРІР»РµРЅРёРµ Р»РѕРєР°Р»СЊРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№ */
          putback();
          decl_local();
          break;
        case RETURN:  /* РІРѕР·РІСЂР°С‚ РёР· РІС‹Р·РѕРІР° С„СѓРЅРєС†РёРё */
          func_ret();
          return;
        case IF:      /* РѕР±СЂР°Р±РѕС‚РєР° РѕРїРµСЂР°С‚РѕСЂР° if */
          exec_if();
          break;
        case ELSE:    /* РѕР±СЂР°Р±РѕС‚РєР° РѕРїРµСЂР°С‚РѕСЂР° else */
          find_eob(); /* РїРѕРёСЃРє РєРѕРЅС†Р° Р±Р»РѕРєР° else
                         Рё РїСЂРѕРґРѕР»Р¶РµРЅРёРµ РІС‹РїРѕР»РЅРµРЅРёСЏ */
          break;
        case WHILE:   /* РѕР±СЂР°Р±РѕС‚РєР° С†РёРєР»Р° while */
          exec_while();
          break;
        case DO:      /* РѕР±СЂР°Р±РѕС‚РєР° С†РёРєР»Р° do-while */
          exec_do();
          break;
        case FOR:     /* РѕР±СЂР°Р±РѕС‚РєР° С†РёРєР»Р° for */
          exec_for();
          break;
        case END:
          exit(0);
      }
  } while (tok != FINISHED && block);
}
</PRE>
<P class="tj">Р•СЃР»Рё РЅРµ СЃС‡РёС‚Р°С‚СЊ РІС‹Р·РѕРІРѕРІ С„СѓРЅРєС†РёРё <KBD>exit()</KBD> РёР»Рё РїРѕРґРѕР±РЅС‹С… РµР№, С‚Рѕ РёРЅС‚РµСЂРїСЂРµС‚Р°С†РёСЏ РїСЂРѕРіСЂР°РјРјС‹, РЅР°РїРёСЃР°РЅРЅРѕР№ РЅР° СЏР·С‹РєРµ РЎ, РєРѕРЅС‡Р°РµС‚СЃСЏ РІ РѕРґРЅРѕРј РёР· СЃР»РµРґСѓСЋС‰РёС… СЃР»СѓС‡Р°РµРІ: РІСЃС‚СЂРµС‚РёР»Р°СЃСЊ РїРѕСЃР»РµРґРЅСЏСЏ Р·Р°РєСЂС‹РІР°СЋС‰Р°СЏСЃСЏ С„РёРіСѓСЂРЅР°СЏ СЃРєРѕР±РєР° С„СѓРЅРєС†РёРё <KBD>main()</KBD>, РёР»Рё РІСЃС‚СЂРµС‚РёР»СЃСЏ РѕРїРµСЂР°С‚РѕСЂ <KBD>return</KBD> РёР· <KBD>main()</KBD>. РР·-Р·Р° С‚РѕРіРѕ, С‡С‚Рѕ РїСЂРё РІСЃС‚СЂРµС‡Рµ РїРѕСЃР»РµРґРЅРµР№ Р·Р°РєСЂС‹РІР°СЋС‰РµР№СЃСЏ С„РёРіСѓСЂРЅРѕР№ СЃРєРѕР±РєРё <KBD>main()</KBD> РїСЂРѕРіСЂР°РјРјСѓ РЅСѓР¶РЅРѕ Р·Р°РІРµСЂС€РёС‚СЊ, <KBD>interp_block()</KBD> РІС‹РїРѕР»РЅСЏРµС‚ С‚РѕР»СЊРєРѕ РѕРґРёРЅ РѕРїРµСЂР°С‚РѕСЂ РёР»Рё Р±Р»РѕРє, Р° РЅРµ РІСЃСЋ РїСЂРѕРіСЂР°РјРјСѓ, С…РѕС‚СЊ РѕРЅР° Рё СЃРѕСЃС‚РѕРёС‚ РёР· Р±Р»РѕРєРѕРІ. РўР°РєРёРј РѕР±СЂР°Р·РѕРј, <KBD>interp_block()</KBD> РІС‹Р·С‹РІР°РµС‚СЃСЏ РєР°Р¶РґС‹Р№ СЂР°Р·, РєРѕРіРґР° РІСЃС‚СЂРµС‡Р°РµС‚СЃСЏ РЅРѕРІС‹Р№ Р±Р»РѕРє. Р­С‚Рѕ РѕС‚РЅРѕСЃРёС‚СЃСЏ РЅРµ С‚РѕР»СЊРєРѕ Рє Р±Р»РѕРєР°Рј С„СѓРЅРєС†РёР№, РЅРѕ Рё Рє Р±Р»РѕРєР°Рј РѕРїРµСЂР°С‚РѕСЂРѕРІ (РЅР°РїСЂРёРјРµСЂ, <KBD>if</KBD>). РЎР»РµРґРѕРІР°С‚РµР»СЊРЅРѕ, РІ РїСЂРѕС†РµСЃСЃРµ РІС‹РїРѕР»РЅРµРЅРёСЏ РїСЂРѕРіСЂР°РјРјС‹ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂ Little РЎ РІС‹Р·С‹РІР°РµС‚ <KBD>interp_block()</KBD> СЂРµРєСѓСЂСЃРёРІРЅРѕ.
<P class="tj">Р¤СѓРЅРєС†РёСЏ <KBD>interp_block()</KBD> СЂР°Р±РѕС‚Р°РµС‚ СЃР»РµРґСѓСЋС‰РёРј РѕР±СЂР°Р·РѕРј. РЎРЅР°С‡Р°Р»Р° РёР· РІС…РѕРґРЅРѕРіРѕ РїРѕС‚РѕРєР° СЃС‡РёС‚С‹РІР°РµС‚СЃСЏ РѕС‡РµСЂРµРґРЅР°СЏ Р»РµРєСЃРµРјР° РїСЂРѕРіСЂР°РјРјС‹. Р•СЃР»Рё СЌС‚Рѕ С‚РѕС‡РєР° СЃ Р·Р°РїСЏС‚РѕР№, С‚Рѕ РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ РµРґРёРЅСЃС‚РІРµРЅРЅС‹Р№ РѕРїРµСЂР°С‚РѕСЂ Рё С„СѓРЅРєС†РёСЏ РІРѕР·РІСЂР°С‰Р°РµС‚ СѓРїСЂР°РІР»РµРЅРёРµ. Р’ РїСЂРѕС‚РёРІРЅРѕРј СЃР»СѓС‡Р°Рµ, РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ РїСЂРѕРІРµСЂРєР°, СЏРІР»СЏРµС‚СЃСЏ Р»Рё СЃР»РµРґСѓСЋС‰Р°СЏ Р»РµРєСЃРµРјР° РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂРѕРј; РµСЃР»Рё РґР°, С‚Рѕ РѕРїРµСЂР°С‚РѕСЂ СЏРІР»СЏРµС‚СЃСЏ РІС‹СЂР°Р¶РµРЅРёРµРј Рё РІС‹Р·С‹РІР°РµС‚СЃСЏ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёР№ Р°РЅР°Р»РёР·Р°С‚РѕСЂ РІС‹СЂР°Р¶РµРЅРёР№. РЎРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёР№ Р°РЅР°Р»РёР·Р°С‚РѕСЂ РґРѕР»Р¶РµРЅ РїСЂРѕС‡РµСЃС‚СЊ РІСЃРµ РІС‹СЂР°Р¶РµРЅРёРµ, РІРєР»СЋС‡Р°СЏ РїРµСЂРІСѓСЋ Р»РµРєСЃРµРјСѓ, РїРѕСЌС‚РѕРјСѓ РїРµСЂРµРґ РµРіРѕ РІС‹Р·РѕРІРѕРј С„СѓРЅРєС†РёСЏ <KBD>putback()</KBD> РІРѕР·РІСЂР°С‰Р°РµС‚ РїРѕСЃР»РµРґРЅСЋСЋ РїСЂРѕС‡РёС‚Р°РЅРЅСѓСЋ Р»РµРєСЃРµРјСѓ РІРѕ РІС…РѕРґРЅРѕР№ РїРѕС‚РѕРє. РџРѕСЃР»Рµ РІРѕР·РІСЂР°С‚Р° СѓРїСЂР°РІР»РµРЅРёСЏ РёР· <KBD>eval_exp()</KBD> <KBD>token</KBD> СЃРѕРґРµСЂР¶РёС‚ РїРѕСЃР»РµРґРЅСЋСЋ Р»РµРєСЃРµРјСѓ, РїСЂРѕС‡РёС‚Р°РЅРЅСѓСЋ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёРј Р°РЅР°Р»РёР·Р°С‚РѕСЂРѕРј РІС‹СЂР°Р¶РµРЅРёР№. Р•СЃР»Рё СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРёС… РѕС€РёР±РѕРє РЅРµС‚, С‚Рѕ СЌС‚Рѕ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ С‚РѕС‡РєР° СЃ Р·Р°РїСЏС‚РѕР№. Р•СЃР»Рё <KBD>token</KBD> РЅРµ СЃРѕРґРµСЂР¶РёС‚ С‚РѕС‡РєСѓ СЃ Р·Р°РїСЏС‚РѕР№, С‚Рѕ РІС‹РІРѕРґРёС‚СЃСЏ СЃРѕРѕР±С‰РµРЅРёРµ РѕР± РѕС€РёР±РєРµ.
<P class="tj">Р•СЃР»Рё РѕС‡РµСЂРµРґРЅР°СЏ Р»РµРєСЃРµРјР° РїСЂРѕРіСЂР°РјРјС‹ СЏРІР»СЏРµС‚СЃСЏ РѕС‚РєСЂС‹РІР°СЋС‰РµР№СЃСЏ С„РёРіСѓСЂРЅРѕР№ СЃРєРѕР±РєРѕР№, С‚Рѕ РїРµСЂРµРјРµРЅРЅР°СЏ <KBD>block</KBD> СѓСЃС‚Р°РЅР°РІР»РёРІР°РµС‚СЃСЏ СЂР°РІРЅРѕР№ 1, Р° РµСЃР»Рё Р·Р°РєСЂС‹РІР°СЋС‰РµР№СЃСЏ, С‚Рѕ <KBD>interp_block()</KBD> РІРѕР·РІСЂР°С‰Р°РµС‚ СѓРїСЂР°РІР»РµРЅРёРµ РІС‹Р·РІР°РІС€РµР№ РїСЂРѕРіСЂР°РјРјРµ.
<P class="tj">Р•СЃР»Рё Р»РµРєСЃРµРјР° СЏРІР»СЏРµС‚СЃСЏ Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅС‹Рј СЃР»РѕРІРѕРј, С‚Рѕ РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ РѕРїРµСЂР°С‚РѕСЂ <KBD>switch</KBD>, РєРѕС‚РѕСЂС‹Р№ РІС‹Р·С‹РІР°РµС‚ СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰СѓСЋ РїСЂРѕС†РµРґСѓСЂСѓ РѕР±СЂР°Р±РѕС‚РєРё РѕРїРµСЂР°С‚РѕСЂР°. РќСѓРјРµСЂР°С†РёСЏ Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅС‹С… СЃР»РѕРІ РІ С„СѓРЅРєС†РёРё <KBD>get_token()</KBD> РЅСѓР¶РЅР° РґР»СЏ С‚РѕРіРѕ, С‡С‚РѕР±С‹ РјРѕР¶РЅРѕ Р±С‹Р»Рѕ РїСЂРёРјРµРЅРёС‚СЊ <KBD>switch</KBD>, Р° РЅРµ <KBD>if</KBD>, РєРѕС‚РѕСЂРѕРјСѓ РїСЂРёС€Р»РѕСЃСЊ Р±С‹ СЃСЂР°РІРЅРёРІР°С‚СЊ СЃС‚СЂРѕРєРё, С‡С‚Рѕ Р·РЅР°С‡РёС‚РµР»СЊРЅРѕ РјРµРґР»РµРЅРЅРµРµ.
<P class="tj">Р¤СѓРЅРєС†РёРё, РІС‹РїРѕР»РЅСЏСЋС‰РёРµ РѕРїРµСЂР°С‚РѕСЂС‹ СЃ Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅС‹Рј СЃР»РѕРІРѕРј, Р±СѓРґСѓС‚ СЂР°СЃСЃРјРѕС‚СЂРµРЅС‹ РІ РґР°Р»СЊРЅРµР№С€РёС… СЂР°Р·РґРµР»Р°С….
<P class="tj">РќРёР¶Рµ РїСЂРёРІРµРґРµРЅ Р»РёСЃС‚РёРЅРі С„Р°Р№Р»Р° СЃ С‚РµРєСЃС‚РѕРј РїСЂРѕРіСЂР°РјРјС‹ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР°. РћРЅ РЅР°Р·С‹РІР°РµС‚СЃСЏ LITTLEC.C.
<PRE>
/* РРЅС‚РµСЂРїСЂРёС‚Р°С‚РѕСЂ СЏР·С‹РєР° Little C. */

#include &lt;stdio.h&gt;
#include &lt;setjmp.h&gt;
#include &lt;math.h&gt;
#include &lt;ctype.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#define NUM_FUNC        100
#define NUM_GLOBAL_VARS 100
#define NUM_LOCAL_VARS  200
#define NUM_BLOCK       100
#define ID_LEN          31
#define FUNC_CALLS      31
#define NUM_PARAMS      31
#define PROG_SIZE       10000
#define LOOP_NEST       31

enum tok_types {DELIMITER, IDENTIFIER, NUMBER, KEYWORD,
                TEMP, STRING, BLOCK};

/* СЃСЋРґР° РјРѕР¶РЅРѕ РґРѕР±Р°РІРёС‚СЊ РґРѕРїРѕР»РЅРёС‚РµР»СЊРЅС‹Рµ Р»РµРєСЃРµРјС‹
   Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅС‹С… СЃР»РѕРІ */
enum tokens {ARG, CHAR, INT, IF, ELSE, FOR, DO, WHILE,
             SWITCH, RETURN, EOL, FINISHED, END};

/* СЃСЋРґР° РјРѕР¶РЅРѕ РґРѕР±Р°РІРёС‚СЊ РґРѕРїРѕР»РЅРёС‚РµР»СЊРЅС‹Рµ РґРІСѓС…СЃРёРјРІРѕР»СЊРЅС‹Рµ РѕРїРµСЂР°С‚РѕСЂС‹,
   РЅР°РїСЂРёРјРµСЂ, -&gt; */
enum double_ops {LT=1, LE, GT, GE, EQ, NE};

/* Р­С‚Рё РєРѕРЅСЃС‚Р°РЅС‚С‹ РёСЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ РґР»СЏ РІС‹Р·РѕРІР° С„СѓРЅРєС†РёРё sntx_err()
   РІ СЃР»СѓС‡Р°Рµ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕР№ РѕС€РёР±РєРё. РџСЂРё РЅРµРѕР±С…РѕРґРёРјРѕСЃС‚Рё СЃРїРёСЃРѕРє
   РєРѕРЅСЃС‚Р°РЅС‚ РјРѕР¶РЅРѕ СЂР°СЃС€РёСЂРёС‚СЊ.
   Р’РќРРњРђРќРР•: РєРѕРЅСЃС‚Р°РЅС‚Р° SYNTAX РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ С‚РѕРіРґР°, РєРѕРіРґР°
   РёРЅС‚РµСЂРїСЂРёС‚Р°С‚РѕСЂ РЅРµ РјРѕР¶РµС‚ РєРІР°Р»РёС„РёС†РёСЂРѕРІР°С‚СЊ РѕС€РёР±РєСѓ.
*/
enum error_msg
     {SYNTAX, UNBAL_PARENS, NO_EXP, EQUALS_EXPECTED,
      NOT_VAR, PARAM_ERR, SEMI_EXPECTED,
      UNBAL_BRACES, FUNC_UNDEF, TYPE_EXPECTED,
      NEST_FUNC, RET_NOCALL, PAREN_EXPECTED,
      WHILE_EXPECTED, QUOTE_EXPECTED, NOT_TEMP,
      TOO_MANY_LVARS, DIV_BY_ZERO};

char *prog;    /* С‚РµРєСѓС‰Р°СЏ РїРѕР·РёС†РёСЏ РІ РёСЃС…РѕРґРЅРѕРј С‚РµРєСЃС‚Рµ РїСЂРѕРіСЂР°РјРјС‹ */
char *p_buf;   /* СѓРєР°Р·С‹РІР°РµС‚ РЅР° РЅР°С‡Р°Р»Рѕ Р±СѓС„РµСЂР° РїСЂРѕРіСЂР°РјРјС‹ */
jmp_buf e_buf; /* СЃРѕРґРµСЂР¶РёС‚ РёРЅС„РѕСЂРјР°С†РёСЋ РґР»СЏ longjmp() */

/* РњР°СЃСЃРёРІ СЌС‚РёС… СЃС‚СЂСѓРєС‚СѓСЂ СЃРѕРґРµСЂР¶РёС‚ РёРЅС„РѕСЂРјР°С†РёСЋ
   Рѕ РіР»РѕР±Р°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С….
*/
struct var_type {
  char var_name[ID_LEN];
  int v_type;
  int value;
}  global_vars[NUM_GLOBAL_VARS];

struct var_type local_var_stack[NUM_LOCAL_VARS];

struct func_type {
  char func_name[ID_LEN];
  int ret_type; 
  char *loc;  /* Р°РґСЂРµСЃ С‚РѕС‡РєРё РІС…РѕРґР° РІ С„Р°Р№Р» */
} func_table[NUM_FUNC];

int call_stack[NUM_FUNC];

struct commands { /* С‚Р°Р±Р»РёС†Р° Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅС‹С… СЃР»РѕРІ */
  char command[20];
  char tok;
} table[] = { /* Р’ СЌС‚Сѓ С‚Р°Р±Р»РёС†Сѓ */
  "if", IF, /* РєРѕРјР°РЅРґС‹ РґРѕР»Р¶РЅС‹ Р±С‹С‚СЊ РІРІРµРґРµРЅС‹ РЅР° РЅРёР¶РЅРµРј СЂРµРіРёСЃС‚СЂРµ. */
  "else", ELSE,
  "for", FOR,
  "do", DO,
  "while", WHILE,
  "char", CHAR,
  "int", INT,
  "return", RETURN,
  "end", END,
  "", END  /* РєРѕРЅРµС† С‚Р°Р±Р»РёС†С‹ */
};

char token[80];
char token_type, tok;

int functos;  /* РёРЅРґРµРєСЃ РІРµСЂС€РёРЅС‹ СЃС‚РµРєР° РІС‹Р·РѕРІР° С„СѓРЅРєС†РёРё */
int func_index; /* РёРЅРґРµРєСЃ РІ С‚Р°Р±Р»РёС†Рµ С„СѓРЅРєС†РёР№ */
int gvar_index; /* РёРЅРґРµРєСЃ РІ С‚Р°Р±Р»РёС†Рµ РіР»РѕР±Р°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */
int lvartos; /* РёРЅРґРµРєСЃ РІ СЃС‚РµРєРµ Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */

int ret_value; /* РІРѕР·РІСЂР°С‰Р°РµРјРѕРµ Р·РЅР°С‡РµРЅРёРµ С„СѓРЅРєС†РёРё */

void print(void), prescan(void);
void decl_global(void), call(void), putback(void);
void decl_local(void), local_push(struct var_type i);
void eval_exp(int *value), sntx_err(int error);
void exec_if(void), find_eob(void), exec_for(void);
void get_params(void), get_args(void);
void exec_while(void), func_push(int i), exec_do(void);
void assign_var(char *var_name, int value);
int load_program(char *p, char *fname), find_var(char *s);
void interp_block(void), func_ret(void);
int func_pop(void), is_var(char *s), get_token(void);
char *find_func(char *name);

int main(int argc, char *argv[])
{
  if(argc != 2) {
    printf("РџСЂРёРјРµРЅРµРЅРёРµ: littlec &lt;РёРјСЏ_С„Р°Р№Р»Р°&gt;\n");
    exit(1);
  }

  /* РІС‹РґРµР»РµРЅРёРµ РїР°РјСЏС‚Рё РґР»СЏ РїСЂРѕРіСЂР°РјРјС‹ */
  if((p_buf = (char *) malloc(PROG_SIZE))==NULL) {
    printf("Р’С‹РґРµР»РёС‚СЊ РїР°РјСЏС‚СЊ РЅРµ СѓРґР°Р»РѕСЃСЊ");
    exit(1);
  }

  /* Р·Р°РіСЂСѓР·РєР° РїСЂРѕРіСЂР°РјРјС‹ РґР»СЏ РІС‹РїРѕР»РЅРµРЅРёСЏ */
  if(!load_program(p_buf, argv[1])) exit(1);
  if(setjmp(e_buf)) exit(1); /* РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ Р±СѓС„РµСЂР° long jump */

  gvar_index = 0;  /* РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РёРЅРґРµРєСЃР° РіР»РѕР±Р°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */

  /* СѓСЃС‚Р°РЅРѕРІРєР° СѓРєР°Р·Р°С‚РµР»СЏ РїСЂРѕРіСЂР°РјРјС‹ РЅР° РЅР°С‡Р°Р»Рѕ Р±СѓС„РµСЂР° РїСЂРѕРіСЂР°РјРјС‹ */
  prog = p_buf;
  prescan(); /* РѕРїСЂРµРґРµР»РµРЅРёРµ Р°РґСЂРµСЃРѕРІ РІСЃРµС… С„СѓРЅРєС†РёР№
                Рё РіР»РѕР±Р°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… РїСЂРѕРіСЂР°РјРјС‹ */

  lvartos = 0;     /* РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РёРЅРґРµРєСЃР° СЃС‚РµРєР° Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */
  functos = 0;     /* РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РёРЅРґРµРєСЃР° СЃС‚РµРєР° РІС‹Р·РѕРІР° (CALL) */

  /* РїРµСЂРІРѕР№ РІС‹Р·С‹РІР°РµС‚СЃСЏ main() */
  prog = find_func("main"); /* РїРѕРёСЃРє С‚РѕС‡РєРё РІС…РѕРґР° РїСЂРѕРіСЂР°РјРјС‹ */

  if(!prog) { /* С„СѓРЅРєС†РёСЏ main() РЅРµРїСЂР°РІРёР»СЊРЅР° РёР»Рё РѕС‚СЃСѓС‚СЃС‚РІСѓРµС‚ */
    printf("main() РЅРµ РЅР°Р№РґРµРЅР°.\n");
    exit(1);
  }

  prog--; /* РІРѕР·РІСЂР°С‚ Рє РѕС‚РєСЂС‹РІР°СЋС‰РµР№СЃСЏ СЃРєРѕР±РєРµ ( */
  strcpy(token, "main");
  call(); /* РЅР°С‡Р°Р»Рѕ РёРЅС‚РµСЂРїСЂРёС‚Р°С†РёРё main() */

  return 0;
}

/* РРЅС‚РµСЂРїСЂРёС‚Р°С†РёСЏ РѕРґРЅРѕРіРѕ РѕРїРµСЂР°С‚РѕСЂР° РёР»Рё Р±Р»РѕРєР°. РљРѕРіРґР°
   interp_block() РІРѕР·РІСЂР°С‰Р°РµС‚ СѓРїСЂР°РІР»РµРЅРёРµ РїРѕСЃР»Рµ РїРµСЂРІРѕРіРѕ
   РІС‹Р·РѕРІР°, РІ main() РІСЃС‚СЂРµС‚РёР»Р°СЃСЊ РїРѕСЃР»РµРґРЅСЏСЏ
   Р·Р°РєСЂС‹РІР°СЋС‰Р°СЏСЃСЏ С„РёРіСѓСЂРЅР°СЏ СЃРєРѕР±РєР° РёР»Рё РѕРїРµСЂР°С‚РѕСЂ return.
*/
void interp_block(void)
{
  int value;
  char block = 0;

  do {
    token_type = get_token();

    /* РџСЂРё РёРЅС‚РµСЂРїСЂРёС‚Р°С†РёРё РѕРґРЅРѕРіРѕ РѕРїРµСЂР°С‚РѕСЂР°РІРѕР·РІСЂР°С‚
       РїРѕСЃР»Рµ РїРµСЂРІРѕР№ С‚РѕС‡РєРё СЃ Р·Р°РїСЏС‚РѕР№.
    */

    /* РѕРїСЂРµРґРµР»РµРЅРёРµ С‚РёРїР° Р»РµРєСЃРµРјС‹ */
    if(token_type == IDENTIFIER) {
      /* Р­С‚Рѕ РЅРµ Р·Р°СЂРµРіРµСЃС‚СЂРёСЂРѕРІР°РЅРЅРѕРµ СЃР»РѕРІРѕ,
         РѕР±СЂР°Р±Р°С‚С‹РІР°РµС‚СЃСЏ РІС‹СЂР°Р¶РµРЅРёРµ. */
      putback();  /* РІРѕР·РІСЂР°С‚ Р»РµРєСЃРµРјС‹РІРѕ РІС…РѕРґРЅРѕР№ РїРѕС‚РѕРє
        РґР»СЏ РґР°Р»СЊРЅРµР№С€РµР№ РѕР±СЂР°Р±РѕС‚РєРё С„СѓРЅРєС†РёРµР№ eval_exp() */
      eval_exp(&value);  /* РѕР±СЂР°Р±РѕС‚РєР° РІС‹СЂР°Р¶РµРЅРёСЏ */
      if(*token!=';') sntx_err(SEMI_EXPECTED);
    }
    else if(token_type==BLOCK) {
      /* РµСЃР»Рё СЌС‚Рѕ РіСЂР°РЅРёС‡РёС‚РµР»СЊ Р±Р»РѕРєР° */
      if(*token == '{') /* Р±Р»РѕРє */
        block = 1; /* РёРЅС‚РµСЂРїСЂРёС‚Р°С†РёСЏ Р±Р»РѕРєР°, Р° РЅРµ РѕРїРµСЂР°С‚РѕСЂР° */
      else return; /* СЌС‚Рѕ }, РІРѕР·РІСЂР°С‚ */
    }
    else /* Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅРѕРµ СЃР»РѕРІРѕ */
      switch(tok) {
        case CHAR:
        case INT:     /* РѕР±СЉСЏРІР»РµРЅРёРµ Р»РѕРєР°Р»СЊРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№ */
          putback();
          decl_local();
          break;
        case RETURN:  /* РІРѕР·РІСЂР°С‚ РёР· РІС‹Р·РѕРІР° С„СѓРЅРєС†РёРё */
          func_ret();
          return;
        case IF:      /* РѕР±СЂР°Р±РѕС‚РєР° РѕРїРµСЂР°С‚РѕСЂР° if */
          exec_if();
          break;
        case ELSE:    /* РѕР±СЂР°Р±РѕС‚РєР° РѕРїРµСЂР°С‚РѕСЂР° else */
          find_eob(); /* РїРѕРёСЃРє РєРѕРЅС†Р° Р±Р»РѕРєР° else
                         Рё РїСЂРѕРґРѕР»Р¶РµРЅРёРµ РІС‹РїРѕР»РЅРµРЅРёСЏ */
          break;
        case WHILE:   /* РѕР±СЂР°Р±РѕС‚РєР° С†РёРєР»Р° while */
          exec_while();
          break;
        case DO:      /* РѕР±СЂР°Р±РѕС‚РєР° С†РёРєР»Р° do-while */
          exec_do();
          break;
        case FOR:     /* РѕР±СЂР°Р±РѕС‚РєР° С†РёРєР»Р° for */
          exec_for();
          break;
        case END:
          exit(0);
      }
  } while (tok != FINISHED && block);
}

/* Р—Р°РіСЂСѓР·РєР° РїСЂРѕРіСЂР°РјРјС‹. */
int load_program(char *p, char *fname)
{
  FILE *fp;
  int i=0;

  if((fp=fopen(fname, "rb"))==NULL) return 0;

  i = 0;
  do {
    *p = getc(fp);
    p++; i++;
  } while(!feof(fp) && i&lt;PROG_SIZE);

  if(*(p-2) == 0x1a) *(p-2) = '\0'; /* РїСЂРѕРіСЂР°РјРјР° РєРѕРЅС‡Р°РµС‚СЃСЏ
                                       РЅСѓР»РµРІС‹Рј СЃРёРјРІРѕР»РѕРј */
  else *(p-1) = '\0';
  fclose(fp);
  return 1;
}

/* РќР°Р№С‚Рё Р°РґСЂРµСЃР° РІСЃРµС… С„СѓРЅРєС†РёР№ РІ РїСЂРѕРіСЂР°РјРјРµ
   Рё Р·Р°РїРѕРјРЅРёС‚СЊ РіР»РѕР±Р°Р»СЊРЅС‹Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ. */
void prescan(void)
{
  char *p, *tp;
  char temp[32];
  int datatype; 
  int brace = 0;  /* Р•СЃР»Рё brace = 0, С‚Рѕ С‚РµРєСѓС‰Р°СЏ
                     РїРѕР·РёС†РёСЏ СѓРєР°Р·Р°С‚РµР»СЏ РїСЂРѕРіСЂР°РјРјС‹ РЅР°С…РѕРґРёС‚СЃСЏ
                     РІ РЅРµ РєР°РєРѕР№-Р»РёР±Рѕ С„СѓРЅРєС†РёРё. */

  p = prog;
  func_index = 0;
  do {
    while(brace) {  /* РѕР±С…РѕРґ РєРѕРґР° С„СѓРЅРєС†РёРё */
      get_token();
      if(*token == '{') brace++;
      if(*token == '}') brace--;
    }

    tp = prog; /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ С‚РµРєСѓС‰РµР№ РїРѕР·РёС†РёРё */
    get_token();
    /* С‚РёРї РіР»РѕР±Р°Р»СЊРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№ РёР»Рё РІРѕР·РІСЂР°С‰Р°РµРјРѕРіРѕ Р·РЅР°С‡РµРЅРёСЏ С„СѓРЅРєС†РёРё */
    if(tok==CHAR || tok==INT) { 
      datatype = tok; /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ С‚РёРїР° РґР°РЅРЅС‹С… */
      get_token();
      if(token_type == IDENTIFIER) {
        strcpy(temp, token);
        get_token();
        if(*token != '(') { /* СЌС‚Рѕ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ РіР»РѕР±Р°Р»СЊРЅР°СЏ РїРµСЂРµРјРµРЅРЅР°СЏ */
          prog = tp; /* РІРѕР·РІСЂР°С‚ РІ РЅР°С‡Р°Р»Рѕ РѕР±СЉСЏРІР»РµРЅРёСЏ */
          decl_global();
        }
        else if(*token == '(') {  /* СЌС‚Рѕ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ С„СѓРЅРєС†РёСЏ */
          func_table[func_index].loc = prog;
          func_table[func_index].ret_type = datatype;
          strcpy(func_table[func_index].func_name, temp);
          func_index++;
          while(*prog != ')') prog++;
          prog++;
          /* СЃРµР№С‡Р°СЃ prog СѓРєР°Р·С‹РІР°РµС‚ РЅР° РѕС‚РєСЂС‹РІР°СЋС‰СѓСЋСЃСЏ
             С„РёРіСѓСЂРЅСѓСЋ СЃРєРѕР±РєСѓ С„СѓРЅРєС†РёРё */
        }
        else putback();
      }
    }
    else if(*token == '{') brace++;
  } while(tok != FINISHED);
  prog = p;
}

/* Р’РѕР·РІСЂР°С‚ Р°РґСЂРµСЃР° С‚РѕС‡РєРё РІС…РѕРґР° РґР°РЅРЅРѕР№ С„СѓРЅРєС†РёРё.
   Р’РѕР·РІСЂР°С‚ NULL, РµСЃР»Рё РЅРµ РЅР°РґРµРЅР°.
*/
char *find_func(char *name)
{
  register int i;

  for(i=0; i &lt; func_index; i++)
    if(!strcmp(name, func_table[i].func_name))
      return func_table[i].loc;

  return NULL;
 }

/* РћР±СЉСЏРІР»РµРЅРёРµ РіР»РѕР±Р°Р»СЊРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№. */
void decl_global(void)
{
  int vartype;

  get_token();  /* РѕРїСЂРµРґРµР»РµРЅРёРµ С‚РёРїР° */

  vartype = tok; /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ С‚РёРїР° РїРµСЂРµРјРµРЅРЅРѕР№ */

  do { /* РѕР±СЂР°Р±РѕС‚РєР° СЃРїРёСЃРєР° */
    global_vars[gvar_index].v_type = vartype;
    global_vars[gvar_index].value = 0;  /* РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РЅСѓР»РµРј */
    get_token();  /* РѕРїСЂРµРґРµР»РµРЅРёРµ РёРјРµРЅРё */
    strcpy(global_vars[gvar_index].var_name, token);
    get_token();
    gvar_index++;
  } while(*token == ',');
  if(*token != ';') sntx_err(SEMI_EXPECTED);
}

/* РћР±СЉСЏРІР»РµРЅРёРµ Р»РѕРєР°Р»СЊРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№. */
void decl_local(void)
{
  struct var_type i;

  get_token();  /* РѕРїСЂРµРґРµР»РµРЅРёРµ С‚РёРїР° */

  i.v_type = tok;
  i.value = 0;  /* РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РЅСѓР»РµРј */

  do { /* РѕР±СЂР°Р±РѕС‚РєР° СЃРїРёСЃРєР° */
    get_token(); /* РѕРїСЂРµРґРµР»РµРЅРёРµ С‚РёРїР° РїСЂРµРјРµРЅРЅРѕР№ */
    strcpy(i.var_name, token);
    local_push(i);
    get_token();
  } while(*token == ',');
  if(*token != ';') sntx_err(SEMI_EXPECTED);
}

/* Р’С‹Р·РѕРІ С„СѓРЅРєС†РёРё. */
void call(void)
{
  char *loc, *temp;
  int lvartemp;

  loc = find_func(token); /* РЅР°Р№С‚Рё С‚РѕС‡РєСѓ РІС…РѕРґР° С„СѓРЅРєС†РёРё */
  if(loc == NULL)
    sntx_err(FUNC_UNDEF); /* С„СѓРЅРєС†РёСЏ РЅРµ РѕРїСЂРµРґРµР»РµРЅР° */
  else {
    lvartemp = lvartos;  /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ РёРЅРґРµРєСЃР° СЃС‚РµРєР°
                            Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */
    get_args();  /* РїРѕР»СѓС‡РµРЅРёРµ Р°СЂРіСѓРјРµРЅС‚Р° С„СѓРЅРєС†РёРё */
    temp = prog; /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ Р°РґСЂРµСЃР° РІРѕР·РІСЂР°С‚Р° */
    func_push(lvartemp);  /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ РёРЅРґРµРєСЃР° СЃС‚РµРєР°
                             Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */
    prog = loc;  /* РїРµСЂРµСѓСЃС‚Р°РЅРѕРІРєР° prog РІ РЅР°С‡Р°Р»Рѕ С„СѓРЅРєС†РёРё */
    get_params(); /* Р·Р°РіСЂСѓР·РєР° РїР°СЂР°РјРµС‚СЂРѕРІ С„СѓРЅРєС†РёРё
                     Р·РЅР°С‡РµРЅРёСЏРјРё Р°СЂРіСѓРјРµРЅС‚РѕРІ */
    interp_block(); /* РёРЅС‚РµСЂРїСЂРµС‚Р°С†РёСЏ С„СѓРЅРєС†РёРё */
    prog = temp; /* РІРѕСЃСЃС‚Р°РЅРѕРІР»РµРЅРёРµ prog */
    lvartos = func_pop(); /* РІРѕСЃСЃС‚Р°РЅРѕРІР»РµРЅРёРµ СЃС‚РµРєР°
                             Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */
  }
}

/* Р—Р°С‚Р°Р»РєРёРІР°РЅРёРµ Р°СЂРіСѓРјРµРЅС‚РѕРІ С„СѓРЅРєС†РёР№ РІ СЃС‚РµРє
   Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…. */
void get_args(void)
{
  int value, count, temp[NUM_PARAMS];
  struct var_type i;

  count = 0;
  get_token();
  if(*token != '(') sntx_err(PAREN_EXPECTED);

  /* РѕР±СЂР°Р±РѕС‚РєР° СЃРїРёСЃРєР° Р·РЅР°С‡РµРЅРёР№ */
  do {
    eval_exp(&value);
    temp[count] = value;  /* РІСЂРµРјРµРЅРЅРѕРµ Р·Р°РїРѕРјРёРЅР°РЅРёРµ */
    get_token();
    count++;
  }while(*token == ',');
  count--;
  /* Р·Р°С‚РѕР»РєРЅСѓС‚СЊ РІ local_var_stack РІ РѕР±СЂР°С‚РЅРѕРј РїРѕСЂСЏРґРєРµ */
  for(; count&gt;=0; count--) {
    i.value = temp[count];
    i.v_type = ARG;
    local_push(i);
  }
}

/* РџРѕР»СѓС‡РµРЅРёРµ РїР°СЂР°РјРµС‚СЂРѕРІ С„СѓРЅРєС†РёРё. */
void get_params(void)
{
  struct var_type *p;
  int i;

  i = lvartos-1;
  do { /* РѕР±СЂР°Р±РѕС‚РєР° СЃРїРёСЃРєР° РїР°СЂР°РјРµС‚СЂРѕРІ */
    get_token();
    p = &local_var_stack[i];
    if(*token != ')' ) {
      if(tok != INT && tok != CHAR)
        sntx_err(TYPE_EXPECTED);

      p-&gt;v_type = token_type;
      get_token();

      /* СЃРІСЏР·С‹РІР°РЅРёРµ РёРјРµРЅРё РїРµСЂР°РјРµС‚СЂРѕРІ СЃ Р°СЂРіСѓРјРµРЅС‚РѕРј,
         СѓР¶Рµ РЅР°С…РѕРґСЏС‰РёРјСЃСЏ РІ СЃС‚РµРєРµ Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */
      strcpy(p-&gt;var_name, token);
      get_token();
      i--;
    }
    else break;
  } while(*token == ',');
  if(*token != ')') sntx_err(PAREN_EXPECTED);
}

/* Р’РѕР·РІСЂР°С‚ РёР· С„СѓРЅРєС†РёРё. */
void func_ret(void)
{
  int value;

  value = 0;
  /* РїРѕР»СѓС‡РµРЅРёРµ РІРѕР·РІСЂР°С‰Р°РµРјРѕРіРѕ Р·РЅР°С‡РµРЅРёСЏ, РµСЃР»Рё РѕРЅРѕ РµСЃС‚СЊ */
  eval_exp(&value);

  ret_value = value;
}

/* Р—Р°С‚РѕР»РєРЅСѓС‚СЊ Р»РѕРєР°Р»СЊРЅСѓСЋ РїРµСЂРµРјРµРЅРЅСѓСЋ. */
void local_push(struct var_type i)
{
  if(lvartos &gt; NUM_LOCAL_VARS)
    sntx_err(TOO_MANY_LVARS);

  local_var_stack[lvartos] = i;
  lvartos++;
}

/* Р’С‹С‚Р°Р»РєРёРІР°РЅРёРµ РёРЅРґРµРєСЃР° РІ СЃС‚РµРєРµ Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…. */
int func_pop(void)
{
  functos--;
  if(functos &lt; 0) sntx_err(RET_NOCALL);
  return call_stack[functos];
}

/* Р—Р°РїРёСЃСЊ РёРЅРґРµРєСЃР° РІ СЃС‚РµРє Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…. */
void func_push(int i)
{
  if(functos&gt;NUM_FUNC)
   sntx_err(NEST_FUNC);
  call_stack[functos] = i;
  functos++;
}

/* РџСЂРёСЃРІР°РёРІР°РЅРёРµ РїРµСЂРµРјРµРЅРЅРѕР№ Р·РЅР°С‡РµРЅРёСЏ. */
void assign_var(char *var_name, int value)
{
  register int i;

  /* РїСЂРѕРІРµСЂРєР° РЅР°Р»РёС‡РёСЏ Р»РѕРєР°Р»СЊРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№ */
  for(i=lvartos-1; i &gt;= call_stack[functos-1]; i--)  {
    if(!strcmp(local_var_stack[i].var_name, var_name)) {
      local_var_stack[i].value = value;
      return;
    }
  }
  if(i &lt; call_stack[functos-1])
  /* РµСЃР»Рё РїРµСЂРµРјРµРЅРЅР°СЏ РЅРµР»РѕРєР°Р»СЊРЅР°СЏ,
     РёС‰РµРј РµРµ РІ С‚Р°Р±Р»РёС†Рµ РіР»РѕР±Р°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */
    for(i=0; i &lt; NUM_GLOBAL_VARS; i++)
      if(!strcmp(global_vars[i].var_name, var_name)) {
        global_vars[i].value = value;
        return;
      }
  sntx_err(NOT_VAR); /* РїРµСЂРµРјРµРЅРЅР°СЏ РЅРµ РЅР°Р№РґРµРЅР° */
}

/* РџРѕР»СѓС‡РµРЅРёРµ Р·РЅР°С‡РµРЅРёСЏ РїРµСЂРµРјРµРЅРЅРѕР№. */
int find_var(char *s)
{
  register int i;

  /* РїСЂРѕРІРµСЂРєР° РЅР°Р»РёС‡РёСЏ РїРµСЂРµРјРµРЅРЅРѕР№ */
  for(i=lvartos-1; i &gt;= call_stack[functos-1]; i--)
    if(!strcmp(local_var_stack[i].var_name, token))
      return local_var_stack[i].value;

  /* РІ РїСЂРѕС‚РёРІРЅРѕРј СЃР»СѓС‡Р°Рµ РїСЂРѕРІРµСЂРёРј,
     РјРѕР¶РµС‚ Р±С‹С‚СЊ СЌС‚Рѕ РіР»РѕР±Р°Р»СЊРЅР°СЏ РїРµСЂРµРјРµРЅРЅР°СЏ */
  for(i=0; i &lt; NUM_GLOBAL_VARS; i++)
    if(!strcmp(global_vars[i].var_name, s))
      return global_vars[i].value;

  sntx_err(NOT_VAR); /* РїРµСЂРµРјРµРЅРЅР°СЏ РЅРµ РЅР°Р№РґРµРЅР° */
  return -1; 
}

/* Р•СЃР»Рё РёРЅРґРµРЅС‚РёС„РёРєР°С‚РѕСЂ СЏРІР»СЏРµС‚СЃСЏ РїРµСЂРµРјРµРЅРЅРѕР№, С‚Рѕ
   РІРѕР·РІСЂР°С‰Р°РµС‚СЃСЏ 1, РёРЅР°С‡Рµ 0.
*/
int is_var(char *s)
{
  register int i;

  /* СЌС‚Рѕ Р»РѕРєР°Р»СЊРЅР°СЏ РїРµСЂРµРјРµРЅРЅР°СЏ ? */
  for(i=lvartos-1; i &gt;= call_stack[functos-1]; i--)
    if(!strcmp(local_var_stack[i].var_name, token))
      return 1;

  /* РµСЃР»Рё РЅРµС‚ - РїРѕРёСЃРє СЃСЂРµРґРё РіР»РѕР±Р°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */
  for(i=0; i &lt; NUM_GLOBAL_VARS; i++)
    if(!strcmp(global_vars[i].var_name, s))
      return 1;

  return 0;
}

/* Р’С‹РїРѕР»РЅРµРЅРёРµ РѕРїРµСЂР°С‚РѕСЂР° if. */
void exec_if(void)
{
  int cond;

  eval_exp(&cond); /* РІС‹С‡РёСЃР»РµРЅРёРµ if-РІС‹СЂР°Р¶РµРЅРёСЏ */

  if(cond) { /* РёСЃС‚РёРЅР° - РёРЅС‚РµСЂРїСЂРµС‚Р°С†РёСЏ if-РїСЂРµРґР»РѕР¶РµРЅРёСЏ */
    interp_block();
  }
  else { /* РІ РїСЂРѕС‚РёРІРЅРѕРј СЃР»СѓС‡Р°Рµ РїСЂРѕРїСѓСЃРє if-РїСЂРµРґР»РѕР¶РµРЅРёСЏ
            Рё РІС‹РїРѕР»РЅРµРЅРёРµ else-РїСЂРµРґР»РѕР¶РµРЅРёСЏ, РµСЃР»Рё РѕРЅРѕ РµСЃС‚СЊ */
    find_eob(); /* РїРѕРёСЃРє РєРѕРЅС†Р° Р±Р»РѕРєР° */
    get_token();

    if(tok != ELSE) {
      putback();  /* РІРѕСЃСЃС‚Р°РЅРѕРІР»РµРЅРёРµ Р»РµРєСЃРµРјС‹,
                     РµСЃР»Рё else-РїСЂРµРґР»РѕР¶РµРЅРёРµ РѕС‚СЃСѓС‚СЃРІСѓРµС‚ */
      return;
    }
    interp_block();
  }
}

/* Р’С‹РїРѕР»РЅРµРЅРёРµ С†РёРєР»Р° while. */
void exec_while(void)
{
  int cond;
  char *temp;

  putback();
  temp = prog;  /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ Р°РґСЂРµСЃР° РЅР°С‡Р°Р»Р° С†РёРєР»Р° while */
  get_token();
  eval_exp(&cond);  /* РІС‹С‡РёСЃР»РµРЅРёРµ СѓРїСЂР°РІР»СЏСЋС‰РµРіРѕ РІС‹СЂР°Р¶РµРЅРёСЏ */
  if(cond) interp_block();  /* РµСЃР»Рё РѕРЅРѕ РёСЃС‚РёРЅРЅРѕ, С‚Рѕ РІС‹РїРѕР»РЅРёС‚СЊ
                               РёРЅС‚РµСЂРїСЂРёС‚Р°С†РёСЋ */
  else {  /* РІ РїСЂРѕС‚РёРІРЅРѕРј СЃР»СѓС‡Р°Рµ С†РёРєР» РїСЂРѕРїСѓСЃРєР°РµС‚СЃСЏ */
    find_eob();
    return;
  }
  prog = temp;  /* РІРѕР·РІСЂР°С‚ Рє РЅР°С‡Р°Р»Сѓ С†РёРєР»Р° */
}

/* Р’С‹РїРѕР»РЅРµРЅРёРµ С†РёРєР»Р° do. */
void exec_do(void)
{
  int cond;
  char *temp;

  putback();
  temp = prog;  /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ Р°РґСЂРµСЃР° РЅР°С‡Р°Р»Р° С†РёРєР»Р° */

  get_token(); /* РЅР°Р№С‚Рё РЅР°С‡Р°Р»Рѕ С†РёРєР»Р° */
  interp_block(); /* РёРЅС‚РµСЂРїСЂРёС‚Р°С†РёСЏ С†РёРєР»Р° */
  get_token();
  if(tok != WHILE) sntx_err(WHILE_EXPECTED);
  eval_exp(&cond); /* РїСЂРѕРІРµСЂРєР° СѓСЃР»РѕРІРёСЏ С†РёРєР»Р° */
  if(cond) prog = temp; /* РµСЃР»Рё СѓСЃР»РѕРІРёРµ РёСЃС‚РёРЅРЅРѕ,
  С‚Рѕ С†РёРєР» РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ, РІ РїСЂРѕС‚РёРІРЅРѕРј СЃР»СѓС‡Р°Рµ РїСЂРѕРёСЃС…РѕРґРёС‚
  РІС‹С…РѕРґ РёР· С†РёРєР»Р° */
}

/* РџРѕРёСЃРє РєРѕРЅС†Р° Р±Р»РѕРєР°. */
void find_eob(void)
{
  int brace;

  get_token();
  brace = 1;
  do {
    get_token();
    if(*token == '{') brace++;
    else if(*token == '}') brace--;
  } while(brace);
}

/* Р’С‹РїРѕР»РЅРµРЅРёРµ С†РёРєР»Р° for. */
void exec_for(void)
{
  int cond;
  char *temp, *temp2;
  int brace ;

  get_token();
  eval_exp(&cond);  /* РёРЅРёС†РёР°Р»РёР·РёСЂСѓСЋС‰РµРµ РІС‹СЂР°Р¶РµРЅРёРµ */
  if(*token != ';') sntx_err(SEMI_EXPECTED);
  prog++; /* РїСЂРѕРїСѓСЃРє ; */
  temp = prog;
  for(;;) {
    eval_exp(&cond);  /* РїСЂРѕРІРµСЂРєР° СѓСЃР»РѕРІРёСЏ */
    if(*token != ';') sntx_err(SEMI_EXPECTED);
    prog++; /* РїСЂРѕРїСѓСЃРє ; */
    temp2 = prog;

    /* РїРѕРёСЃРє РЅР°С‡Р°Р»Р° С‚РµР»Р° С†РёРєР»Р° */
    brace = 1;
    while(brace) {
      get_token();
      if(*token == '(') brace++;
      if(*token == ')') brace--;
    }

    if(cond) interp_block();  /* РµСЃР»Рё СѓСЃР»РѕРІРёРµ РІС‹РїРѕР»РЅРµРЅРѕ,
                                 С‚Рѕ РІС‹РїРѕР»РЅРёС‚СЊ РёРЅС‚РµСЂРїСЂРёС‚Р°С†РёСЋ */
    else {  /* РІ РїСЂРѕС‚РёРІРЅРѕРј СЃР»СѓС‡Р°Рµ РѕР±РѕР№С‚Рё С†РёРєР» */
      find_eob();
      return;
    }
    prog = temp2;
    eval_exp(&cond); /* РІРїРѕР»РЅРµРЅРёРµ РёРЅРєСЂРµРјРµРЅС‚Р° */
    prog = temp;  /* РІРѕР·РІСЂР°С‚ РІ РЅР°С‡Р°Р»Рѕ С†РёРєР»Р° */
  }
}
</PRE>
<H2>РћР±СЂР°Р±РѕС‚РєР° Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…</H2>
<P class="tj">РљРѕРіРґР° РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂ РІСЃС‚СЂРµС‡Р°РµС‚ Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅС‹Рµ СЃР»РѕРІР° <KBD>int</KBD> РёР»Рё <KBD>char</KBD>, РѕРЅ РІС‹Р·С‹РІР°РµС‚ С„СѓРЅРєС†РёСЋ <KBD>decl_local()</KBD>, РєРѕС‚РѕСЂР°СЏ СЂР°Р·РјРµС‰Р°РµС‚ Р»РѕРєР°Р»СЊРЅС‹Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ. РљР°Рє РѕС‚РјРµС‡Р°Р»РѕСЃСЊ СЂР°РЅРµРµ, РїСЂРё РІС‹РїРѕР»РЅРµРЅРёРё РїСЂРѕРіСЂР°РјРјС‹ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂ РЅРµ РјРѕР¶РµС‚ РІСЃС‚СЂРµС‚РёС‚СЊ РѕР±СЉСЏРІР»РµРЅРёРµ РіР»РѕР±Р°Р»СЊРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№, РїРѕС‚РѕРјСѓ С‡С‚Рѕ РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ С‚РѕР»СЊРєРѕ РєРѕРґ РїСЂРѕРіСЂР°РјРјС‹, Р·Р°РїРёСЃР°РЅРЅС‹Р№ РІРЅСѓС‚СЂРё С„СѓРЅРєС†РёР№. РЎР»РµРґРѕРІР°С‚РµР»СЊРЅРѕ, РµСЃР»Рё РІСЃС‚СЂРµС‚РёР»РѕСЃСЊ РѕР±СЉСЏРІР»РµРЅРёРµ РїРµСЂРµРјРµРЅРЅРѕР№, С‚Рѕ СЌС‚Рѕ Р»РѕРєР°Р»СЊРЅР°СЏ РїРµСЂРµРјРµРЅРЅР°СЏ (РёР»Рё РїР°СЂР°РјРµС‚СЂ вЂ” СЌС‚РѕС‚ СЃР»СѓС‡Р°Р№ Р±СѓРґРµС‚ СЂР°СЃСЃРјРѕС‚СЂРµРЅ РІ СЃР»РµРґСѓСЋС‰РµРј СЂР°Р·РґРµР»Рµ). Р’ СЃС‚СЂСѓРєС‚СѓСЂРёСЂРѕРІР°РЅРЅС‹С… СЏР·С‹РєР°С… Р»РѕРєР°Р»СЊРЅС‹Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ С…СЂР°РЅСЏС‚СЃСЏ РІ СЃС‚РµРєРµ. Р•СЃР»Рё РїСЂРѕРіСЂР°РјРјР° РєРѕРјРїРёР»РёСЂСѓРµС‚СЃСЏ, С‚Рѕ РѕР±С‹С‡РЅРѕ РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ СЃРёСЃС‚РµРјРЅС‹Р№ СЃС‚РµРє. РћРґРЅР°РєРѕ РїСЂРё РёРЅС‚РµСЂРїСЂРµС‚Р°С†РёРё СЃС‚РµРє СЃ Р»РѕРєР°Р»СЊРЅС‹РјРё РїРµСЂРµРјРµРЅРЅС‹РјРё РґРѕР»Р¶РµРЅ Р±С‹С‚СЊ СЃРѕР·РґР°РЅ СЃР°РјРёРј РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂРѕРј. Р’ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂРµ Little РЎ СЃС‚РµРє РґР»СЏ Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… С…СЂР°РЅРёС‚СЃСЏ РІ РјР°СЃСЃРёРІРµ <KBD>local_var_stack</KBD>. РљР°Р¶РґС‹Р№ СЂР°Р·, РєРѕРіРґР° РІСЃС‚СЂРµС‡Р°РµС‚СЃСЏ Р»РѕРєР°Р»СЊРЅР°СЏ РїРµСЂРµРјРµРЅРЅР°СЏ, РµРµ РёРјСЏ, С‚РёРї Рё Р·РЅР°С‡РµРЅРёРµ (РїРµСЂРІРѕРЅР°С‡Р°Р»СЊРЅРѕ СЂР°РІРЅРѕРµ РЅСѓР»СЋ) Р·Р°РЅРѕСЃСЏС‚СЃСЏ РІ СЃС‚РµРє РїСЂРё РїРѕРјРѕС‰Рё С„СѓРЅРєС†РёРё <KBD>local_push()</KBD>. Р“Р»РѕР±Р°Р»СЊРЅР°СЏ РїРµСЂРµРјРµРЅРЅР°СЏ <KBD>lvartos</KBD> СЏРІР»СЏРµС‚СЃСЏ СѓРєР°Р·Р°С‚РµР»РµРј СЃС‚РµРєР°. (РЎРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰РµР№ С„СѓРЅРєС†РёРё РёР·РІР»РµС‡РµРЅРёСЏ РёР· СЃС‚РµРєР° РЅРµС‚. Р’РјРµСЃС‚Рѕ СЌС‚РѕРіРѕ СЃС‚РµРє Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… РїРµСЂРµСѓСЃС‚Р°РЅР°РІР»РёРІР°РµС‚СЃСЏ РєР°Р¶РґС‹Р№ СЂР°Р· РїСЂРё РІРѕР·РІСЂР°С‚Рµ СѓРїСЂР°РІР»РµРЅРёСЏ РёР· С„СѓРЅРєС†РёРё <KBD>local_push()</KBD>. Р—Р°С‡РµРј СЌС‚Рѕ СЃРґРµР»Р°РЅРѕ, Р±СѓРґРµС‚ РІРёРґРЅРѕ РёР· РґР°Р»СЊРЅРµР№С€РµРіРѕ РёР·Р»РѕР¶РµРЅРёСЏ.) Р¤СѓРЅРєС†РёРё <KBD>decl_local()</KBD> Рё <KBD>lРѕcal_push()</KBD> РїСЂРёРІРµРґРµРЅС‹ РЅРёР¶Рµ:
<PRE>
/* РћР±СЉСЏРІР»РµРЅРёРµ Р»РѕРєР°Р»СЊРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№. */
void decl_local(void)
{
  struct var_type i;

  get_token();  /* РѕРїСЂРµРґРµР»РµРЅРёРµ С‚РёРїР° */

  i.v_type = tok;
  i.value = 0;  /* РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ РЅСѓР»РµРј */

  do { /* РѕР±СЂР°Р±РѕС‚РєР° СЃРїРёСЃРєР° */
    get_token(); /* РѕРїСЂРµРґРµР»РµРЅРёРµ С‚РёРїР° РїСЂРµРјРµРЅРЅРѕР№ */
    strcpy(i.var_name, token);
    local_push(i);
    get_token();
  } while(*token == ',');
  if(*token != ';') sntx_err(SEMI_EXPECTED);
}

/* Р—Р°С‚РѕР»РєРЅСѓС‚СЊ Р»РѕРєР°Р»СЊРЅСѓСЋ РїРµСЂРµРјРµРЅРЅСѓСЋ. */
void local_push(struct var_type i)
{
  if(lvartos &gt; NUM_LOCAL_VARS)
    sntx_err(TOO_MANY_LVARS);

  local_var_stack[lvartos] = i;
  lvartos++;
}
</PRE>
<P class="tj">Р¤СѓРЅРєС†РёСЏ <KBD>decl_local()</KBD> СЃРЅР°С‡Р°Р»Р° СЃС‡РёС‚С‹РІР°РµС‚ С‚РёРї РѕР±СЉСЏРІР»РµРЅРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№ (РёР»Рё РїРµСЂРµРјРµРЅРЅС‹С…) Рё РёРЅРёС†РёР°Р»РёР·РёСЂСѓРµС‚ РїРµСЂРµРјРµРЅРЅС‹Рµ РЅСѓР»СЏРјРё. Р—Р°С‚РµРј РІ С†РёРєР»Рµ СЃС‡РёС‚С‹РІР°РµС‚СЃСЏ СЃРїРёСЃРѕРє РёРґРµРЅС‚РёС„РёРєР°С‚РѕСЂРѕРІ, СЂР°Р·РґРµР»РµРЅРЅС‹С… Р·Р°РїСЏС‚С‹РјРё. РџСЂРё РєР°Р¶РґРѕР№ РёС‚РµСЂР°С†РёРё С†РёРєР»Р° РёРЅС„РѕСЂРјР°С†РёСЏ РѕР± РѕС‡РµСЂРµРґРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№ Р·Р°РЅРѕСЃРёС‚СЃСЏ РІ СЃС‚РµРє Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…. Р’ РєРѕРЅС†Рµ С„СѓРЅРєС†РёРё <KBD>decl_local()</KBD> РїСЂРѕРІРµСЂСЏРµС‚СЃСЏ, СЏРІР»СЏРµС‚СЃСЏ Р»Рё РїРѕСЃР»РµРґРЅСЏСЏ Р»РµРєСЃРµРјР° С‚РѕС‡РєРѕР№ СЃ Р·Р°РїСЏС‚РѕР№.
<H2>Р’С‹Р·РѕРІ С„СѓРЅРєС†РёР№, РѕРїСЂРµРґРµР»РµРЅРЅС‹С… РїРѕР»СЊР·РѕРІР°С‚РµР»РµРј</H2>
<P class="tj">Р’С‹РїРѕР»РЅРµРЅРёРµ С„СѓРЅРєС†РёР№, РѕРїСЂРµРґРµР»РµРЅРЅС‹С… РїРѕР»СЊР·РѕРІР°С‚РµР»РµРј, вЂ” СЌС‚Рѕ, РЅР°РІРµСЂРЅРѕРµ, СЃР°РјР°СЏ С‚СЂСѓРґРЅР°СЏ С‡Р°СЃС‚СЊ РІ СЂРµР°Р»РёР·Р°С†РёРё РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР° РЎ. РРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂ РґРѕР»Р¶РµРЅ РЅР°С‡Р°С‚СЊ С‡С‚РµРЅРёРµ РёСЃС…РѕРґРЅРѕРіРѕ С‚РµРєСЃС‚Р° РїСЂРѕРіСЂР°РјРјС‹ СЃ РЅРѕРІРѕРіРѕ РјРµСЃС‚Р°, Р° Р·Р°С‚РµРј РІРµСЂРЅСѓС‚СЊСЃСЏ РІ РІС‹Р·С‹РІР°СЋС‰СѓСЋ РїСЂРѕС†РµРґСѓСЂСѓ РїРѕСЃР»Рµ РІС‹С…РѕРґР° РёР· С„СѓРЅРєС†РёРё. РљСЂРѕРјРµ С‚РѕРіРѕ, РѕРЅ РґРѕР»Р¶РµРЅ РІС‹РїРѕР»РЅРёС‚СЊ СЃР»РµРґСѓСЋС‰РёРµ С‚СЂРё Р·Р°РґР°С‡Рё: РїРµСЂРµРґР°С‚СЊ Р°СЂРіСѓРјРµРЅС‚С‹, СЂР°Р·РјРµСЃС‚РёС‚СЊ РІ РїР°РјСЏС‚Рё РїР°СЂР°РјРµС‚СЂС‹ Рё РІРµСЂРЅСѓС‚СЊ Р·РЅР°С‡РµРЅРёРµ С„СѓРЅРєС†РёРё.
<P class="tj">Р’СЃРµ РІС‹Р·РѕРІС‹ С„СѓРЅРєС†РёР№ (РєСЂРѕРјРµ <KBD>main()</KBD>) РѕСЃСѓС‰РµСЃС‚РІР»СЏСЋС‚СЃСЏ РІ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРѕРј Р°РЅР°Р»РёР·Р°С‚РѕСЂРµ РІС‹СЂР°Р¶РµРЅРёР№ РёР· С„СѓРЅРєС†РёРё <KBD>atom()</KBD> СЃ РїРѕРјРѕС‰СЊСЋ РІС‹Р·РѕРІР° С„СѓРЅРєС†РёРё <KBD>call()</KBD>. РРјРµРЅРЅРѕ С„СѓРЅРєС†РёСЏ <KBD>call()</KBD> РІС‹РїРѕР»РЅСЏРµС‚ РІСЃРµ РЅРµРѕР±С…РѕРґРёРјС‹Рµ РїСЂРё РІС‹Р·РѕРІРµ С„СѓРЅРєС†РёР№ РґРµР№СЃС‚РІРёСЏ. РўРµРєСЃС‚ С„СѓРЅРєС†РёРё <KBD>call()</KBD> РІРјРµСЃС‚Рµ СЃ РµРµ РІСЃРїРѕРјРѕРіР°С‚РµР»СЊРЅС‹РјРё С„СѓРЅРєС†РёСЏРјРё РїСЂРёРІРµРґРµРЅ РЅРёР¶Рµ. Р Р°СЃСЃРјРѕС‚СЂРёРј СЌС‚Сѓ С„СѓРЅРєС†РёСЋ РїРѕРґСЂРѕР±РЅРµРµ:
<PRE>
/* Р’С‹Р·РѕРІ С„СѓРЅРєС†РёРё. */
void call(void)
{
  char *loc, *temp;
  int lvartemp;

  loc = find_func(token); /* РЅР°Р№С‚Рё С‚РѕС‡РєСѓ РІС…РѕРґР° С„СѓРЅРєС†РёРё */
  if(loc == NULL)
    sntx_err(FUNC_UNDEF); /* С„СѓРЅРєС†РёСЏ РЅРµ РѕРїСЂРµРґРµР»РµРЅР° */
  else {
    lvartemp = lvartos;  /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ РёРЅРґРµРєСЃР° СЃС‚РµРєР°
                            Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */
    get_args();  /* РїРѕР»СѓС‡РµРЅРёРµ Р°СЂРіСѓРјРµРЅС‚Р° С„СѓРЅРєС†РёРё */
    temp = prog; /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ Р°РґСЂРµСЃР° РІРѕР·РІСЂР°С‚Р° */
    func_push(lvartemp);  /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ РёРЅРґРµРєСЃР° СЃС‚РµРєР°
                             Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */
    prog = loc;  /* РїРµСЂРµСѓСЃС‚Р°РЅРѕРІРєР° prog РІ РЅР°С‡Р°Р»Рѕ С„СѓРЅРєС†РёРё */
    get_params(); /* Р·Р°РіСЂСѓР·РєР° РїР°СЂР°РјРµС‚СЂРѕРІ С„СѓРЅРєС†РёРё
                     Р·РЅР°С‡РµРЅРёСЏРјРё Р°СЂРіСѓРјРµРЅС‚РѕРІ */
    interp_block(); /* РёРЅС‚РµСЂРїСЂРµС‚Р°С†РёСЏ С„СѓРЅРєС†РёРё */
    prog = temp; /* РІРѕСЃСЃС‚Р°РЅРѕРІР»РµРЅРёРµ prog */
    lvartos = func_pop(); /* РІРѕСЃСЃС‚Р°РЅРѕРІР»РµРЅРёРµ СЃС‚РµРєР°
                             Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */
  }
}

/* Р—Р°С‚Р°Р»РєРёРІР°РЅРёРµ Р°СЂРіСѓРјРµРЅС‚РѕРІ С„СѓРЅРєС†РёР№ РІ СЃС‚РµРє
   Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…. */
void get_args(void)
{
  int value, count, temp[NUM_PARAMS];
  struct var_type i;

  count = 0;
  get_token();
  if(*token != '(') sntx_err(PAREN_EXPECTED);

  /* РѕР±СЂР°Р±РѕС‚РєР° СЃРїРёСЃРєР° Р·РЅР°С‡РµРЅРёР№ */
  do {
    eval_exp(&value);
    temp[count] = value;  /* РІСЂРµРјРµРЅРЅРѕРµ Р·Р°РїРѕРјРёРЅР°РЅРёРµ */
    get_token();
    count++;
  }while(*token == ',');
  count--;
  /* Р·Р°С‚РѕР»РєРЅСѓС‚СЊ РІ local_var_stack РІ РѕР±СЂР°С‚РЅРѕРј РїРѕСЂСЏРґРєРµ */
  for(; count&gt;=0; count--) {
    i.value = temp[count];
    i.v_type = ARG;
    local_push(i);
  }
}

/* РџРѕР»СѓС‡РµРЅРёРµ РїР°СЂР°РјРµС‚СЂРѕРІ С„СѓРЅРєС†РёРё. */
void get_params(void)
{
  struct var_type *p;
  int i;

  i = lvartos-1;
  do { /* РѕР±СЂР°Р±РѕС‚РєР° СЃРїРёСЃРєР° РїР°СЂР°РјРµС‚СЂРѕРІ */
    get_token();
    p = &local_var_stack[i];
    if(*token != ')' ) {
      if(tok != INT && tok != CHAR)
        sntx_err(TYPE_EXPECTED);

      p-&gt;v_type = token_type;
      get_token();

      /* СЃРІСЏР·С‹РІР°РЅРёРµ РёРјРµРЅРё РїРµСЂР°РјРµС‚СЂРѕРІ СЃ Р°СЂРіСѓРјРµРЅС‚РѕРј,
         СѓР¶Рµ РЅР°С…РѕРґСЏС‰РёРјСЃСЏ РІ СЃС‚РµРєРµ Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */
      strcpy(p-&gt;var_name, token);
      get_token();
      i--;
    }
    else break;
  } while(*token == ',');
  if(*token != ')') sntx_err(PAREN_EXPECTED);
}
</PRE>
<P class="tj">Р’ РїРµСЂРІСѓСЋ РѕС‡РµСЂРµРґСЊ СЃ РїРѕРјРѕС‰СЊСЋ РІС‹Р·РѕРІР° С„СѓРЅРєС†РёРё <KBD>find_func()</KBD> С„СѓРЅРєС†РёСЏ <KBD>call()</KBD> РЅР°С…РѕРґРёС‚ Р°РґСЂРµСЃ С‚РѕС‡РєРё РІС…РѕРґР° РІС‹Р·С‹РІР°РµРјРѕР№ С„СѓРЅРєС†РёРё РІ РёСЃС…РѕРґРЅРѕРј С‚РµРєСЃС‚Рµ РїСЂРѕРіСЂР°РјРјС‹. Р—Р°С‚РµРј СЌС‚Р° С„СѓРЅРєС†РёСЏ СЃРѕС…СЂР°РЅСЏРµС‚ С‚РµРєСѓС‰РµРµ Р·РЅР°С‡РµРЅРёРµ <KBD>lvartos</KBD> РёРЅРґРµРєСЃР° СЃС‚РµРєР° Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… РІ РїРµСЂРµРјРµРЅРЅРѕР№ <KBD>lvartemp</KBD>. РџРѕС‚РѕРј РѕРЅР° РІС‹Р·С‹РІР°РµС‚ С„СѓРЅРєС†РёСЋ <KBD>get_args()</KBD>, РєРѕС‚РѕСЂР°СЏ РѕР±СЂР°Р±Р°С‚С‹РІР°РµС‚ РІСЃРµ Р°СЂРіСѓРјРµРЅС‚С‹ С„СѓРЅРєС†РёРё. Р¤СѓРЅРєС†РёСЏ <KBD>get_args()</KBD> СЃС‡РёС‚С‹РІР°РµС‚ СЃРїРёСЃРѕРє РІС‹СЂР°Р¶РµРЅРёР№, СЂР°Р·РґРµР»РµРЅРЅС‹С… Р·Р°РїСЏС‚С‹РјРё, Рё Р·Р°РЅРѕСЃРёС‚ РёС… РІ СЃС‚РµРє Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… РІ РѕР±СЂР°С‚РЅРѕРј РїРѕСЂСЏРґРєРµ. (РћР±СЂР°С‚РЅС‹Р№ РїРѕСЂСЏРґРѕРє Р·Р°РЅРµСЃРµРЅРёСЏ РїРµСЂРµРјРµРЅРЅС‹С… РїСЂРёРјРµРЅСЏРµС‚СЃСЏ РїРѕС‚РѕРјСѓ, С‡С‚Рѕ С‚Р°Рє РёС… Р»РµРіС‡Рµ СЃРѕРїРѕСЃС‚Р°РІР»СЏС‚СЊ СЃ СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰РёРјРё РїР°СЂР°РјРµС‚СЂР°РјРё.) Р—РЅР°С‡РµРЅРёСЏ РїРµСЂРµРјРµРЅРЅС‹С…, Р·Р°РїРёСЃР°РЅРЅС‹Рµ РІ СЃС‚РµРє, РЅРµ РёРјРµСЋС‚ РёРјРµРЅ (СЃС‚РµРє вЂ” СЌС‚Рѕ РІСЃРµРіРѕ Р»РёС€СЊ РјР°СЃСЃРёРІ). РРјРµРЅР° РїР°СЂР°РјРµС‚СЂРѕРІ РґР°СЋС‚СЃСЏ РёРј С„СѓРЅРєС†РёРµР№ <KBD>get_params()</KBD>, РєРѕС‚РѕСЂР°СЏ Р±СѓРґРµС‚ СЂР°СЃСЃРјРѕС‚СЂРµРЅР° РґР°Р»РµРµ.
<P class="tj">РџРѕСЃР»Рµ РѕР±СЂР°Р±РѕС‚РєРё Р°СЂРіСѓРјРµРЅС‚РѕРІ С„СѓРЅРєС†РёРё С‚РµРєСѓС‰РµРµ Р·РЅР°С‡РµРЅРёРµ СѓРєР°Р·Р°С‚РµР»СЏ <KBD>prog</KBD> СЃРѕС…СЂР°РЅСЏРµС‚СЃСЏ РІ <KBD>temp</KBD>. Р­С‚Р° РїРµСЂРµРјРµРЅРЅР°СЏ СѓРєР°Р·С‹РІР°РµС‚ РЅР° С‚РѕС‡РєСѓ РІРѕР·РІСЂР°С‚Р° С„СѓРЅРєС†РёРё. РџРѕСЃР»Рµ СЌС‚РѕРіРѕ Р·РЅР°С‡РµРЅРёРµ <KBD>lvartemp</KBD> Р·Р°РЅРѕСЃРёС‚СЃСЏ РІ СЃС‚РµРє РІС‹Р·РѕРІР° С„СѓРЅРєС†РёР№. Р”РѕСЃС‚СѓРї Рє СЌС‚РѕРјСѓ СЃС‚РµРєСѓ РѕСЃСѓС‰РµСЃС‚РІР»СЏРµС‚СЃСЏ СЃ РїРѕРјРѕС‰СЊСЋ С„СѓРЅРєС†РёР№ <KBD>func_push()</KBD> Рё <KBD>func_pop()</KBD>. Р’ РґР°РЅРЅС‹Р№ СЃС‚РµРє РїСЂРё РєР°Р¶РґРѕРј РІС‹Р·РѕРІРµ С„СѓРЅРєС†РёРё Р·Р°РїРёСЃС‹РІР°РµС‚СЃСЏ Р·РЅР°С‡РµРЅРёРµ <KBD>lvartos</KBD>. Р—РЅР°С‡РµРЅРёРµ <KBD>lvartos</KBD> РїСЂРµРґСЃС‚Р°РІР»СЏРµС‚ СЃРѕР±РѕР№ РЅР°С‡Р°Р»СЊРЅСѓСЋ С‚РѕС‡РєСѓ РІ СЃС‚РµРєРµ Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… РґР»СЏ РїРµСЂРµРјРµРЅРЅС‹С… (Рё РїР°СЂР°РјРµС‚СЂРѕРІ) РІС‹Р·РІР°РЅРЅРѕР№ С„СѓРЅРєС†РёРё. Р—РЅР°С‡РµРЅРёРµ РЅР° РІРµСЂС€РёРЅРµ СЃС‚РµРєР° РІС‹Р·РѕРІР° С„СѓРЅРєС†РёР№ РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РґР»СЏ РїСЂРµРґРѕС‚РІСЂР°С‰РµРЅРёСЏ РґРѕСЃС‚СѓРїР° С„СѓРЅРєС†РёРё Рє РїРµСЂРµРјРµРЅРЅС‹Рј, РєРѕС‚РѕСЂС‹Рµ РІ РЅРµР№ РЅРµ РѕР±СЉСЏРІР»РµРЅС‹.
<P class="tj">РЎР»РµРґСѓСЋС‰РёРµ РґРІРµ СЃС‚СЂРѕРєРё С„СѓРЅРєС†РёРё <KBD>call()</KBD> СѓСЃС‚Р°РЅР°РІР»РёРІР°СЋС‚ СѓРєР°Р·Р°С‚РµР»СЊ РїСЂРѕРіСЂР°РјРјС‹ РЅР° РЅР°С‡Р°Р»Рѕ С„СѓРЅРєС†РёРё Рё Р·Р°С‚РµРј, РІС‹Р·С‹РІР°СЏ С„СѓРЅРєС†РёСЋ <KBD>get_params()</KBD>, СѓСЃС‚Р°РЅР°РІР»РёРІР°СЋС‚ СЃРѕРѕС‚РІРµС‚СЃС‚РІРёРµ РјРµР¶РґСѓ С„РѕСЂРјР°Р»СЊРЅС‹РјРё РїР°СЂР°РјРµС‚СЂР°РјРё Рё Р·РЅР°С‡РµРЅРёСЏРјРё Р°СЂРіСѓРјРµРЅС‚РѕРІ С„СѓРЅРєС†РёРё, РєРѕС‚РѕСЂС‹Рµ СѓР¶Рµ РЅР°С…РѕРґСЏС‚СЃСЏ РІ СЃС‚РµРєРµ Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…. Р¤Р°РєС‚РёС‡РµСЃРєРѕРµ РІС‹РїРѕР»РЅРµРЅРёРµ С„СѓРЅРєС†РёРё РѕСЃСѓС‰РµСЃС‚РІР»СЏРµС‚СЃСЏ РІС‹Р·РѕРІРѕРј <KBD>interp_block()</KBD>. РџРѕСЃР»Рµ РІРѕР·РІСЂР°С‚Р° СѓРїСЂР°РІР»РµРЅРёСЏ РёР· <KBD>interp_block()</KBD> СѓРєР°Р·Р°С‚РµР»СЊ РїСЂРѕРіСЂР°РјРјС‹ <KBD>prog</KBD> РїРµСЂРµСѓСЃС‚Р°РЅР°РІР»РёРІР°РµС‚СЃСЏ; РѕРЅ Р±СѓРґРµС‚ СѓРєР°Р·С‹РІР°С‚СЊ РЅР° С‚РѕС‡РєСѓ РІРѕР·РІСЂР°С‚Р°, Р° РёРЅРґРµРєСЃ СЃС‚РµРєР° Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… РїРѕР»СѓС‡РёС‚ Р·РЅР°С‡РµРЅРёРµ, РєРѕС‚РѕСЂРѕРµ РѕРЅ РёРјРµР» РґРѕ РІС‹Р·РѕРІР° С„СѓРЅРєС†РёРё. РќР° СЌС‚РѕРј РїРѕСЃР»РµРґРЅРµРј С€Р°РіРµ РёР· СЃС‚РµРєР° С„Р°РєС‚РёС‡РµСЃРєРё СѓРґР°Р»СЏСЋС‚СЃСЏ РІСЃРµ Р»РѕРєР°Р»СЊРЅС‹Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ С„СѓРЅРєС†РёРё.
<P class="tj">Р•СЃР»Рё РІС‹Р·РІР°РЅРЅР°СЏ С„СѓРЅРєС†РёСЏ СЃРѕРґРµСЂР¶РёС‚ РѕРїРµСЂР°С‚РѕСЂ <KBD>return</KBD>, С‚Рѕ <KBD>interp_block()</KBD> РїРµСЂРµРґ РІРѕР·РІСЂР°С‚РѕРј РІ <KBD>call()</KBD> РІС‹Р·С‹РІР°РµС‚ <KBD>func_ret()</KBD>, РєРѕС‚РѕСЂР°СЏ РІС‹С‡РёСЃР»СЏРµС‚ РІРѕР·РІСЂР°С‰Р°РµРјРѕРµ Р·РЅР°С‡РµРЅРёРµ; РєРѕРґ СЌС‚РѕР№ С„СѓРЅРєС†РёРё РїСЂРёРІРµРґРµРЅ РЅРёР¶Рµ:
<PRE>
/* Р’РѕР·РІСЂР°С‚ РёР· С„СѓРЅРєС†РёРё. */
void func_ret(void)
{
  int value;

  value = 0;
  /* РїРѕР»СѓС‡РµРЅРёРµ РІРѕР·РІСЂР°С‰Р°РµРјРѕРіРѕ Р·РЅР°С‡РµРЅРёСЏ, РµСЃР»Рё РѕРЅРѕ РµСЃС‚СЊ */
  eval_exp(&value);

  ret_value = value;
}
</PRE>
<P class="tj">Р“Р»РѕР±Р°Р»СЊРЅР°СЏ С†РµР»РѕС‡РёСЃР»РµРЅРЅР°СЏ РїРµСЂРµРјРµРЅРЅР°СЏ <KBD>ret_value</KBD> СЃРѕРґРµСЂР¶РёС‚ РІРѕР·РІСЂР°С‰Р°РµРјРѕРµ С„СѓРЅРєС†РёРµР№ Р·РЅР°С‡РµРЅРёРµ. РќР° РїРµСЂРІС‹Р№ РІР·РіР»СЏРґ РјРѕР¶РµС‚ РїРѕРєР°Р·Р°С‚СЊСЃСЏ СЃС‚СЂР°РЅРЅС‹Рј С‚Рѕ, С‡С‚Рѕ Р»РѕРєР°Р»СЊРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№ <KBD>value</KBD> СЃРЅР°С‡Р°Р»Р° РїСЂРёСЃРІР°РёРІР°РµС‚СЃСЏ РІРѕР·РІСЂР°С‰Р°РµРјРѕРµ Р·РЅР°С‡РµРЅРёРµ С„СѓРЅРєС†РёРё, Р° Р·Р°С‚РµРј СЌС‚Рѕ Р·РЅР°С‡РµРЅРёРµ РїСЂРёСЃРІР°РёРІР°РµС‚СЃСЏ РїРµСЂРµРјРµРЅРЅРѕР№ <KBD>ret_value</KBD>. РџСЂРёС‡РёРЅР° Р·РґРµСЃСЊ РІ С‚РѕРј, С‡С‚Рѕ С„СѓРЅРєС†РёРё РјРѕРіСѓС‚ Р±С‹С‚СЊ СЂРµРєСѓСЂСЃРёРІРЅС‹РјРё Рё С„СѓРЅРєС†РёСЏ <KBD>eval_exp()</KBD> РґР»СЏ РІС‹С‡РёСЃР»РµРЅРёСЏ РІРѕР·РІСЂР°С‰Р°РµРјРѕРіРѕ Р·РЅР°С‡РµРЅРёСЏ РјРѕР¶РµС‚ РІС‹Р·РІР°С‚СЊ С‚Сѓ Р¶Рµ С„СѓРЅРєС†РёСЋ.
<H2>РџСЂРёСЃРІР°РёРІР°РЅРёРµ Р·РЅР°С‡РµРЅРёР№ РїРµСЂРµРјРµРЅРЅС‹Рј</H2>
<P class="tj">Р’РѕР·РІСЂР°С‚РёРјСЃСЏ РЅРµРЅР°РґРѕР»РіРѕ Рє СЃРёРЅС‚Р°РєСЃРёС‡РµЃРєРѕРјСѓ Р°РЅР°Р»РёР·Р°С‚РѕСЂСѓ РІС‹СЂР°Р¶РµРЅРёР№. РљРѕРіРґР° РІСЃС‚СЂРµС‡Р°РµС‚СЃСЏ РѕРїРµСЂР°С‚РѕСЂ РїСЂРёСЃРІР°РёРІР°РЅРёСЏ, С‚Рѕ СЃРЅР°С‡Р°Р»Р° РІС‹С‡РёСЃР»СЏРµС‚СЃСЏ Р·РЅР°С‡РµРЅРёРµ РІС‹СЂР°Р¶РµРЅРёСЏ РІ РїСЂР°РІРѕР№ С‡Р°СЃС‚Рё, Р° Р·Р°С‚РµРј СЌС‚Рѕ Р·РЅР°С‡РµРЅРёРµ РїСЂРёСЃРІР°РёРІР°РµС‚СЃСЏ РїРµСЂРµРјРµРЅРЅРѕР№ РІ Р»РµРІРѕР№ С‡Р°СЃС‚Рё РїСѓС‚РµРј РІС‹Р·РѕРІР° <KBD>assign_var()</KBD>. РћРґРЅР°РєРѕ СЏР·С‹Рє РЎ СЃС‚СЂСѓРєС‚СѓСЂРёСЂРѕРІР°РЅ Рё РїРѕРґРґРµСЂР¶РёРІР°РµС‚ РіР»РѕР±Р°Р»СЊРЅС‹Рµ Рё Р»РѕРєР°Р»СЊРЅС‹Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ. РљР°Рє Р¶Рµ С‚РѕРіРґР° РІ СЃР»РµРґСѓСЋС‰РµР№ РїСЂРѕРіСЂР°РјРјРµ
<PRE>
int count;

int main()
{
  int count, i;
  
  count = 10;
  
  i = f();
  
  return 0;
}

int f()
{
  int count;
  count = 99;
  return count;
}
</PRE>
<P class="t">С„СѓРЅРєС†РёСЏ <KBD>assign_var()</KBD> Р·РЅР°РµС‚, РєР°РєРѕР№ РёРјРµРЅРЅРѕ РїРµСЂРµРјРµРЅРЅРѕР№ <KBD>count</KBD> РЅСѓР¶РЅРѕ РїСЂРёСЃРІРѕРёС‚СЊ Р·РЅР°С‡РµРЅРёРµ? РћС‚РІРµС‚ РЅР° СЌС‚Рѕ РїСЂРѕСЃС‚РѕР№: РІРѕ-РїРµСЂРІС‹С…, Р»РѕРєР°Р»СЊРЅС‹Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ РёРјРµСЋС‚ РїСЂРёРѕСЂРёС‚РµС‚ РЅР°Рґ РѕРґРЅРѕРёРјРµРЅРЅС‹РјРё РіР»РѕР±Р°Р»СЊРЅС‹РјРё, Р°, РІРѕ-РІС‚РѕСЂС‹С…, Р»РѕРєР°Р»СЊРЅС‹Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ РЅРµРґРѕСЃС‚СѓРїРЅС‹ Р·Р° РїСЂРµРґРµР»Р°РјРё СЃРІРѕРёС… С„СѓРЅРєС†РёР№. РџСЂРѕР°РЅР°Р»РёР·РёСЂСѓРµРј, РєР°Рє РїСЂРёРјРµРЅСЏСЋС‚СЃСЏ СЌС‚Рё РїСЂР°РІРёР»Р° РґР»СЏ СЂР°Р·СЂРµС€РµРЅРёСЏ РєРѕР»Р»РёР·РёР№ РІ РїСЂРёРІРµРґРµРЅРЅС‹С… РІС‹С€Рµ РїСЂРёРјРµСЂР°С… РѕРїРµСЂР°С‚РѕСЂРѕРІ РїСЂРёСЃРІР°РёРІР°РЅРёСЏ. Р”Р»СЏ СЌС‚РѕРіРѕ СЂР°СЃСЃРјРѕС‚СЂРёРј С„СѓРЅРєС†РёСЋ <KBD>assign_var()</KBD>:
<PRE>
/* РџСЂРёСЃРІР°РёРІР°РЅРёРµ РїРµСЂРµРјРµРЅРЅРѕР№ Р·РЅР°С‡РµРЅРёСЏ. */
void assign_var(char *var_name, int value)
{
  register int i;

  /* РїСЂРѕРІРµСЂРєР° РЅР°Р»РёС‡РёСЏ Р»РѕРєР°Р»СЊРЅРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№ */
  for(i=lvartos-1; i &gt;= call_stack[functos-1]; i--)  {
    if(!strcmp(local_var_stack[i].var_name, var_name)) {
      local_var_stack[i].value = value;
      return;
    }
  }
  if(i &lt; call_stack[functos-1])
  /* РµСЃР»Рё РїРµСЂРµРјРµРЅРЅР°СЏ РЅРµР»РѕРєР°Р»СЊРЅР°СЏ,
     РёС‰РµРј РµРµ РІ С‚Р°Р±Р»РёС†Рµ РіР»РѕР±Р°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… */
    for(i=0; i &lt; NUM_GLOBAL_VARS; i++)
      if(!strcmp(global_vars[i].var_name, var_name)) {
        global_vars[i].value = value;
        return;
      }
  sntx_err(NOT_VAR); /* РїРµСЂРµРјРµРЅРЅР°СЏ РЅРµ РЅР°Р№РґРµРЅР° */
}
</PRE>
<P class="tj">РљР°Рє СѓРєР°Р·С‹РІР°Р»РѕСЃСЊ РІ РїСЂРµРґС‹РґСѓС‰РµРј СЂР°Р·РґРµР»Рµ, РїСЂРё РєР°Р¶РґРѕРј РІС‹Р·РѕРІРµ С„СѓРЅРєС†РёРё РёРЅРґРµРєСЃ СЃС‚РµРєР° Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С… (<KBD>lvartos</KBD>) Р·Р°РїРёСЃС‹РІР°РµС‚СЃСЏ РІ СЃС‚РµРє РІС‹Р·РѕРІР° С„СѓРЅРєС†РёРё. Р­С‚Рѕ Р·РЅР°С‡РёС‚, С‡С‚Рѕ Р»СЋР±Р°СЏ Р»РѕРєР°Р»СЊРЅР°СЏ РїРµСЂРµРјРµРЅРЅР°СЏ (РёР»Рё РїР°СЂР°РјРµС‚СЂ), РѕРїСЂРµРґРµР»РµРЅРЅС‹Рµ РІ С„СѓРЅРєС†РёРё, Р±СѓРґСѓС‚ Р·Р°РїРёСЃР°РЅС‹ РІ СЃС‚РµРє РІС‹С€Рµ С‚РѕС‡РєРё, РЅР° РєРѕС‚РѕСЂСѓСЋ СѓРєР°Р·С‹РІР°РµС‚ <KBD>lvartos</KBD>. РЎР»РµРґРѕРІР°С‚РµР»СЊРЅРѕ, С„СѓРЅРєС†РёСЏ <KBD>assign_var()</KBD> РїСЂРѕСЃРјР°С‚СЂРёРІР°РµС‚ <KBD>local_var_stack</KBD>, РЅР°С‡РёРЅР°СЏ СЃ С‚РµРєСѓС‰РµРіРѕ Р·РЅР°С‡РµРЅРёСЏ РЅР° РІРµСЂС…СѓС€РєРµ СЃС‚РµРєР°, РїСЂРёС‡РµРј РїСЂРѕСЃРјРѕС‚СЂ РїСЂРµРєСЂР°С‰Р°РµС‚СЃСЏ, РєРѕРіРґР° РёРЅРґРµРєСЃ РґРѕСЃС‚РёРіР°РµС‚ С‚РѕРіРѕ Р·РЅР°С‡РµРЅРёСЏ, РєРѕС‚РѕСЂРѕРµ Р±С‹Р»Рѕ Р·Р°РЅРµСЃРµРЅРѕ РїСЂРё РїРѕСЃР»РµРґРЅРµРј РІС‹Р·РѕРІРµ С„СѓРЅРєС†РёРё. Р‘Р»Р°РіРѕРґР°СЂСЏ СЌС‚РѕРјСѓ РїСЂРѕСЃРјР°С‚СЂРёРІР°СЋС‚СЃСЏ С‚РѕР»СЊРєРѕ С‚Рµ РїРµСЂРµРјРµРЅРЅС‹Рµ, РєРѕС‚РѕСЂС‹Рµ СЏРІР»СЏСЋС‚СЃСЏ Р»РѕРєР°Р»СЊРЅС‹РјРё РґР»СЏ РґР°РЅРЅРѕР№ С„СѓРЅРєС†РёРё. (Р­С‚Рѕ С‚Р°РєР¶Рµ РїРѕРјРѕРіР°РµС‚ РІС‹Р·С‹РІР°С‚СЊ СЂРµРєСѓСЂСЃРёРІРЅС‹Рµ С„СѓРЅРєС†РёРё, РїРѕС‚РѕРјСѓ С‡С‚Рѕ С‚РµРєСѓС‰РµРµ Р·РЅР°С‡РµРЅРёРµ <KBD>lvartos</KBD> СЃРѕС…СЂР°РЅСЏРµС‚СЃСЏ РїСЂРё РєР°Р¶РґРѕРј РІС‹Р·РѕРІРµ С„СѓРЅРєС†РёРё.) РўР°РєРёРј РѕР±СЂР°Р·РѕРј, РµСЃР»Рё РІ <KBD>main()</KBD> РїСЂРёСЃСѓС‚СЃС‚РІСѓРµС‚ СЃС‚СЂРѕРєР° "<KBD>count = 100;</KBD>", С‚Рѕ <KBD>assign_var()</KBD> РЅР°С…РѕРґРёС‚ Р»РѕРєР°Р»СЊРЅСѓСЋ РїРµСЂРµРјРµРЅРЅСѓСЋ <KBD>count</KBD> РІРЅСѓС‚СЂРё <KBD>main()</KBD>. Р’ <KBD>f()</KBD> С„СѓРЅРєС†РёСЏ <KBD>assign_var()</KBD> РЅР°С…РѕРґРёС‚ РїРµСЂРµРјРµРЅРЅСѓСЋ <KBD>count</KBD>, РѕРїСЂРµРґРµР»РµРЅРЅСѓСЋ РІ <KBD>f()</KBD>, Р° РЅРµ РІ <KBD>main()</KBD>.
<P class="tj">Р•СЃР»Рё РёРјСЏ РїРµСЂРµРјРµРЅРЅРѕР№ РЅРµ СЃРѕРІРїР°РґР°РµС‚ РЅРё СЃ РѕРґРЅРёРј РёР· РёРјРµРЅ Р»РѕРєР°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…, С‚Рѕ РїСЂРѕСЃРјР°С‚СЂРёРІР°РµС‚СЃСЏ СЃРїРёСЃРѕРє РіР»РѕР±Р°Р»СЊРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С….
<H2>Р’С‹РїРѕР»РЅРµРЅРёРµ РѕРїРµСЂР°С‚РѕСЂР° if</H2>
<P class="tj">РС‚Р°Рє, Р±Р°Р·РѕРІР°СЏ СЃС‚СЂСѓРєС‚СѓСЂР° РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂР° Little РЎ СЃРѕР·РґР°РЅР°. РўРµРїРµСЂСЊ Рє РЅРµР№ РјРѕР¶РЅРѕ РґРѕР±Р°РІРёС‚СЊ РЅРµРєРѕС‚РѕСЂС‹Рµ СѓРїСЂР°РІР»СЏСЋС‰РёРµ РѕРїРµСЂР°С‚РѕСЂС‹. РљР°Р¶РґС‹Р№ СЂР°Р·, РєРѕРіРґР° С„СѓРЅРєС†РёСЏ <KBD>interp_block()</KBD> РІСЃС‚СЂРµС‡Р°РµС‚ РѕРїРµСЂР°С‚РѕСЂ СЃ Р·Р°СЂРµР·РµСЂРІРёСЂРѕРІР°РЅРЅС‹Рј СЃР»РѕРІРѕРј, РѕРЅР° РІС‹Р·С‹РІР°РµС‚ СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰СѓСЋ С„СѓРЅРєС†РёСЋ, РѕР±СЂР°Р±Р°С‚С‹РІР°СЋС‰СѓСЋ СЌС‚РѕС‚ РѕРїРµСЂР°С‚РѕСЂ. РћРґРёРЅ РёР· СЃР°РјС‹С… Р»РµРіРєРёС… РѕРїРµСЂР°С‚РѕСЂРѕРІ вЂ” <KBD>if</KBD>. РћРЅ РѕР±СЂР°Р±Р°С‚С‹РІР°РµС‚СЃСЏ С„СѓРЅРєС†РёРµР№ <KBD>exec_if()</KBD>:
<PRE>
/* Р’С‹РїРѕР»РЅРµРЅРёРµ РѕРїРµСЂР°С‚РѕСЂР° if. */
void exec_if(void)
{
  int cond;

  eval_exp(&cond); /* РІС‹С‡РёСЃР»РµРЅРёРµ if-РІС‹СЂР°Р¶РµРЅРёСЏ */

  if(cond) { /* РёСЃС‚РёРЅР° - РёРЅС‚РµСЂРїСЂРµС‚Р°С†РёСЏ if-РїСЂРµРґР»РѕР¶РµРЅРёСЏ */
    interp_block();
  }
  else { /* РІ РїСЂРѕС‚РёРІРЅРѕРј СЃР»СѓС‡Р°Рµ РїСЂРѕРїСѓСЃРє if-РїСЂРµРґР»РѕР¶РµРЅРёСЏ
            Рё РІС‹РїРѕР»РЅРµРЅРёРµ else-РїСЂРµРґР»РѕР¶РµРЅРёСЏ, РµСЃР»Рё РѕРЅРѕ РµСЃС‚СЊ */
    find_eob(); /* РїРѕРёСЃРє РєРѕРЅС†Р° Р±Р»РѕРєР° */
    get_token();

    if(tok != ELSE) {
      putback();  /* РІРѕСЃСЃС‚Р°РЅРѕРІР»РµРЅРёРµ Р»РµРєСЃРµРјС‹,
                     РµСЃР»Рё else-РїСЂРµРґР»РѕР¶РµРЅРёРµ РѕС‚СЃСѓС‚СЃРІСѓРµС‚ */
      return;
    }
    interp_block();
  }
}
</PRE>
<P class="tj">Р Р°СЃСЃРјРѕС‚СЂРёРј СЌС‚Сѓ С„СѓРЅРєС†РёСЋ РїРѕРґСЂРѕР±РЅРµРµ. Р’ РїРµСЂРІСѓСЋ РѕС‡РµСЂРµРґСЊ РѕРЅР° РІС‹Р·С‹РІР°РµС‚ <KBD>eval_exp()</KBD> РґР»СЏ РІС‹С‡РёСЃР»РµРЅРёСЏ Р·РЅР°С‡РµРЅРёСЏ СѓСЃР»РѕРІРЅРѕРіРѕ РІС‹СЂР°Р¶РµРЅРёСЏ. Р•СЃР»Рё СѓСЃР»РѕРІРёРµ (<KBD>cond</KBD>) РІС‹РїРѕР»РЅРµРЅРѕ (С‚.Рµ. РІС‹СЂР°Р¶РµРЅРёРµ РёРјРµРµС‚ РЅРµРЅСѓР»РµРІРѕРµ Р·РЅР°С‡РµРЅРёРµ), С‚Рѕ С„СѓРЅРєС†РёСЏ РІС‹Р·С‹РІР°РµС‚ СЂРµРєСѓСЂСЃРёРІРЅРѕ <KBD>interp_block()</KBD>, РІС‹РїРѕР»РЅСЏСЏ С‚РµРј СЃР°РјС‹Рј Р±Р»РѕРє <KBD>if</KBD>. Р•СЃР»Рё <KBD>cond</KBD> Р»РѕР¶РЅРѕ, РІС‹Р·С‹РІР°РµС‚СЃСЏ С„СѓРЅРєС†РёСЏ <KBD>find_eob()</KBD>, РєРѕС‚РѕСЂР°СЏ РїРµСЂРµРґРІРёРіР°РµС‚ СѓРєР°Р·Р°С‚РµР»СЊ РїСЂРѕРіСЂР°РјРјС‹ РЅР° РѕРїРµСЂР°С‚РѕСЂ, СЃР»РµРґСѓСЋС‰РёР№ РїРѕСЃР»Рµ Р±Р»РѕРєР° <KBD>if</KBD>. Р•СЃР»Рё С‚Р°Рј РїСЂРёСЃСѓС‚СЃС‚РІСѓРµС‚ <KBD>else</KBD>-РїСЂРµРґР»РѕР¶РµРЅРёРµ, С‚Рѕ РѕРЅРѕ РѕР±СЂР°Р±Р°С‚С‹РІР°РµС‚СЃСЏ С„СѓРЅРєС†РёРµР№ <KBD>exec_if()</KBD> Рё РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ Р±Р»РѕРє <KBD>else</KBD>. Р’ РїСЂРѕС‚РёРІРЅРѕРј СЃР»СѓС‡Р°Рµ РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ СЃР»РµРґСѓСЋС‰РёР№ РѕРїРµСЂР°С‚РѕСЂ РїСЂРѕРіСЂР°РјРјС‹.
<P class="tj">Р•СЃР»Рё Р±Р»РѕРє <KBD>else</KBD> РїСЂРёСЃСѓС‚СЃС‚РІСѓРµС‚ Рё РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ Р±Р»РѕРє <KBD>if</KBD>, С‚Рѕ РїРѕСЃР»Рµ РµРіРѕ РІС‹РїРѕР»РЅРµРЅРёСЏ РЅСѓР¶РЅРѕ РєР°РєРёРј-С‚Рѕ РѕР±СЂР°Р·РѕРј РѕР±РѕР№С‚Рё Р±Р»РѕРє <KBD>else</KBD>. Р­С‚Р° Р·Р°РґР°С‡Р° РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ РІ С„СѓРЅРєС†РёРё <KBD>interp_block()</KBD> РїСѓС‚РµРј РІС‹Р·РѕРІР° С„СѓРЅРєС†РёРё <KBD>find_eob()</KBD>, РєРѕС‚РѕСЂР°СЏ РѕР±С…РѕРґРёС‚ Р±Р»РѕРє РїРѕСЃР»Рµ <KBD>else</KBD>. Р—Р°РїРѕРјРЅРёС‚Рµ, С‡С‚Рѕ РІ СЃРёРЅС‚Р°РєСЃРёС‡РµСЃРєРё РїСЂР°РІРёР»СЊРЅРѕР№ РїСЂРѕРіСЂР°РјРјРµ <KBD>else</KBD> РѕР±СЂР°Р±Р°С‚С‹РІР°РµС‚СЃСЏ С„СѓРЅРєС†РёРµР№ <KBD>interp_block()</KBD> С‚РѕР»СЊРєРѕ РІ РѕРґРЅРѕРј СЃР»СѓС‡Р°Рµ вЂ” РїРѕСЃР»Рµ РІС‹РїРѕР»РЅРµРЅРёСЏ Р±Р»РѕРєР° <KBD>if</KBD>. Р•СЃР»Рё РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ Р±Р»РѕРє <KBD>else</KBD>, С‚Рѕ РѕРїРµСЂР°С‚РѕСЂ <KBD>else</KBD> РѕР±СЂР°Р±Р°С‚С‹РІР°РµС‚СЃСЏ С„СѓРЅРєС†РёРµР№ <KBD>exec_if()</KBD>.
<H2>РћР±СЂР°Р±РѕС‚РєР° С†РёРєР»Р° while</H2>
<P class="tj">РРЅС‚РµСЂРїСЂРµС‚РёСЂРѕРІР°С‚СЊ С†РёРєР» <KBD>while</KBD>, РєР°Рє Рё <KBD>if</KBD>, РґРѕРІРѕР»СЊРЅРѕ Р»РµРіРєРѕ. РќРёР¶Рµ РїСЂРёРІРµРґРµРЅ С‚РµРєСЃС‚ С„СѓРЅРєС†РёРё <KBD>exec_while()</KBD>, РєРѕС‚РѕСЂР°СЏ РёРЅС‚РµСЂРїСЂРµС‚РёСЂСѓРµС‚ <KBD>while</KBD>:
<PRE>
/* Р’С‹РїРѕР»РЅРµРЅРёРµ С†РёРєР»Р° while. */
void exec_while(void)
{
  int cond;
  char *temp;

  putback();
  temp = prog;  /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ Р°РґСЂРµСЃР° РЅР°С‡Р°Р»Р° С†РёРєР»Р° while */
  get_token();
  eval_exp(&cond);  /* РІС‹С‡РёСЃР»РµРЅРёРµ СѓРїСЂР°РІР»СЏСЋС‰РµРіРѕ РІС‹СЂР°Р¶РµРЅРёСЏ */
  if(cond) interp_block();  /* РµСЃР»Рё РѕРЅРѕ РёСЃС‚РёРЅРЅРѕ, С‚Рѕ РІС‹РїРѕР»РЅРёС‚СЊ
                               РёРЅС‚РµСЂРїСЂРёС‚Р°С†РёСЋ */
  else {  /* РІ РїСЂРѕС‚РёРІРЅРѕРј СЃР»СѓС‡Р°Рµ С†РёРєР» РїСЂРѕРїСѓСЃРєР°РµС‚СЃСЏ */
    find_eob();
    return;
  }
  prog = temp;  /* РІРѕР·РІСЂР°С‚ Рє РЅР°С‡Р°Р»Сѓ С†РёРєР»Р° */
}
</PRE>
<P class="tj">Р¤СѓРЅРєС†РёСЏ <KBD>exec_while()</KBD> СЂР°Р±РѕС‚Р°РµС‚ СЃР»РµРґСѓСЋС‰РёРј РѕР±СЂР°Р·РѕРј. РЎРЅР°С‡Р°Р»Р° Р»РµРєСЃРµРјР° <KBD>while</KBD> РІРѕР·РІСЂР°С‰Р°РµС‚СЃСЏ РІРѕ РІС…РѕРґРЅРѕР№ РїРѕС‚РѕРє, Р° РµРµ Р°РґСЂРµСЃ СЃРѕС…СЂР°РЅСЏРµС‚СЃСЏ РІ РїРµСЂРµРјРµРЅРЅРѕР№ <KBD>temp</KBD>. Р­С‚РѕС‚ Р°РґСЂРµСЃ Р±СѓРґРµС‚ РёСЃРїРѕР»СЊР·РѕРІР°РЅ РёРЅС‚РµСЂРїСЂРµС‚Р°С‚РѕСЂРѕРј, С‡С‚РѕР±С‹ РІРѕР·РІСЂР°С‚РёС‚СЊСЃСЏ Рє РЅР°С‡Р°Р»Сѓ С†РёРєР»Р° (С‚.Рµ. РЅР°С‡Р°С‚СЊ СЃР»РµРґСѓСЋС‰СѓСЋ РёС‚РµСЂР°С†РёСЋ СЃ РЅР°С‡Р°Р»Р° С†РёРєР»Р° <KBD>while</KBD>). Р”Р°Р»РµРµ Р»РµРєСЃРµРјР° <KBD>while</KBD> СЃС‡РёС‚С‹РІР°РµС‚СЃСЏ Р·Р°РЅРѕРІРѕ РґР»СЏ С‚РѕРіРѕ, С‡С‚РѕР±С‹ СѓРґР°Р»РёС‚СЊ РµРµ РёР· РІС…РѕРґРЅРѕРіРѕ РїРѕС‚РѕРєР°. РџРѕСЃР»Рµ СЌС‚РѕРіРѕ РІС‹Р·С‹РІР°РµС‚СЃСЏ С„СѓРЅРєС†РёСЏ <KBD>eval_exp()</KBD>, РєРѕС‚РѕСЂР°СЏ РІС‹С‡РёСЃР»СЏРµС‚ Р·РЅР°С‡РµРЅРёРµ СѓСЃР»РѕРІРЅРѕРіРѕ РІС‹СЂР°Р¶РµРЅРёСЏ С†РёРєР»Р° <KBD>while</KBD>. Р•СЃР»Рё СѓСЃР»РѕРІРёРµ РІС‹РїРѕР»РЅРµРЅРѕ (С‚.Рµ. СѓСЃР»РѕРІРЅРѕРµ РІС‹СЂР°Р¶РµРЅРёРµ РїСЂРёРЅРёРјР°РµС‚ Р·РЅР°С‡РµРЅРёРµ РРЎРўРРќРђ), С‚Рѕ СЂРµРєСѓСЂСЃРёРІРЅРѕ РІС‹Р·С‹РІР°РµС‚СЃСЏ С„СѓРЅРєС†РёСЏ <KBD>interp_block()</KBD>, РєРѕС‚РѕСЂР°СЏ РёРЅС‚РµСЂРїСЂРµС‚РёСЂСѓРµС‚ Р±Р»РѕРє <KBD>while</KBD>. РџРѕСЃР»Рµ РІРѕР·РІСЂР°С‚Р° СѓРїСЂР°РІР»РµРЅРёСЏ РёР· <KBD>interp_block()</KBD> РїСЂРѕРіСЂР°РјРјРЅС‹Р№ СѓРєР°Р·Р°С‚РµР»СЊ <KBD>prog</KBD> СѓСЃС‚Р°РЅР°РІР»РёРІР°РµС‚СЃСЏ РЅР° РЅР°С‡Р°Р»Рѕ С†РёРєР»Р° <KBD>while</KBD> Рё СѓРїСЂР°РІР»РµРЅРёРµ РїРµСЂРµРґР°РµС‚СЃСЏ С„СѓРЅРєС†РёРё <KBD>interp_block()</KBD>, РІ РєРѕС‚РѕСЂРѕР№ РІРµСЃСЊ РїСЂРѕС†РµСЃСЃ РїРѕРІС‚РѕСЂСЏРµС‚СЃСЏ. Р•СЃР»Рё СѓСЃР»РѕРІРЅРѕРµ РІС‹СЂР°Р¶РµРЅРёРµ РѕРїРµСЂР°С‚РѕСЂР° <KBD>while</KBD> РїСЂРёРЅРёРјР°РµС‚ Р·РЅР°С‡РµРЅРёРµ Р›РћР–Р¬, С‚Рѕ РїСЂРѕРёСЃС…РѕРґРёС‚ РїРѕРёСЃРє РєРѕРЅС†Р° Р±Р»РѕРєР° <KBD>while</KBD>, Р° Р·Р°С‚РµРј РІС‹С…РѕРґ РёР· С„СѓРЅРєС†РёРё <KBD>exec_while()</KBD>.
<H2>РћР±СЂР°Р±РѕС‚РєР° С†РёРєР»Р° do-while</H2>
<P class="tj">РћР±СЂР°Р±РѕС‚РєР° С†РёРєР»Р° <KBD>do-while</KBD> РІРѕ РјРЅРѕРіРѕРј РїРѕС…РѕР¶Р° РЅР° РѕР±СЂР°Р±РѕС‚РєСѓ С†РёРєР»Р° <KBD>while</KBD>. РљРѕРіРґР° С„СѓРЅРєС†РёСЏ <KBD>interp_block()</KBD> РІСЃС‚СЂРµС‡Р°РµС‚ РѕРїРµСЂР°С‚РѕСЂ <KBD>do</KBD>, РѕРЅР° РІС‹Р·С‹РІР°РµС‚ С„СѓРЅРєС†РёСЋ <KBD>exec_do()</KBD>, РёСЃС…РѕРґРЅС‹Р№ С‚РµРєСЃС‚ РєРѕС‚РѕСЂРѕР№ РїСЂРёРІРµРґРµРЅ РЅРёР¶Рµ:
<PRE>
/* Р’С‹РїРѕР»РЅРµРЅРёРµ С†РёРєР»Р° do. */
void exec_do(void)
{
  int cond;
  char *temp;

  putback();
  temp = prog;  /* Р·Р°РїРѕРјРёРЅР°РЅРёРµ Р°РґСЂРµСЃР° РЅР°С‡Р°Р»Р° С†РёРєР»Р° */

  get_token(); /* РЅР°Р№С‚Рё РЅР°С‡Р°Р»Рѕ С†РёРєР»Р° */
  interp_block(); /* РёРЅС‚РµСЂРїСЂРёС‚Р°С†РёСЏ С†РёРєР»Р° */
  get_token();
  if(tok != WHILE) sntx_err(WHILE_EXPECTED);
  eval_exp(&cond); /* РїСЂРѕРІРµСЂРєР° СѓСЃР»РѕРІРёСЏ С†РёРєР»Р° */
  if(cond) prog = temp; /* РµСЃР»Рё СѓСЃР»РѕРІРёРµ РёСЃС‚РёРЅРЅРѕ,
  С‚Рѕ С†РёРєР» РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ, РІ РїСЂРѕС‚РёРІРЅРѕРј СЃР»СѓС‡Р°Рµ РїСЂРѕРёСЃС…РѕРґРёС‚
  РІС‹С…РѕРґ РёР· С†РёРєР»Р° */
}
</PRE>
<P class="tj">Р“Р»Р°РІРЅРѕРµ РѕС‚Р»РёС‡РёРµ С†РёРєР»Р° <KBD>do-while</KBD> РѕС‚ С†РёРєР»Р° <KBD>while</KBD> СЃРѕСЃС‚РѕРёС‚ РІ С‚РѕРј, С‡С‚Рѕ Р±Р»РѕРє <KBD>do-while</KBD> РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ РІСЃРµРіРґР° РєР°Рє РјРёРЅРёРјСѓРј РѕРґРёРЅ СЂР°Р·, РїРѕС‚РѕРјСѓ С‡С‚Рѕ РµРіРѕ СѓСЃР»РѕРІРЅРѕРµ РІС‹СЂР°Р¶РµРЅРёРµ РЅР°С…РѕРґРёС‚СЃСЏ РїРѕСЃР»Рµ С‚РµР»Р° С†РёРєР»Р°. РџРѕСЌС‚РѕРјСѓ <KBD>exec_do</KBD> СЃРЅР°С‡Р°Р»Р° Р·Р°РїРѕРјРёРЅР°РµС‚ Р°РґСЂРµСЃ РЅР°С‡Р°Р»Р° С†РёРєР»Р° РІ РїРµСЂРµРјРµРЅРЅРѕР№ <KBD>temp</KBD>, Р° Р·Р°С‚РµРј СЂРµРєСѓСЂСЃРёРІРЅРѕ РІС‹Р·С‹РІР°РµС‚ <KBD>interp_block()</KBD>, РєРѕС‚РѕСЂР°СЏ РёРЅС‚РµСЂРїСЂРµС‚РёСЂСѓРµС‚ Р±Р»РѕРє, Р°СЃСЃРѕС†РёРёСЂРѕРІР°РЅРЅС‹Р№ СЃ С†РёРєР»РѕРј. РџРѕСЃР»Рµ РІРѕР·РІСЂР°С‚Р° СѓРїСЂР°РІР»РµРЅРёСЏ РёР· <KBD>interp_block()</KBD> РёРґРµС‚ РїРѕРёСЃРє СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰РµРіРѕ СЃР»РѕРІР° <KBD>while</KBD> Рё РІС‹С‡РёСЃР»СЏРµС‚СЃСЏ Р·РЅР°С‡РµРЅРёРµ СѓСЃР»РѕРІРЅРѕРіРѕ РІС‹СЂР°Р¶РµРЅРёСЏ. Р•СЃР»Рё СѓСЃР»РѕРІРёРµ РІС‹РїРѕР»РЅРµРЅРѕ, С‚Рѕ <KBD>prog</KBD> СѓСЃС‚Р°РЅР°РІР»РёРІР°РµС‚СЃСЏ С‚Р°Рє, С‡С‚Рѕ РµРіРѕ Р·РЅР°С‡РµРЅРёРµ СѓРєР°Р·С‹РІР°РµС‚ РЅР° РЅР°С‡Р°Р»Рѕ С†РёРєР»Р°, РІ РїСЂРѕС‚РёРІРЅРѕРј СЃР»СѓС‡Р°Рµ РІС‹РїРѕР»РЅРµРЅРёРµ РїСЂРѕРґРѕР»Р¶Р°РµС‚СЃСЏ СЃРѕ СЃР»РµРґСѓСЋС‰РµРіРѕ РѕРїРµСЂР°С‚РѕСЂР°.
<H2>Р¦РёРєР» for</H2>
<P class="tj">РРЅС‚РµСЂРїСЂРµС‚Р°С†РёСЏ С†РёРєР»Р° <KBD>for</KBD> вЂ” Р·Р°РґР°С‡Р° Р·РЅР°С‡РёС‚РµР»СЊРЅРѕ Р±РѕР»РµРµ С‚СЂСѓРґРЅР°СЏ, С‡РµРј РёРЅС‚РµСЂРїСЂРµС‚Р°С†РёСЏ РґСЂСѓРіРёС… РѕРїРµСЂР°С‚РѕСЂРѕРІ. Р§Р°СЃС‚РёС‡РЅРѕ СЌС‚Рѕ РѕР±СЉСЏСЃРЅСЏРµС‚СЃСЏ С‚РµРј, С‡С‚Рѕ СЃС‚СЂСѓРєС‚СѓСЂР° С†РёРєР»Р° <KBD>for</KBD> РІ СЏР·С‹РєРµ РЎ Р±С‹Р»Р° Р·Р°РґСѓРјР°РЅР° РІ РїСЂРµРґРїРѕР»РѕР¶РµРЅРёРё РєРѕРјРїРёР»СЏС†РёРё РїСЂРѕРіСЂР°РјРјС‹. Р“Р»Р°РІРЅР°СЏ С‚СЂСѓРґРЅРѕСЃС‚СЊ Р·Р°РєР»СЋС‡Р°РµС‚СЃСЏ РІ С‚РѕРј, С‡С‚Рѕ СѓСЃР»РѕРІРЅРѕРµ РІС‹СЂР°Р¶РµРЅРёРµ <KBD>for</KBD> РґРѕР»Р¶РЅРѕ РїСЂРѕРІРµСЂСЏС‚СЊСЃСЏ РІ РЅР°С‡Р°Р»Рµ С†РёРєР»Р°, Р° С‡Р°СЃС‚СЊ РїСЂРёСЂР°С‰РµРЅРёСЏ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ РІС‹РїРѕР»РЅРµРЅР° РІ РµРіРѕ РєРѕРЅС†Рµ. РўР°РєРёРј РѕР±СЂР°Р·РѕРј, СЌС‚Рё РґРІРµ С‡Р°СЃС‚Рё С†РёРєР»Р° <KBD>for</KBD> РІ С‚РµРєСЃС‚Рµ РёСЃС…РѕРґРЅРѕР№ РїСЂРѕРіСЂР°РјРјС‹ РЅР°С…РѕРґСЏС‚СЃСЏ СЂСЏРґРѕРј, Р° РёС… РёРЅС‚РµСЂРїСЂРµС‚Р°С†РёСЏ СЂР°Р·РґРµР»РµРЅР° РІС‹РїРѕР»РЅРµРЅРёРµРј Р±Р»РѕРєР° С†РёРєР»Р°. РћРґРЅР°РєРѕ, РїРѕСЃР»Рµ РЅРµРєРѕС‚РѕСЂРѕР№ РґРѕРїРѕР»РЅРёС‚РµР»СЊРЅРѕР№ СЂР°Р±РѕС‚С‹, С†РёРєР» <KBD>for</KBD> РІСЃРµ Р¶Рµ РјРѕР¶РµС‚ Р±С‹С‚СЊ РёРЅС‚РµСЂРїСЂРµС‚РёСЂРѕРІР°РЅ.
<P class="tj">РљРѕРіРґР° <KBD>interp_block()</KBD> РІСЃС‚СЂРµС‡Р°РµС‚ РѕРїРµСЂР°С‚РѕСЂ <KBD>for</KBD>, РІС‹Р·С‹РІР°РµС‚СЃСЏ С„СѓРЅРєС†РёСЏ <KBD>exec_for()</KBD>, С‚РµРєСЃС‚ РєРѕС‚РѕСЂРѕР№ РїСЂРёРІРµРґРµРЅ РЅРёР¶Рµ:
<PRE>
/* Р’С‹РїРѕР»РЅРµРЅРёРµ С†РёРєР»Р° for. */
void exec_for(void)
{
  int cond;
  char *temp, *temp2;
  int brace ;

  get_token();
  eval_exp(&cond);  /* РёРЅРёС†РёР°Р»РёР·РёСЂСѓСЋС‰РµРµ РІС‹СЂР°Р¶РµРЅРёРµ */
  if(*token != ';') sntx_err(SEMI_EXPECTED);
  prog++; /* РїСЂРѕРїСѓСЃРє ; */
  temp = prog;
  for(;;) {
    eval_exp(&cond);  /* РїСЂРѕРІРµСЂРєР° СѓСЃР»РѕРІРёСЏ */
    if(*token != ';') sntx_err(SEMI_EXPECTED);
    prog++; /* РїСЂРѕРїСѓСЃРє ; */
    temp2 = prog;

    /* РїРѕРёСЃРє РЅР°С‡Р°Р»Р° С‚РµР»Р° С†РёРєР»Р° */
    brace = 1;
    while(brace) {
      get_token();
      if(*token == '(') brace++;
      if(*token == ')') brace--;
    }

    if(cond) interp_block();  /* РµСЃР»Рё СѓСЃР»РѕРІРёРµ РІС‹РїРѕР»РЅРµРЅРѕ,
                                 С‚Рѕ РІС‹РїРѕР»РЅРёС‚СЊ РёРЅС‚РµСЂРїСЂРёС‚Р°С†РёСЋ */
    else {  /* РІ РїСЂРѕС‚РёРІРЅРѕРј СЃР»СѓС‡Р°Рµ РѕР±РѕР№С‚Рё С†РёРєР» */
      find_eob();
      return;
    }
    prog = temp2;
    eval_exp(&cond); /* РІРїРѕР»РЅРµРЅРёРµ РёРЅРєСЂРµРјРµРЅС‚Р° */
    prog = temp;  /* РІРѕР·РІСЂР°С‚ РІ РЅР°С‡Р°Р»Рѕ С†РёРєР»Р° */
  }
}
</PRE>
<P class="tj">РЎРЅР°С‡Р°Р»Р° С„СѓРЅРєС†РёСЏ РѕР±СЂР°Р±Р°С‚С‹РІР°РµС‚ РёРЅРёС†РёР°Р»РёР·РёСЂСѓСЋС‰РµРµ РІС‹СЂР°Р¶РµРЅРёРµ С†РёРєР»Р° <KBD>for</KBD>. Р§Р°СЃС‚СЊ РёРЅРёС†РёР°Р»РёР·Р°С†РёРё <KBD>for</KBD> РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ С‚РѕР»СЊРєРѕ РѕРґРёРЅ СЂР°Р·; СЌС‚Р° С‡Р°СЃС‚СЊ РЅРµ РїРѕРґРІРµСЂРіР°РµС‚СЃСЏ С†РёРєР»РёС‡РµСЃРєРѕР№ РѕР±СЂР°Р±РѕС‚РєРµ. Р—Р°С‚РµРј СѓРєР°Р·Р°С‚РµР»СЊ РїСЂРѕРіСЂР°РјРјС‹ СѓСЃС‚Р°РЅР°РІР»РёРІР°РµС‚СЃСЏ С‚Р°Рє, С‡С‚РѕР±С‹ РѕРЅ СѓРєР°Р·С‹РІР°Р» РЅР° СЃРёРјРІРѕР», СЃР»РµРґСѓСЋС‰РёР№ СЃСЂР°Р·Сѓ РїРѕСЃР»Рµ С‚РѕР№ С‚РѕС‡РєРё СЃ Р·Р°РїСЏС‚РѕР№, РєРѕС‚РѕСЂРѕР№ Р·Р°РєР°РЅС‡РёРІР°РµС‚СЃСЏ С‡Р°СЃС‚СЊ РёРЅРёС†РёР°Р»РёР·Р°С†РёРё. РќР°РєРѕРЅРµС†, РїРѕСЃР»Рµ СЌС‚РѕРіРѕ Р·РЅР°С‡РµРЅРёРµ СѓРєР°Р·Р°С‚РµР»СЏ РїСЂРёСЃРІР°РёРІР°РµС‚СЃСЏ РїРµСЂРµРјРµРЅРЅРѕР№ <KBD>temp</KBD>. Рђ Р·Р°С‚РµРј РѕСЂРіР°РЅРёР·РѕРІС‹РІР°РµС‚СЃСЏ С†РёРєР», РІ РєРѕС‚РѕСЂРѕРј РїСЂРѕРІРµСЂСЏРµС‚СЃСЏ СѓСЃР»РѕРІРЅР°СЏ С‡Р°СЃС‚СЊ С†РёРєР»Р° <KBD>for</KBD> Рё РїРµСЂРµРјРµРЅРЅРѕР№ <KBD>temp2</KBD> РїСЂРёСЃРІР°РёРІР°РµС‚СЃСЏ Р°РґСЂРµСЃ РЅР°С‡Р°Р»Р° С‡Р°СЃС‚Рё РїСЂРёСЂР°С‰РµРЅРёСЏ. Р”Р°Р»РµРµ РїСЂРѕРёР·РІРѕРґРёС‚СЃСЏ РїРѕРёСЃРє РЅР°С‡Р°Р»Р° С‚РµР»Р° С†РёРєР»Р° Рё РµРіРѕ (С‚РµР»Р°) РёРЅС‚РµСЂРїСЂРµС‚Р°С†РёСЏ, РµСЃР»Рё СѓСЃР»РѕРІРЅРѕРµ РІС‹СЂР°Р¶РµРЅРёРµ РїСЂРёРЅРёРјР°РµС‚ Р·РЅР°С‡РµРЅРёРµ РРЎРўРРќРђ. (Р’ РїСЂРѕС‚РёРІРЅРѕРј СЃР»СѓС‡Р°Рµ РїСЂРѕРёР·РІРѕРґРёС‚СЃСЏ РїРѕРёСЃРє РєРѕРЅС†Р° С‚РµР»Р° С†РёРєР»Р° Рё РІС‹РїРѕР»РЅРµРЅРёРµ РїСЂРѕРґРѕР»Р¶Р°РµС‚СЃСЏ СЃ РѕРїРµСЂР°С‚РѕСЂР°, СЃР»РµРґСѓСЋС‰РµРіРѕ РїРѕСЃР»Рµ С†РёРєР»Р° <KBD>for</KBD>.) РџРѕСЃР»Рµ СЂРµРєСѓСЂСЃРёРІРЅРѕРіРѕ РІС‹Р·РѕРІР° <KBD>interp_block()</KBD> РІС‹РїРѕР»РЅСЏРµС‚СЃСЏ С‡Р°СЃС‚СЊ РїСЂРёСЂР°С‰РµРЅРёСЏ, РїРѕСЃР»Рµ С‡РµРіРѕ РІРµСЃСЊ РїСЂРѕС†РµСЃСЃ РїРѕРІС‚РѕСЂСЏРµС‚СЃСЏ.
<p><IMG src="../work/sup.bmp" alt="----------">
<BLOCKQUOTE>
<P class="tj"><SUP><A href="#1" id="11">[1]</A></SUP>РќР° СЃР°РјРѕРј РґРµР»Рµ, РєРѕРЅРµС‡РЅРѕ, РґР°РЅРЅС‹Р№ Р°Р»РіРѕСЂРёС‚Рј СЂР°Р±РѕС‚Р°РµС‚ РїСЂР°РІРёР»СЊРЅРѕ С‚РѕР»СЊРєРѕ РїСЂРё СѓСЃР»РѕРІРёРё, С‡С‚Рѕ СѓС‡РёС‚С‹РІР°СЋС‚СЃСЏ С‚РѕР»СЊРєРѕ Р·РЅР°С‡Р°С‰РёРµ С„РёРіСѓСЂРЅС‹Рµ СЃРєРѕР±РєРё, Р° С„РёРіСѓСЂРЅС‹Рµ СЃРєРѕР±РєРё РІРЅСѓС‚СЂРё СЃС‚СЂРѕРє, РЅР°РїСЂРёРјРµСЂ, РЅРµ СѓС‡РёС‚С‹РІР°СЋС‚СЃСЏ. (Р¤РёРіСѓСЂРЅС‹Рµ СЃРєРѕР±РєРё РІРЅСѓС‚СЂРё СЃС‚СЂРѕРє "СЃСЉРµРґР°СЋС‚СЃСЏ" РїСЂРѕРіСЂР°РјРјРѕР№ СЃС‡РёС‚С‹РІР°РЅРёСЏ Р»РµРєСЃРµРј.)
</BLOCKQUOTE>


<p>






</p>
<small>
 
</small><HR><A href="../main.htm#29">РЎРѕРґРµСЂР¶Р°РЅРёРµ</A> | <A href="2905.htm">&lt;&lt;&lt;</A> | <A href="2907.htm">&gt;&gt;&gt;</A>
</BODY>
</html>
