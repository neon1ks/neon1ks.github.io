<!DOCTYPE HTML>
<html lang="ru">
<HEAD>
<TITLE>Расширение Little C - cправочник по Си</TITLE>
<meta charset="utf-8">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#29">Содержание</A> | <A href="2910.htm">&lt;&lt;&lt;</A> | <A href="2910.htm">&lt;&lt;&lt;</A><HR>
<H1>Расширение Little C</H1>
<P class="tj">Расширять возможности интерпретатора Little С можно в двух направлениях: добавлять в него новые средства языка С и дополнительные средства программирования. Эти усовершенсгвования кратко рассматриваются в следующих разделах.
<H2>Добавление новых средств в язык Little C</H2>
<P class="tj">Существует две категории операторов С, которые можно включить в Little С. В первую категорию входят дополнительные выполняемые операторы С, такие как <KBD>switch</KBD>, <KBD>goto</KBD>, <KBD>break</KBD> и <KBD>continue</KBD>. Если предыдущий материал изучен достаточно тщательно, то их добавление в Little С не составит большого труда.
<P class="tj">Во вторую категорию входит поддержка новых типов данных. В интерпретаторе Little С для этого есть некоторые "зацепки". Например, в структуре <KBD>var_type</KBD> есть поле для типов переменных. Для включения дополнительных базовых типов (например, <KBD>float</KBD>, <KBD>double</KBD> или <KBD>long</KBD>) нужно просто увеличить размер поля до размера наибольшего элемента.
<P class="tj">Учтите, что реализация указателей не труднее, чем реализация других типов данных. Однако для этого нужно будет добавить в синтаксический анализатор выражений поддержку операций для работы с указателями.
<P class="tj">После реализации операций для работы с указателями легко добавить массивы. Память для массива следует выделять динамически, используя <KBD>mallloc()</KBD>, а указатель на массив нужно хранить в поле <KBD>value</KBD> структуры <KBD>var_type</KBD>.
<P class="tj">Более трудная задача — добавление структур и объединений. Проще всего это сделать, используя <KBD>malloc()</KBD> для выделения объекту памяти, причем указатель на объект нужно сохранить в поле <KBD>value</KBD> структуры <KBD>var_type</KBD>. (Для обработки передачи структур и объединений в качестве параметров нужно будет написать специальную программу.)
<P class="tj">Для поддержки различных типов возвращаемых функциями значений нужно использовать поле <KBD>ret_type</KBD> структуры <KBD>func_type</KBD>. Это поле определяет тип возвращаемых функцией данных. В текущей версии интерпретатора оно объявлено, но не используется.
<P class="tj">Можно также добавить в Little С поддержку комментариев вида //. Это нетрудно сделать, изменив функцию <KBD>get_token()</KBD>.
<P class="tj">И наконец, в интерпретатор Little С несложно добавить средства, не входящие в состав языка С. Это особенно увлекательное упражнение — заставить интерпретатор делать то, что в языке не предусмотрено. Например, можно добавить конструкцию языка Pascal <KBD>REPEAT-UNTIL</KBD>, Если при этом возникают трудности, как средство отладки можно использовать вывод каждой лексемы в процессе ее обработки.
<H2>Создание дополнительных средств программирования</H2>
<P class="tj">Кроме средств языка, в интерпретатор несложно добавить также новые средства программирования. Например, можно добавить средства трассировки, выводящие на экран в процессе выполнения программы каждую лексему отдельно. Еше можно добавить возможность вывода значений переменных при выполнении программы, а также, например, встроенный редактор, который позволит редактировать и выполнять программу без перехода в автономный редактор.
<p>
</p>
<HR><A href="../main.htm#29">Содержание</A> | <A href="2910.htm">&lt;&lt;&lt;</A> | <A href="2910.htm">&lt;&lt;&lt;</A>
</BODY></HTML>