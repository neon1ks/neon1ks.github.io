<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>Расширение Little C - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head><body>
<a href="../main.htm#29">Содержание</a> | <a href="2910.htm">&lt;&lt;&lt;</a> | <a href="2910.htm">&lt;&lt;&lt;</a><hr>
<h1>Расширение Little C</h1>
<p class="tj">Расширять возможности интерпретатора Little С можно в двух направлениях: добавлять в него новые средства языка С и дополнительные средства программирования. Эти усовершенсгвования кратко рассматриваются в следующих разделах.
<h2>Добавление новых средств в язык Little C</h2>
<p class="tj">Существует две категории операторов С, которые можно включить в Little С. В первую категорию входят дополнительные выполняемые операторы С, такие как <kbd>switch</kbd>, <kbd>goto</kbd>, <kbd>break</kbd> и <kbd>continue</kbd>. Если предыдущий материал изучен достаточно тщательно, то их добавление в Little С не составит большого труда.
<p class="tj">Во вторую категорию входит поддержка новых типов данных. В интерпретаторе Little С для этого есть некоторые "зацепки". Например, в структуре <kbd>var_type</kbd> есть поле для типов переменных. Для включения дополнительных базовых типов (например, <kbd>float</kbd>, <kbd>double</kbd> или <kbd>long</kbd>) нужно просто увеличить размер поля до размера наибольшего элемента.
<p class="tj">Учтите, что реализация указателей не труднее, чем реализация других типов данных. Однако для этого нужно будет добавить в синтаксический анализатор выражений поддержку операций для работы с указателями.
<p class="tj">После реализации операций для работы с указателями легко добавить массивы. Память для массива следует выделять динамически, используя <kbd>mallloc()</kbd>, а указатель на массив нужно хранить в поле <kbd>value</kbd> структуры <kbd>var_type</kbd>.
<p class="tj">Более трудная задача — добавление структур и объединений. Проще всего это сделать, используя <kbd>malloc()</kbd> для выделения объекту памяти, причем указатель на объект нужно сохранить в поле <kbd>value</kbd> структуры <kbd>var_type</kbd>. (Для обработки передачи структур и объединений в качестве параметров нужно будет написать специальную программу.)
<p class="tj">Для поддержки различных типов возвращаемых функциями значений нужно использовать поле <kbd>ret_type</kbd> структуры <kbd>func_type</kbd>. Это поле определяет тип возвращаемых функцией данных. В текущей версии интерпретатора оно объявлено, но не используется.
<p class="tj">Можно также добавить в Little С поддержку комментариев вида //. Это нетрудно сделать, изменив функцию <kbd>get_token()</kbd>.
<p class="tj">И наконец, в интерпретатор Little С несложно добавить средства, не входящие в состав языка С. Это особенно увлекательное упражнение — заставить интерпретатор делать то, что в языке не предусмотрено. Например, можно добавить конструкцию языка Pascal <kbd>REPEAT-UNTIL</kbd>, Если при этом возникают трудности, как средство отладки можно использовать вывод каждой лексемы в процессе ее обработки.
<h2>Создание дополнительных средств программирования</h2>
<p class="tj">Кроме средств языка, в интерпретатор несложно добавить также новые средства программирования. Например, можно добавить средства трассировки, выводящие на экран в процессе выполнения программы каждую лексему отдельно. Еше можно добавить возможность вывода значений переменных при выполнении программы, а также, например, встроенный редактор, который позволит редактировать и выполнять программу без перехода в автономный редактор.
<p>
</p>
<hr><a href="../main.htm#29">Содержание</a> | <a href="2910.htm">&lt;&lt;&lt;</a> | <a href="2910.htm">&lt;&lt;&lt;</a>
</body></html>