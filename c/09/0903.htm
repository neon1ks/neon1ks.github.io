<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>Потоки и файлы - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head><body>
<a href="../main.htm#09">Содержание</a> | <a href="0902.htm">&lt;&lt;&lt;</a> | <a href="0904.htm">&gt;&gt;&gt;</a><hr>
<h1>Потоки и файлы</h1>
<p class="tj">Перед тем как начать изучение файловой системы языка С, необходимо уяснить, в чем разница между <em>потоками</em> и <em>файлами</em>. В системе ввода/вывода С для программ поддерживается единый интерфейс, не зависящий от того, к какому конкретному устройству осуществляется доступ. То есть в этой системе между программой и устройством находится нечто более общее, чем само устройство. Такое обобщенное устройство ввода или вывода (устройство более высокого уровня абстракции) называется <em>потоком</em>, в то время как конкретное устройство называется <em>файлом</em>. (Впрочем, файл — тоже понятие абстрактное.) Очень важно понимать, каким образом происходит взаимодействие потоков и файлов.
<h2>Потоки</h2>
<p class="tj">Файловая система языка С предназначена для работы с самыми разными устройствами, в том числе терминалами, дисководами и накопителями на магнитной ленте. Даже если какое-то устройство сильно отличается от других, буферизованная файловая система все равно представит его в виде логического устройства, которое называется потоком. Все потоки ведут себя похожим образом. И так как они в основном не зависят от физических устройств, то та же функция, которая выполняет запись в дисковый файл, может ту же операцию выполнять и на другом устройстве, например, на консоли. Потоки бывают двух видов: текстовые и двоичные.
<h3>Текстовые потоки</h3>
<p class="tj"><em>Текстовый поток</em> — это последовательность символов. В стандарте С считается, что текстовый поток организован в виде строк, каждая из которых заканчивается символом новой строки. Однако в конце последней строки этот символ не является обязательным. В текстовом потоке по требованию базовой среды могут происходить определенные преобразования символов. Например, символ новой строки может быть заменен парой символов — возврата каретки и перевода строки. Поэтому может и не быть однозначного соответствия между символами, которые пишутся (читаются), и теми, которые хранятся во внешнем устройстве. Кроме того, количество тех символов, которые пишутся (читаются), и тех, которые хранятся во внешнем устройстве, может также не совпадать из-за возможных преобразований.
<h3>Двоичные потоки</h3>
<p class="tj"><em>Двоичный поток</em> — это последовательность байтов, которая взаимно однозначно соответствует байтам на внешнем устройстве, причем никакого преобразования символов не происходит. Кроме того, количество тех байтов, которые пишутся (читаются), и тех, которые хранятся на внешнем устройстве, одинаково. Однако в конце двоичного потока может добавляться определяемое приложением количество нулевых байтов. Такие нулевые байты, например, могут использоваться для заполнения свободного места в блоке памяти незначащей информацией, чтобы она в точности заполнила сектор на диске.
<h2>Файлы</h2>
<p class="tj">В языке С файлом может быть все что угодно, начиная с дискового файла и заканчивая терминалом или принтером. Поток связывают с определенным файлом, выполняя операцию <em>открытия</em>. Как только файл открыт, можно проводить обмен информацией между ним и программой.
<p class="tj">Но не у всех файлов одинаковые возможности. Например, к дисковому файлу прямой доступ возможен, в то время как к некоторым принтерам — нет. Таким образом, мы пришли к одному важному принципу, относящемуся к системе ввода/вывода языка С: все потоки одинаковы, а файлы — нет.
<p class="tj">Если файл может поддерживать <em>запросы на местоположение (указатель текущей позиции)</em>, то при открытии такого файла <em>указатель текущей позиции в файле</em> устанавливается в начало. При чтении из файла (или записи в него) каждого символа указатель текущей позиции увеличивается, обеспечивая тем самым продвижение по файлу.
<p class="tj">Файл отсоединяется от определенного потока (т.е. разрывается связь между файлом и потоком) с помощью операции <em>закрытия</em>. При закрытии файла, открытого с целью вывода, содержимое (если оно есть) связанного с ним потока записывается на внешнее устройство. Этот процесс, который обычно называют <em>дозаписью</em><sup><a href="#11" id="1">[1]</a></sup> потока, гарантирует, что никакая информация случайно не останется в буфере диска. Если программа завершает работу нормально, т.е. либо <kbd>main()</kbd> возвращает управление операционной системе, либо вызывается <kbd>exit()</kbd>, то все файлы закрываются автоматически. В случае аварийного завершения работы программы, например, в случае краха или завершения путем вызова <kbd>abort()</kbd>, файлы не закрываются.
<p class="tj">У каждого потока, связанного с файлом, имеется управляющая структура, содержащая информацию о файле; она имеет тип <kbd>FILE</kbd>. В этом <em>блоке управления файлом</em><sup><a href="#22" id="2">[2]</a></sup> никогда ничего не меняйте<sup><a href="#33" id="3">[3]</a></sup>.
<p class="tj">Если вы новичок в программировании, то разграничение потоков и файлов может показаться излишним или даже "заумным". Однако надо помнить, что основная цель такого разграничения — это обеспечить единый интерфейс. Для выполнения всех операций ввода/вывода следует использовать только понятия потоков и применять всего лишь одну файловую систему. Ввод или вывод от каждого устройства автоматически преобразуется системой ввода/вывода в легко управляемый поток.
<p><img src="../work/sup.bmp" alt="----------">
<blockquote>
<p class="tj"><sup><a href="#1" id="11">[1]</a></sup>Или <em>принудительным освобождением (содержимого) буфера</em>.
<p class="tj"><sup><a href="#2" id="22">[2]</a></sup><em>Блок управления файлом</em> — небольшой блок памяти, временно выделенный операционной системой для хранения информации о файле, который был открыт для использования. Блок управления файлом обычно содержит информацию об идентификаторе файла, его расположении на диске и указателе текущей позиции в файле.
<p class="tj"><sup><a href="#3" id="33">[3]</a></sup>Если, конечно, вы не разрабатываете систему ввода-вывода.
</blockquote>
<p>
</p>
<hr><a href="../main.htm#09">Содержание</a> | <a href="0902.htm">&lt;&lt;&lt;</a> | <a href="0904.htm">&gt;&gt;&gt;</a>
</body>
</html>
