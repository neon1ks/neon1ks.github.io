<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>Использование sizof для обеспечения переносимости - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head>
<body>


<a href="../main.htm#07">Содержание</a> | <a href="0709.htm">&lt;&lt;&lt;</a> | <a href="0711.htm">&gt;&gt;&gt;</a><hr>
<h1>Использование sizof для обеспечения переносимости</h1>
<p class="tj">Вы имели возможность убедиться, что структуры и объединения можно использовать для создания переменных разных размеров, а также в том, что настоящий размер этих переменных в разных машинах может быть разным. Оператор <kbd>sizeof</kbd> подсчитывает размер любой переменной или любого типа и может быть полезен, если в программах требуется свести к минимуму машинно-зависимый код. Этот оператор особенно полезен там, где приходится иметь дело со структурами или объединениями.
<p class="tj">Перед тем как переходить к дальнейшему изложению, предположим, что определенные типы данных имеют следующие размеры:
<pre>
<strong>Тип        Размер в байтах</strong>
char       1
int        4
double     8
</pre>
<p class="tj">Поэтому при выполнении следующего кода на экран будут выведены числа <kbd>1</kbd>, <kbd>4</kbd> и <kbd>8</kbd>:
<pre>
char ch;
int i;
double f;
printf("%d", sizeof(ch));
printf("%d", sizeof(i));
printf("%d", sizeof(f));
</pre>
<p class="tj">Размер структуры равен сумме размеров ее членов или, возможно, даже <em>больше</em> этой суммы. Рассмотрим пример:
<pre>
struct s {
  char ch;
  int i;
  double f;
} s_var;
</pre>
<p class="tj">Здесь <kbd>sizeof(s_var)</kbd> равняется как минимум 13 (=8+4+1). Однако размер <kbd>s_var</kbd> может быть и больше, потому что компилятору иногда необходимо специально увеличить размер структуры, выровнять некоторые ее члены на границу слова или параграфа. (Параграф занимает 16 байтов.) Так как размер структуры может быть больше, чем сумма размеров ее членов, то всегда, когда нужно знать размер структуры, следует использовать <kbd>sizeof</kbd>. Например, если требуется динамически выделять память для объекта типа <kbd>s</kbd>, необходимо использовать последовательность операторов, аналогичную той, что показана здесь (а не вставлять вручную значения длины его членов):
<pre>
struct s *p;
p = malloc(sizeof(struct s));
</pre>
<p class="tj">Так как <kbd>sizeof</kbd> — это оператор времени компиляции, то вся информация, необходимая для вычисления размера любой переменной, становится известной как раз во время компиляции. Это особенно важно для объединений, потому что размер каждого из них всегда равен размеру наибольшего члена. Например, проанализируйте следующее объединение:
<pre>
union u {
  char ch;
  int i;
  double f;
} u_var;
</pre>
<p class="tj">Для него <kbd>sizeof(u_var)</kbd> равняется 8. Впрочем, во время выполнения не имеет значения, какой размер на самом деле имеет <kbd>u_var</kbd>. Важен размер его наибольшего члена, так как любое объединение должно быть такого же размера, как и его самый большой элемент.
<hr><a href="../main.htm#07">Содержание</a> | <a href="0709.htm">&lt;&lt;&lt;</a> | <a href="0711.htm">&gt;&gt;&gt;</a>


</body>
</html>
