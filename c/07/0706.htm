<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>Объединения - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head><body>
<a href="../main.htm#07">Содержание</a> | <a href="0705.htm">&lt;&lt;&lt;</a> | <a href="0707.htm">&gt;&gt;&gt;</a><hr>
<h1>Объединения</h1>
<p class="tj"><em>Объединение</em> — это место в памяти, которое используется для хранения переменных, разных типов. Объединение дает возможность интерпретировать один и тот же набор битов не менее,  чем двумя разными  способами.  Объявление  объединения (начинается с ключевого слова <kbd>union</kbd>) похоже на объявление структуры и в общем виде выглядит так:
<pre>
union <em>тег</em> {
  <em>тип имя-члена;
  тип имя-члена;
  тип имя-члена;
  .
  .
  .</em>
} <em>переменные-этого-объединения;</em>
</pre>
<p class="tj">Например:
<pre>
union u_type {
  int i;
  char ch;
};
</pre>
<p class="tj">Это объявление не создает никаких переменных. Чтобы объявить переменную, ее имя можно поместить в конце объявления или написать отдельный оператор объявления. Чтобы с помощью только что написанного кода объявить переменную-объединение, которая называется <kbd>cnvt</kbd> и имеет тип <kbd>u_type</kbd>, можно написать следующий оператор:
<pre>union u_type cnvt;</pre>
<p class="tj">В <kbd>cnvt</kbd> одну и ту же область памяти занимают целая переменная <kbd>i</kbd> и символьная переменная <kbd>ch</kbd>. Конечно, <kbd>i</kbd> занимает 2 байта (при условии, что целые значения занимают по 2 байта), a <kbd>ch</kbd> — только 1. На рис. 7.2 показано, каким образом <kbd>i</kbd> и <kbd>ch</kbd> пользуются одним и тем же адресом. В любом месте программы хранящиеся в <kbd>cnvt</kbd> данные можно обрабатывать как целые или символьные.</p>
<table class="table">
<caption class="bottom"><p class="tj"><em>Рис. 7.2. Как <kbd>i</kbd>, так и <kbd>ch</kbd>, хранятся в объединении <kbd>cnvt</kbd> (подразумевается, что целые значения занимают по 2 байта)</em>
<tr><td>
<pre>
|&lt;------ i ------&gt;|
|                 |
+--------+--------+
| Байт 0 | Байт 1 |
+--------+--------+
|        |
|&lt;- ch -&gt;|
</pre>
</table>
<p class="tj">Когда переменная объявляется с ключевым словом <kbd>union</kbd>, компилятор автоматически выделяет столько памяти, чтобы в ней поместился самый большой член нового объединения. Например, при условии, что целые значения занимают по 2 байта, для размещения <kbd>i</kbd> в <kbd>cnvt</kbd> необходимо, чтобы длина этого объединения составляла 2 байта, даже если для <kbd>ch</kbd> требуется только 1 байт.
<p class="tj">Для получения доступа к члену объединения используйте тот же синтаксис, что и для структур: операторы точки и стрелки. При работе непосредственно с объединением следует пользоваться точкой. А при получении доступа к объединению с помощью указателя нужен оператор стрелка. Например, чтобы присвоить целое значение 10 элементу <kbd>i</kbd> из <kbd>cnvt</kbd>, напишите
<pre>cnvt.i = 10;</pre>
<p class="tj">В следующем примере функции <kbd>func1</kbd> передается указатель на <kbd>cnvt</kbd>:
<pre>
void func1(union u_type *un)
{
  un-&gt;i = 10; /* присвоение cnvt значение 10 с помощью указателя */
}
</pre>
<p class="tj">Объединения часто используются тогда, когда нужно выполнить специфическое преобразование типов, потому что хранящиеся в объединениях данные можно обозначать совершенно разными способами. Например, используя объединения, можно манипулировать байтами, составляющими значение типа <kbd>double</kbd>, и делать так, чтобы менять его точность или выполнять какое-либо необычное округление.
<p class="tj">Чтобы получить представление о полезности объединений в случаях, когда нужны нестандартные преобразования типа, подумайте над проблемой записи целых значений типа <kbd>short</kbd> в файл, который находится на диске.
<p class="tj">В стандартной библиотеке языка С не определено никакой функции, специально предназначенной для выполнения этой записи.
<p class="tj">Хотя данные любого типа можно записывать в файл, пользуясь функцией <kbd>fwrite()</kbd>, но было бы нерационально применять этот способ для такой простой операции, как запись на диск целых значений типа <kbd>short</kbd>, так как получится чрезмерный перерасход ресурсов. А вот, используя объединение, можно легко создать функцию <kbd>putw()</kbd>, которая по одному байту будет записывать в файл двоичное представление целого значения типа <kbd>short</kbd>. (В этом примере предполагается, что такие значения имеют длину 2 байта каждое.) Чтобы увидеть, как это делается, вначале создадим объединение, состоящее из целой переменной типа <kbd>short</kbd> и из массива 2-байтовых символов:
<pre>
union pw {
  short int i;
  char ch[2];
};
</pre>
<p class="tj">Теперь с помощью <kbd>pw</kbd> можно написать вариант <kbd>putw()</kbd>, приведенный в следующей программе.
<pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
union pw {
  short int i;
  char ch[2];
};
int putw(short int num, FILE *fp);
int main(void)
{
  FILE *fp;
  fp = fopen("test.tmp", "wb+");
  if(fp == NULL) {
    printf("Файл не открыт.\n");
    exit(1);
  }
  putw(1025, fp);  /* запись значения 1025 */
  fclose(fp);
  return 0;
}
int putw(short int num, FILE *fp)
{
  union pw word;
  word.i = num;
  putc(word.ch[0], fp); /* записать первую половину */
  return putc(word.ch[1], fp); /* записать вторую половину */
}
</pre>
<p class="tj">Хотя функция <kbd>putw()</kbd> и вызывается с целым аргументом типа <kbd>short</kbd>, ей для выполнения побайтовой записи в файл на диске все равно приходится использовать стандартную функцию <kbd>putc()</kbd>.
<p>
</p>
<hr><a href="../main.htm#07">Содержание</a> | <a href="0705.htm">&lt;&lt;&lt;</a> | <a href="0707.htm">&gt;&gt;&gt;</a>
</body>
</html>
