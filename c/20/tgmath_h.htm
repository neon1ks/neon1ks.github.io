<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>Математические макросы обобщенного типа - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head><body>
<a href="../main.htm#20">Содержание</a> | <a href="inttypes_h.htm">&lt;&lt;&lt;</a> | <a href="stdbool_h.htm">&gt;&gt;&gt;</a><hr>
<h1>Математические макросы обобщенного типа</h1>
<p class="tj">Как уже было сказано в <a href="../15/15.htm">главе 15</a>, в Стандарте С99 определены три версии для большинства математических функций — для параметров типа <kbd>float</kbd>, <kbd>double</kbd> и <kbd>long double</kbd>. Например, для вычисления синуса в стандарте С99 определены следующие функции:
<pre>
double sin(double <em>arg</em>);
float sinf(float <em>arg</em>);
long double sinl(long double <em>arg</em>);
</pre>
<p class="tj">У всех трех функций одно и то же назначение, разница заключается лишь в типе обрабатываемых ими данных. Причем для всех функций версия, работающая с типом <kbd>double</kbd>, — это первоначальная функция, определенная в Стандарте С89, а версии для типов <kbd>float</kbd> и <kbd>long double</kbd> были добавлены в Стандарте С99. Как было отмечено в <a href="../15/15.htm">главе 15</a>, имена функций для типа <kbd>float</kbd> имеют суффикс <kbd>f</kbd>, а имена функций для типа <kbd>long double</kbd> — суффикс <kbd>l</kbd>. (Необходимость в применении различных имен вызвана тем, что язык С не поддерживает перегрузки функций.) Предоставляя три различные функции, стандарт С99 позволяет выбрать ту из них, которая более всего приемлема в каких-то конкретных условиях. По тем же причинам каждая из математических функций комплексного аргумента также представлена тремя версиями.
<p class="tj">Несмотря на очевидную полезность наличия трех версий математических функций и функций комплексных чисел, к сожалению, работать с ними не всегда удобно. Во-первых, при передаче данных определенного типа очень важно не забыть приписать к имени функции надлежащий суффикс. Постоянно помнить об этом довольно утомительно, и потому повышается вероятность возникновения ошибок. Во-вторых, если в процессе разработки проекта изменить тип данных, передаваемых одной из таких функций, следует изменить и суффикс в имени функции. А это, опять-таки, очень способствует "размножению" ошибок. Чтобы справиться с этими (и другими) проблемами, в Стандарте С99 определен набор макросов для обобщенного типа, которые можно использовать вместо математических или комплексных функций. Эти "универсальные" макросы автоматически транслируются в вызов нужной функции в зависимости от типа аргумента. Макросы обобщенного типа определены в заголовке <kbd>&lt;tgmath.h&gt;</kbd>, который автоматически включает заголовки <kbd>&lt;math.h&gt;</kbd> и <kbd>&lt;complex.h&gt;</kbd>.
<p class="tj">Макросы обобщенного типа имеют те же имена, что и версии математических или комплексных функций для типа <kbd>double</kbd>, в вызовы которых они транслируются. (Эти имена также совпадают с именами функций, определенными в стандарте С89.) Например, макрос обобщенного типа для функций <kbd>sin()</kbd>, <kbd>sinf()</kbd> и <kbd>sinl()</kbd> использует имя <kbd>sin()</kbd>. "Универсальный" макрос для функций <kbd>csin()</kbd>, <kbd>csinf()</kbd> и <kbd>csinl()</kbd> также имеет имя <kbd>sin()</kbd>. Как уже упоминалось, соответствующая функция вызывается в зависимости от типа аргумента. Предположим, например, что в программе определены следующие переменные:
<pre>
long double ldbl;
float complex fcmplx;
</pre>
<p class="tj">Тогда вызов
<pre>cos(ldbl)</pre>
<p class="t">транслируется в вызов
<pre>cosl(ldbl),</pre>
<p class="t">а вызов
<pre>cos(fcmplx)</pre>
<p class="t">транслируется в вызов
<pre>ccosf(fcmplx)</pre>
<p class="tj">Как показано в приведенных выше примерах, макросы обобщенного типа предоставляют программисту удобное средство записи вызовов необходимых функций без потери производительности, точности или совместимости (переносимости) программного кода.
<p>
</p>
<hr><a href="../main.htm#20">Содержание</a> | <a href="inttypes_h.htm">&lt;&lt;&lt;</a> | <a href="stdbool_h.htm">&gt;&gt;&gt;</a>
</body>
</html>
