<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>Операции - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head>
<body>


<a href="../main.htm#02">Содержание</a> | <a href="0209.htm">&lt;&lt;&lt;</a> | <a href="0211.htm">&gt;&gt;&gt;</a><hr>
<h1>Операции</h1>
<p class="tj">Язык С содержит большое количество встроенных операций. Их роль в С значительно больше, чем в других языках программирования. Существует четыре основных класса операций: <em>арифметические</em>, <em>логические</em>, <em>поразрядные</em> и <em>операции сравнения</em>. Кроме них, есть также некоторые специальные операторы, например, оператор присваивания.
<h2>Оператор присваивания</h2>
<p class="tj">Оператор присваивания может присутствовать в любом выражении языка С<sup><a href="#11" id="1">[1]</a></sup>. Этим С отличается от большинства других языков программирования (Pascal, BASIC и FORTRAN), в которых присваивание возможно только в отдельном операторе. Общая форма оператора присваивания:
<pre><em>имя_переменной=выражение;</em></pre>
<p class="tj">Выражение может быть просто константой или сколь угодно сложным выражением. В отличие от Pascal или Modula-2, в которых для присваивания используется знак ":=", в языке С оператором присваивания служит единственный знак присваивания "=". <em>Адресатом</em> (<em>получателем</em>), т.е. левой частью оператора присваивания должен быть объект, способный получить значение, например, переменная.
<p class="tj">В книгах по С и в сообщениях компилятора часто встречаются термины <em>lvalue</em><sup><a href="#22" id="2">[2]</a></sup> (<em>left side value</em>) и <em>rvalue</em><sup><a href="#33" id="3">[3]</a></sup> (<em>right side value</em>). Попросту говоря, <em>lvalue</em> — это объект. Если этот объект может стоять в левой части присваивания, то он называется также <em>модифицируемым</em> (<em>modifiable</em>) <em>lvalue</em>. Подытожим сказанное: <em>lvalue</em> — это объект в левой части оператора присваивания, получающий значение, чаще всего этим объектом является переменная. Термин <em>rvalue</em> означает значение выражения в правой части оператора присваивания.
<h3>Преобразование типов при присваиваниях</h3>
<p class="tj">Если в операции встречаются переменные разных типов, происходит <em>преобразование типов</em>. В операторе присваивания действует простое правило: значение выражения в правой части преобразуется к типу объекта в левой части.
<pre>
int x;
char ch;
float  f;
void func(void)
{
  ch = x;    /* 1-я строка */
  x = f;     /* 2-я строка */
  f = ch;    /* 3-я строка */
  f = x;     /* 4-я строка */
}
</pre>
<p class="tj">В 1-й строке этого примера старшие двоичные разряды целой переменной <kbd>х</kbd> отбрасываются, а в <kbd>ch</kbd> заносятся младшие 8 бит. Если значение <kbd>х</kbd> лежит в интервале от 0 до 255, то <kbd>ch</kbd> и <kbd>х</kbd> будут идентичны и потери информации не произойдет. В противном случае в <kbd>ch</kbd> будут занесены только младшие разряды переменной <kbd>х</kbd>. Во 2-й строке в <kbd>х</kbd> будет записана целая часть числа <kbd>f</kbd>. В 3-й строке произойдет преобразование целого 8-разрядного числа, хранящегося в <kbd>ch</kbd>, в число в плавающем формате. В 4-й строке произойдет то же самое, только с 16-разрядным целым.
<p class="tj">Преобразование целых в символы и длинных целых в целые удаляет соответствующее количество старших двоичных разрядов. В 16-разрядной среде теряются 8 битов при преобразовании целого в символ и 16 битов при преобразовании длинного целого в целое. В 32-разрядной среде теряются 24 бита при преобразовании целого в символ и 16 битов при преобразовании целого в короткое целое.
<p class="tj">В табл. 2.3. приведены варианты потери информации при некоторых преобразованиях. Необходимо помнить, что преобразование <kbd>int</kbd> во <kbd>float</kbd> или <kbd>float</kbd> в <kbd>double</kbd> не повышает точность вычислений. При таком преобразовании только изменяется форма представления числа. Некоторые компиляторы при преобразовании <kbd>char</kbd> в <kbd>int</kbd> считают переменную <kbd>char</kbd> положительной независимо от ее значения. Другие компиляторы считают переменную <kbd>char</kbd> отрицательной, если она больше 127. Поэтому для обеспечения переносимости программы необходимо использовать переменные типа <kbd>char</kbd> для хранения символов, а переменные типа <kbd>signed char</kbd> и <kbd>int</kbd> (целый) — для хранения чисел.</p>
<table class="table table-bordered">
<caption><strong>Таблица 2.3. Результат некоторых преобразований типов</strong><caption>
<tr><th><em>Тип адресата</em><th><em>Тип выражения</em><th><em>Потеря информации</em>
<tr><td>signed char<td>char<td>Если значение > 127, то результат отрицательный
<tr><td>char<td>short int<td>Старшие 6 бит
<tr><td>char<td>int (16-разрядный)<td>Старшие 8 бит
<tr><td>char<td>int (32-разрядный)<td>Старшие 24 бит
<tr><td>char<td>long int<td>Старшие 24 бит
<tr><td>short int<td>int (16-разрядный)<td>Нет
<tr><td>short int<td>int (32-разрядный)<td>Старшие 16 бит
<tr><td>int (16-разрядный)<td>long int<td>Старшие 16 бит
<tr><td>int (32-разрядный)<td>long int<td>Нет
<tr><td>long int (32-разрядный)<td>long long int (64-разрядный)<td>Старшие 32 бита (это относится только к C99)
<tr><td>int<td>float<td>Дробная часть
<tr><td>float<td>double<td>Результат округляется
<tr><td>double<td>long double<td>Результат округляется
</table>
<p class="tj">Если какое-либо преобразование не приведено в табл. 2.3, то, чтобы определить, что именно теряется в результате этого преобразования, нужно представить его в виде композиции (суперпозиции, произведения) указанных в таблице преобразований и затем провести последовательные преобразования. Например, преобразование <kbd>double</kbd> в <kbd>int</kbd> эквивалентно последовательному выполнению двух преобразований: сначала <kbd>double</kbd> в <kbd>float</kbd>, а затем <kbd>float</kbd> в <kbd>int</kbd>.
<h3>Множественные присваивания</h3>
<p class="tj">В одном операторе присваивания можно присвоить одно и то же значение многим переменным. Для этого используется оператор <em>множественного присваивания</em><sup><a href="#44" id="4">[4]</a></sup>, например:
<pre>x = y = z = 0;</pre>
<p class="tj">Следует отметить, что в практике программирования этот прием используется очень часто.
<h3>Составное присваивание</h3>
<p class="tj">Составное присваивание — это разновидность оператора присваивания, в которой запись сокращается и становится более удобной в написании<sup><a href="#55" id="5">[5]</a></sup>. Например, оператор
<pre>x = x+10;</pre>
<p class="t">можно записать как
<pre>x += 10;</pre>
<p class="tj">Оператор "+=" сообщает компилятору, что к переменной <kbd>х</kbd> нужно прибавить 10.
<p class="tj">"Составные" операторы<sup><a href="#66" id="6">[6]</a></sup> присваивания существуют для всех бинарных операций (то есть операций, имеющих два операнда). Любой оператор вида
<pre><em>переменная = переменная оператор выражение;</em></pre>
<p class="t">можно записать как
<pre><em>переменная оператор = выражение;</em></pre>
<p class="tj">Еще один пример:
<pre>x = x-100;</pre>
<p class="t">означает то же самое, что и
<pre>x -= 100;</pre>
<p class="tj">Составное присваивание значительно компактнее, чем соответствующее простое присваивание, поэтому его иногда называют <em>стенографическим</em> (<em>shorthand</em>) <em>присваиванием</em>. В программах на С этот оператор широко используется, поэтому необходимо хорошо его усвоить.
<h2>Арифметические операции</h2>
<p class="tj">В табл. 2.4 приведены арифметические операции С. Операции +, —, * и / работают так же, как и в большинстве других языков программирования. Их можно применять почти ко всем встроенным типам данных. Если операция / применяется к целому или символьному типам, то остаток от деления отбрасывается. Например, результатом операции 5/2 является 2.</p>
<table class="table table-bordered">
<caption><strong>Таблица 2.4. Арифметические операции</strong><caption>
<tr><th><em>Оператор</em><th><em>Операция</em>
<tr><td>-<td>Вычитание, так же унарный минус
<tr><td>+<td>Сложение
<tr><td>*<td>Умножение
<tr><td>/<td>Деление
<tr><td>%<td>Остаток от деления
<tr><td>--<td>Декремент<sup><a href="#77" id="7">[7]</a></sup>, или уменьшение
<tr><td>++<td>Инкремент<sup><a href="#88" id="8">[8]</a></sup>, или увеличение
</table>
<p class="tj">Оператор деления по модулю % в С работает так же, как и в других языках, его результатом является остаток от целочисленного деления. Этот оператор, однако, нельзя применять к типам данных с плавающей точкой. Применение оператора % иллюстрируется следующим примером:
<pre>
int x, y;
x = 5;
y = 2;
printf("%d ", x/y);   /* напечатает 2 */
printf("%d ", x%y);   /* напечатает 1,
                         остаток от целочисленного деления */
x = 1;
y = 2;
printf("%d %d", x/y, x%y); /*  напечатает 0 1 */
</pre>
<p class="tj">Последняя строка программы напечатает <kbd>0 1</kbd> потому, что при целочисленном делении остаток отбрасывается и здесь результат будет 0, а сам остаток равен 1.
<p class="tj">Унарный минус умножает операнд на -1, то есть меняет его знак на противоположный.
<h2>Операции увеличения (инкремента) и уменьшения (декремента)</h2>
<p class="tj">В языке С есть два полезных оператора, значительно упрощающие широко распространенные операции. Это инкремент ++ и декремент --. Оператор ++ увеличивает значение операнда на 1, а — уменьшает на 1. Иными словами,
<pre>x = x+1;</pre>
<p class="t">можно записать как
<pre>++x;</pre>
<p class="tj">Аналогично оператор
<pre>x = x-1;</pre>
<p class="t">равносилен оператору
<pre>x--;</pre>
<p class="tj">Как инкремент, так и декремент могут предшествовать операнду (префиксная форма) или следовать за ним (постфиксная форма). Например
<pre>x = x+1;</pre>
<p class="t">можно записать как в виде
<pre>++x;</pre>
<p class="t">так и в виде
<pre>x++;</pre>
<p class="tj">Однако префиксная и постфиксная формы отличаются при использовании их в выражениях. Если оператор инкремента или декремента предшествует операнду, то сама операция выполняется до использования результата в выражении. Если же оператор следует за операндом, то в выражении значение операнда используется до выполнения операции инкремента или декремента. То есть для выражения эта операция как бы не существует, она выполняется только для операнда. Например,
<pre>x = 10;
y = ++x;</pre>
<p class="t">присваивает <kbd>у</kbd> значение 11. Однако если написать
<pre>x = 10;
y = x++;</pre>
<p class="t">то переменной <kbd>у</kbd> будет присвоено значение 10. В обоих случаях х присвоено значение 11, разница только в том, когда именно это случилось, до или после присваивания значения переменной <kbd>у</kbd>.
<p class="tj">Большинство компиляторов С генерируют для инкремента и декремента очень быстрый, эффективный объектный код, значительно лучший, чем для соответствующих операторов присваивания. Поэтому везде, где это возможно, рекомендуется использовать инкремент и декремент.
<p class="tj">Приоритет выполнения арифметических операторов следующий:
<pre>
<strong>Наивысший</strong>     ++ --
              - (унарный минус)
              * / %
<strong>Наинизший</strong>     + -
</pre>
<p class="tj">Операции с одинаковым приоритетом выполняются слева направо. Используя круглые скобки, можно изменить порядок вычислений. В языке С круглые скобки интерпретируются компилятором так же, как и в любом другом языке программирования: они как бы придают операции (или последовательности операций) наивысший приоритет.
<h2>Операции сравнения и логические операции</h2>
<p class="tj">Операции <em>сравнения</em> — это операции, в которых значения двух переменных сравниваются друг с другом. <em>Логические</em> же операции реализуют средствами языка С операции формальной логики. Между логическими операциями и операциями сравнения существует тесная связь: результаты операций <em>сравнения</em> часто являются операндами <em>логических</em> операций.
<p class="tj">В операциях сравнения и логических операциях в качестве операндов и результатов операций используются значения ИСТИНА (true) и ЛОЖЬ (false). В языке С значение ИСТИНА представляется любым числом, отличным от нуля. Значение ЛОЖЬ представляется нулем. Результатом операции сравнения или логической операции являются ИСТИНА (true, 1) или ЛОЖЬ (false, 0).</p>
<table class="table table-bordered">
<tr><td class="tdnote">На заметку<td class="tj">Как в С89, так и в С99 значение ИСТИНА представлено любым отличным от нуля числом, а ЛОЖЬ — нулем. В стандарте С99 дополнительно определен тип данных <kbd>_Bооl</kbd>, переменные которого могут принимать значение только или 1. Подробнее см. <a href="../II.htm">часть II</a>.
</table>
<p class="tj">В табл. 2.5 приведен полный список операций сравнения и логических операций. Таблица истинности логических операций имеет следующий вид:</p>
<table class="table table-bordered">
<tr><th><em>p</em><th><em>q</em><th><em>p && q</em><th><em>p || q</em><th><em>!p</em>
<tr class="text-center"><td>0<td>0<td>0<td>0<td>1
<tr class="text-center"><td>0<td>1<td>0<td>1<td>1
<tr class="text-center"><td>1<td>1<td>1<td>1<td>0
<tr class="text-center"><td>1<td>0<td>0<td>1<td>0
</table>
<p class="tj">Как операции сравнения, так и логические операции имеют низший приоритет по сравнению с арифметическими. То есть, выражение 10&gt;1+12 интерпретируется как 10&gt;(1+12). Результат, конечно, равен ЛОЖЬ.
<p class="tj">В одном выражении можно использовать несколько операций:
<pre>10&gt;5 && !(10&lt;9) || 3&lt;4</pre>
<p class="tj">В этом случае результатом будет ИСТИНА.
<p class="tj">В языке С не определена операция "исключающего ИЛИ" (exclusive OR, или XOR). Однако с помощью логических операторов несложно написать функцию, выполняющую эту операцию. Результатом операции "исключающее ИЛИ" является ИСТИНА, если и только если один из операндов (но не оба) имеют значение ИСТИНА. В следующем примере функция <kbd>xor()</kbd> возвращает результат операции "исключающее ИЛИ", а операндами служат аргументы функции:
<pre>
#include &lt;stdio.h&gt;
int xor(int a, int b);
int main(void)
{
  printf("%d", xor(1, 0));
  printf("%d", xor(1, 1));
  printf("%d", xor(0, 1));
  printf("%d", xor(0, 0));
  return 0;
}
/* Выполнение логической оперции
   исключающее ИЛИ над двумя аргументами. */
int xor(int a, int b)
{
  return (a || b) && !(a && b);
}
</pre>
<table class="table table-bordered">
<caption><strong>Таблица 2.5. Операции сравнения и логические операции</strong><caption>
<tr class="text-center"><th colspan="2"><em>Операторы сравнения</em>
<tr><th><em>Оператор</em><th><em>Операция</em>
<tr><td>&gt;<td>Больше чем
<tr><td>&gt;=<td>Больше или равно
<tr><td>&lt;<td>Меньше чем
<tr><td>&lt;=<td>Меньше или равно
<tr><td>==<td>Равно
<tr><td>!=<td>Не равно
<tr class="text-center"><th colspan="2"><em>Логические операции</em>
<tr><th><em>Оператор</em><th><em>Операция</em>
<tr><td>&&<td>И
<tr><td>||<td>ИЛИ
<tr><td>!<td>НЕ, отрицание
</table>
<p class="tj">Ниже приведен приоритет логических операций:
<pre>
<strong>Наивысший</strong>     !
              &gt; &gt;= &lt; &lt;=
              == !=
              &&
<strong>Наинизший</strong>     ||
</pre>
<p class="tj">Как и в арифметических выражениях, для изменения порядка выполнения операций сравнения и логических операций можно использовать круглые скобки. Например, выражение:
<pre>!0 && 0 || 0</pre>
<p class="t">равно ЛОЖЬ. Однако, если добавить скобки как показано ниже, то результатом будет ИСТИНА:
<pre>!(0 && 0) || 0</pre>
<p class="tj">Необходимо помнить, что результатом любой операции сравнения или логической операции есть 0 или 1. Поэтому следующий фрагмент программы является правильным и в результате его выполнения будет напечатано <kbd>1</kbd>.
<pre>
int x;
x = 100;
printf("%d", x&gt;10);
</pre>
<h2>Поразрядные операции</h2>
<p class="tj">В отличие от многих других языков программирования, в С определен полный набор <em>поразрядных операций</em><sup><a href="#99" id="9">[9]</a></sup>. Это обусловлено тем, что С был задуман как язык, призванный во многих приложениях заменить ассемблер, который способен оперировать битами данных. <em>Поразрядные операции</em> — это тестирование (проверка), сдвиг или присвоение значений отдельным битам данных. Эти операции осуществляются над ячейками памяти, содержащими данные типа <kbd>char</kbd> или <kbd>int</kbd>. Данные типа <kbd>float</kbd>, <kbd>double</kbd>, <kbd>long double</kbd>, <kbd>void</kbd> или другие более сложные не могут участвовать в поразрядных операциях. В табл. 2.6 приведен полный список знаков поразрядных операций, выполняемых над отдельными разрядами (битами) операндов.</p>
<table class="table table-bordered">
<caption><strong>Таблица 2.6. Поразрядные операции</strong><caption>
<tr><th><em>Оператор</em><th><em>Операция</em>
<tr><td>&<td>И
<tr><td>|<td>ИЛИ
<tr><td>^<td>исключающее ИЛИ
<tr><td>~<td>НЕ (отрицание, дополнение к 1)
<tr><td>&gt;&gt;<td>Сдвиг вправо
<tr><td>&lt;&lt;<td>Сдвиг влево
</table>
<p class="tj">Таблицы истинности логических операций и поразрядных операций И, ИЛИ, НЕ совпадают. Отличие лишь в том, что поразрядные операции выполняются над отдельными разрядами (битами) операндов. Операция "исключающее ИЛИ" имеет следующую таблицу истинности:</p>
<table class="table table-bordered">
<tr><th><em>p</em><th><em>q</em><th><em>p ^ q</em>
<tr class="text-center"><td>0<td>0<td>0
<tr class="text-center"><td>1<td>0<td>1
<tr class="text-center"><td>1<td>1<td>0
<tr class="text-center"><td>0<td>1<td>1
</table>
<p class="tj">Как показано в таблице, результат операции "исключающее ИЛИ" равен ИСТИНА если и только если один из операндов равен 1, иначе результат будет равен ЛОЖЬ.
<p class="tj">Наиболее часто поразрядные операции применяются при программировании драйверов устройств, таких как модемы, а также процедур, выполняющих операции над файлами, и стандартных программ обслуживания принтера. В них поразрядные операции используются для маскирования определенных битов, например, бита контроля четности<sup><a href="#1010" id="010">[10]</a></sup>. (Этот бит служит для проверки правильности остальных битов в байте. Чаще всего это бит старшего разряда в каждом байте.)
<p class="tj">Операция И может быть использована для <em>очищения бита</em><sup><a href="#1111" id="011">[11]</a></sup>. Иными словами, для гашения бита используется следующее свойство операции И: если бит одного из операндов равен 0, то соответствующий бит результата будет равен 0 независимо от состояния этого бита во втором операнде. Например, следующая функция читает символ из порта модема и обнуляет бит контроля четности:
<pre>
char get_char_from_modem(void)
{
  char ch;
  ch = read_modem(); /* чтение символа из
                        порта модема */
  return(ch & 127);
}
</pre>
<p class="tj">Бит контроля четности, находящийся в 8-м разряде байта, обнуляется с помощью операции И. При этом в качестве второго операнда выбирается число, имеющее 1 в разрядах от 1 до 7, и 0 в 8-м разряде. Именно таким числом и является 127, поскольку все биты двоичного представления числа 127, кроме старшего, равны 1. В силу указанного свойства операции И операция ch & 127 оставляет все биты, кроме старшего, без изменения, а старший обнуляет:
<p class="tj">Бит контроля четности
<pre>
  |
  V
  1100 0001     переменная ch содержит символ 'A' с битом четности
  0111 1111     двоичное представление числа 127
& ---------     поразрядная операция И
  0100 0001     символ 'A' с обнуленным битом контроля четности
</pre>
<p class="tj">Поразрядная операция ИЛИ, являющаяся двойственной операции И, применяется для установки необходимых битов в 1. В следующем примере выполняется операция 128 | 3:
<pre>
  |
  V
  1000 0000     двоичное представление числа 128
  0000 0011     двоичное представление числа 3
| ---------     поразрядная операция ИЛИ
  1000 0011     результат
</pre>
<p class="tj">Операция исключающего ИЛИ (XOR) устанавливает бит результата в 1, если соответствующие биты операндов различны. В следующем примере выполняется операция 127 ^ 120:
<pre>
  |
  V
  0000 0011     двоичное представление числа 127
  0111 1000     двоичное представление числа 120
^ ---------     поразрядная операция XOR
  0000 0111     результат
</pre>
<p class="tj">Необходимо помнить, что результат логической операции всегда равен 0 или 1. В то же время результатом поразрядной операции может быть любое значение, которое, как видно из предыдущих примеров, не обязательно равно 0 или 1.
<p class="tj">Поразрядные операторы сдвига &gt;&gt; и &lt;&lt; сдвигают все биты переменной вправо или влево. Общая форма оператора сдвига вправо:
<pre><em>переменная &gt;&gt; количество_разрядов</em></pre>
<p class="tj">Общая форма оператора сдвига влево:
<pre><em>переменная &lt;&lt; количество_разрядов</em></pre>
<p class="tj">Во время сдвига битов в один конец числа, другой конец заполняется нулями. Но если число типа <kbd>signed int</kbd> отрицательно, то при сдвиге вправо левый конец заполняется единицами, так что знак числа сохраняется. Необходимо отметить различие между сдвигом и циклическим сдвигом. При циклическом сдвиге биты, сдвигаемые за пределы операнда, появляются на другом конце операнда. А при сдвиге вышедшие за границу биты теряются.
<p class="tj">Поразрядные операции сдвига очень полезны при декодировании выходов внешних устройств, например таких, как цифро-аналоговые преобразователи, а также при считывании информации о статусе устройств. Побитовые операторы сдвига могут быстро умножать и делить целые числа. Как показано в табл. 2.7, сдвиг на один бит вправо делит число на 2, а на один бит влево — умножает на 2. Следующая программа иллюстрирует применение операторов сдвига:
<pre>
/* Пример применения операторов сдвига. */
#include &lt;stdio.h&gt;
int main(void)
{
  unsigned int i;
  int j;
  i = 1;
  /* сдвиг влево */
  for(j=0; j&lt;4; j++) {
    i = i &lt;&lt; 1;  /* сдвиг i влево на 1 разраяд, что
                    равносильно умножению на 2 */
    printf("Сдвиг влево на %d разр.: %d\n", j, i);
  }
  /* сдвиг вправо */
  for(j=0; j&lt;4; j++) {
    i = i &gt;&gt; 1;  /* сдвиг i вправо на 1 разраяд, что
                    равносильно делению на 2 */
    printf("Сдвиг вправо на %d разр.: %d\n", j, i);
  }
  return 0;
}
</pre>
<table class="table table-bordered">
<caption><strong>Таблица 2.7. Умножение и деление операторами сдвига</strong><caption>
<tr><th><em>unsigned char x</em><th><em>x после операции</em><th><em>значение x</em>
<tr><td>x = 7<td>0000 0111<td>7
<tr><td>x = x &lt;&lt; 1<td>0000 1110<td>14
<tr><td>x = x &lt;&lt; 3<td>0111 0000<td>112
<tr><td>x = x &lt;&lt; 2<td>1100 0000<td>192
<tr><td>x = x &gt;&gt; 1<td>0110 0000<td>96
<tr><td>x = x &gt;&gt; 2<td>0001 1000<td>24
<tr align=justify><td colspan="3">Каждый сдвиг влево умножает на 2. Потеря информации произошла после операции x &lt;&lt; 2 в результате сдвига за левую границу.<br>Каждый сдвиг вправо делит на 2. Сдвиг вправо потерянную информацию не восстановил.
</table>
<p class="tj">Поразрядная операция отрицания (дополнения) ~ инвертирует состояние каждого бита операнда. То есть, 0 преобразует в 1, а 1 — в 0.
<p class="tj">Поразрядные операции часто используются в процедурах кодирования. Проделав с дисковым файлом некоторые поразрядные операции, его можно сделать нечитаемым. Простейший способ сделать это — применить операцию отрицания к каждому биту:
<pre>Исходный байт 0010100
После 1-го отрицания 1101011
После 2-го отрицания 0010100</pre>
<p class="tj">Обратите внимание, при последовательном применении 2-х отрицаний результатом всегда будет исходное число. Таким образом, 1-е отрицание кодирует состояние байта, а 2-е — декодирует.
<p class="tj">В следующем примере оператор отрицания используется в функции шифрования символа:
<pre>
/* Простейшая процедура шифрования. */
char encode(char ch)
{
  return(~ch); /* оперция отрицания */
}
</pre>
<p class="tj">Конечно, взломать такой шифр не представляет труда.
<h2>Операция ?</h2>
<p class="tj">В языке С определен мощный и удобный оператор, который часто можно использовать вместо оператора вида if-then-else. Речь идет о тернарном операторе ?, общий вид которого следующий:
<pre><em>Выражение1 ? Выражение2 : Выражение3;</em></pre>
<p class="tj">Обратите внимание на использование двоеточия. Оператор ? работает следующим образом: сначала вычисляется <em>Выражение1</em>, если оно истинно, то вычисляется <em>Выражение2</em> и его значение присваивается всему выражению; если <em>Выражение1</em> ложно, то вычисляется <em>Выражение3</em> и всему выражению присваивается его значение. В примере
<pre>x = 10;
y = x&gt;9 ? 100 : 200;</pre>
<p class="t">переменной <kbd>у</kbd> будет присвоено значение 100. Если бы <kbd>х</kbd> было меньше 9, то переменной <kbd>у</kbd> было бы присвоено значение 200. Эту же процедуру можно написать, используя оператор if-else:
<pre>x = 10;
if(x&gt;9) y = 100;
else y = 200;</pre>
<p class="tj">Более подробно оператор ? обсуждается в <a href="../03/03.htm">главе 3</a> в связи с условными операторами.
<h2>Операция получения адреса (&) и раскрытия ссылки (*)</h2>
<p class="tj"><em>Указатель</em> — это адрес объекта в памяти. <em>Переменная типа "указатель" (или просто переменная-указатель)</em> — это специально объявленная переменная, в которой хранится указатель на переменную определенного типа. В языке С указатели служат мощнейшим средством создания программ и широко используются для самых разных целей. Например, с их помощью можно быстро обратиться к элементам массива или дать функции возможность модифицировать свои аргументы. Указатели широко используются для связи элементов в списках, в двоичных деревьях и в других динамических структурах данных. <a href="../05/05.htm">Глава 5</a> полностью посвящена указателям. В данной главе коротко рассматриваются два оператора, использующиеся для работы с указателями.
<p class="tj">Первый из них — <em>оператор &</em>, это унарный оператор, возвращающий адрес операнда в памяти<sup><a href="#1212" id="012">[12]</a></sup>. (Унарной операцией называется операция, имеющая только один операнд.) Например, оператор
<pre>m = &count;</pre>
<p class="t">записывает в переменную <kbd>m</kbd> адрес переменной <kbd>count</kbd>. Этот адрес представляет собой адрес ячейки памяти компьютера, в которой размещена переменная. Адрес и значение переменной — совершенно разные понятия. Выражение "&переменная" означает "адрес переменной". Следовательно, инструкция <kbd>m = &scount;</kbd> означает: "Переменной <kbd>m</kbd> присвоить адрес, по которому расположена переменная <kbd>count;</kbd>".
<p class="tj">Допустим, переменная <kbd>count</kbd> расположена в памяти в ячейке с адресом 2000, а ее значение равно 100. Тогда в предыдущем примере переменной <kbd>m</kbd> будет присвоено значение 2000.
<p class="tj">Второй рассматриваемый <em>оператор *</em> является двойственным (дополняющим) по отношению к &<sup><a href="#1313" id="013">[13]</a></sup>. Оператор * является унарным оператором, он возвращает значение объекта, расположенного по указанному адресу. Операндом для * служит адрес объекта (переменной). Например, если переменная <kbd>m</kbd> содержит адрес переменной <kbd>count</kbd>, то оператор
<pre>q = *m;</pre>
<p class="t">записывает значение переменной <kbd>count</kbd> в переменную <kbd>q</kbd>. В нашем примере переменная <kbd>q</kbd> получит значение 100, потому что по адресу 2000 записано число 100, причем этот адрес записан в переменной <kbd>m</kbd>. Выражение "* адрес" означает "по адресу". Наш фрагмент программы можно прочесть как "<kbd>q</kbd> получает значение, расположенное по адресу <kbd>m</kbd>".
<p class="tj">К сожалению, символ операции раскрытия ссылки совпадает с символом операции умножения, а символ операции получения адреса — с символом операции поразрядного И. Необходимо помнить, что эти операторы не имеют никакого отношения друг к другу. Операторы * и & имеют более высокий приоритет, чем любая арифметическая операция, кроме унарного минуса, имеющего такой же приоритет.
<p class="tj">Если переменная является указателем, то в объявлении перед ее именем нужно поставить символ *, он сообщит компилятору о том, что это указатель на переменную данного типа. Например, объявление указателя на переменную типа char записывается так:
<pre>char *ch;</pre>
<p class="tj">Необходимо понимать, что <kbd>ch</kbd> — это не переменная типа <kbd>char</kbd>, а указатель на переменную данного типа, это совершенно разные вещи. Тип данных, на который указывает указатель (в данном случае это <kbd>char</kbd>), называется <em>базовым типом</em> указателя<sup><a href="#1414" id="014">[14]</a></sup>. Сам указатель является переменной, содержащей адрес объекта базового типа. Компилятор учтет размер указателя в архитектуре компьютера и выделит для него необходимое количество байтов, чтобы в указатель поместился адрес. Базовый тип указателя определяет тип объекта, хранящегося по этому адресу.
<p class="tj">В одном операторе объявления можно одновременно объявить и указатель, и переменную, не являющуюся указателем. Например, оператор
<pre>int x, *y, count;</pre>
<p class="t">объявляет <kbd>х</kbd> и <kbd>count</kbd> как переменные целого типа, а <kbd>у</kbd> — как указатель на переменную целого типа.
<p class="tj">В следующей программе операторы * и & используются для записи значения 10 в переменную <kbd>target</kbd>. Программа выведет значение 10 на экран.
<pre>
#include &lt;stdio.h&gt;
int main(void)
{
  int target, source;
  int *m;
  source = 10;
  m = &source;
  target = *m;
  printf("%d", target);
  return 0;
}
</pre>
<h2>Операция определения размера sizof</h2>
<p class="tj">Унарная операция <kbd>sizeof</kbd>, выполняемая во время компиляции программы, позволяет определить длину операнда в байтах. Например, если компилятор для чисел типа <kbd>int</kbd> отводит 4 байта, а для чисел типа <kbd>double</kbd> — 8, то следующая программа напечатает 8 4.
<pre>
double f;
printf("%d ", sizeof f);
printf("%d", sizeof(int));
</pre>
<p class="tj">Необходимо помнить, что для вычисления размера типа переменной имя типа должно быть заключено в круглые скобки. Имя переменной заключать в скобки не обязательно, но ошибки в этом не будет.
<p class="tj">В языке С определяется (с помощью спецификатора класса памяти <kbd>typedef</kbd>) специальный тип <kbd>size_t</kbd>, приблизительно соответствующий целому числу без знака. Результат операции <kbd>sizeof</kbd> имеет тип <kbd>size_t</kbd>. Но практически его можно использовать везде, где допустимо использование целого числа без знака.
<p class="tj">Оператор <kbd>sizeof</kbd> очень полезен для улучшения переносимости программ, так как переносимость существенно зависит от размеров встроенных типов данных. Для примера рассмотрим программу, работающую с базой данных, в которой необходимо хранить шесть целых чисел в одной записи. Если эта программа предназначена для работы на многих компьютерах, ни в коем случае нельзя полагаться на то, что размер целого числа на всех компьютерах будет один и тот же. В программе следует определять размер целого, используя оператор <kbd>sizeof</kbd>. Соответствующая программа имеет следующий вид:
<pre>
/* Запись шести целых чисел в дисковый файл. */
void put_rec(int rec[6], FILE *fp)
{
  int len;
  len = fwrite(rec, sizeof(int)*6, 1, fp);
  if(len != 1) printf("Ошибка при записи");
}
</pre>
<p class="tj">Приведенная функция <kbd>put_rec()</kbd> компилируется и выполняется правильно в любой среде, в том числе на 16- и 32-разрядных компьютерах.
<p class="tj">И в заключение: оператор <kbd>sizeof</kbd> выполняется во время трансляции, его результат в программе рассматривается как константа.
<h2>Оператор последовательного вычисления: оператор "запятая"</h2>
<p class="tj"><em>Оператор "запятая"</em><sup><a href="#1515" id="015">[15]</a></sup> связывает воедино несколько выражений. При вычислении левой части оператора "запятая" всегда подразумевается, что она имеет тип <kbd>void</kbd>. Это значит, что выражение, стоящее справа после оператора "запятая", является значением всего разделенного запятыми выражения. Например, оператор
<pre>x = (y=3, y+1);</pre>
<p class="t">сначала присваивает <kbd>у</kbd> значение 3, а затем присваивает <kbd>х</kbd> значение 4. Скобки здесь обязательны, потому что приоритет оператора "запятая" меньший, чем оператора присваивания.
<p class="tj">В операторе "запятая" выполняется последовательность операций. Если этот оператор стоит в правой части оператора присваивания, то его результатом всегда является выражение, стоящее последним в списке.
<h2>Оператор доступа к члену структуры (оператор . (точка)) и оператор доступа через указатель -&gt; (оператор стрелка)</h2>
<p class="tj">В языке С операторы . (точка) и -&gt; (стрелка) обеспечивают доступ к элементам структур и объединений. <em>Структуры</em> и <em>объединения</em> — это составные типы данных, в которых под одним именем хранятся многие объекты. (Структуры и объединения подробно рассматриваются в <a href="../07/07.htm">главе 7</a>.)
<p class="tj">Оператор точка используется для прямой ссылки на элемент структуры или объединения, т.е. перед точкой стоит имя структуры, а после — имя элемента структуры. Оператор стрелка используется с указателем на структуру или объединение, т.е. перед стрелкой стоит указатель на структуру. Например, во фрагменте программы
<pre>
struct employee
{
  char name[80];
  int age;
  float wage;
} emp;
struct employee *p = &emp; /* адрес emp заносится в p */
</pre>
<p class="t">для присвоения члену <kbd>wage</kbd> значения 123.33 необходимо записать
<pre>emp.wage = 123.23;</pre>
<p class="tj">То же самое можно сделать, использовав указатель на структуру:
<pre>p-&gt;wage = 123.23;</pre>
<h2>Оператор [] и ()</h2>
<p class="tj">Круглые скобки являются оператором, повышающим приоритет выполнения операций, которые в них заключены. Квадратные скобки служат для индексации массива (массивы подробно рассматриваются в <a href="../04/04.htm">главе 4</a>). Если в программе определен массив, то выражение в квадратных скобках представляет собой индекс массива. Например, в программе
<pre>
#include &lt;stdio.h&gt;
char s[80];
int main(void)
{
  s[3] = 'X';
  printf("%c", s[3]);
  return 0;
}
</pre>
<p class="t">значение 'Х' сначала присваивается четвертому элементу массива (в С элементы массива нумеруются с нуля), затем этот элемент выводится на экран.
<h2>Сводка приоритетов операций</h2>
<p class="tj">В табл. 2.8 приведены приоритеты всех операций, определенных в С. Необходимо помнить, что все операторы, кроме унарных и "?", связывают (присоединяют, ассоциируют) свои операнды слева направо. Унарные операторы (*, &, -) и "?" связывают (присоединяют, ассоциируют) свои операнды справа налево.</p>
<table class="table table-bordered">
<caption><strong>Таблица 2.8. Приоритеты опреаций в языке C</strong><caption>
<tr><th><em>Наивысший</em><th align=left>( ) [ ] -&gt; .
<tr><td><td>! ~ ++ -- - (type) * & sizeof<br>* / %<br>+ -<br>&lt;&lt; &gt;&gt;<br>&lt; &lt;= &gt; &gt;=<br>== !=<br>&<br>^<br>|<br>&&<br>||<br>?:<br>= += -= *= /= и т.д.
<tr><th><em>Наинизший</em><th align=left>,
</table>
<p><img src="../work/sup.bmp" alt="----------">
<blockquote>
<p class="tj"><sup><a href="#1" id="11">[1]</a></sup>В данном случае под оператором имеется в виду, конечно, знак операции. По этому поводу см. сделанное ранее примечание редактора о переводе термина <em>operator</em>
<p class="tj"><sup><a href="#2" id="22">[2]</a></sup><em>lvalue</em> — именующее выражение, т.е. выражение, которое может стоять в левой части оператора присваивания. Под lvalue также часто подразумевается адрес переменной. (С идентификатором переменной в программе связано две величины: адрес переменной и ее значение. Адрес используется, когда переменная стоит в левой части присваивания, значение — в правой части присваивания.) Иногда встречается и термин <em>l-значение</em>. Как бы то ни было, этим термином обозначается выражение, которое может находиться в левой части оператора присваивания. Семантически оно представляет собой адрес, по которому размещена переменная, массив, элемент структуры и т.п.
<p class="tj"><sup><a href="#3" id="33">[3]</a></sup><em>rvalue</em> — значение переменной; иногда переводится, как <em>r-значение</em>, т.е. значение в правой части оператора присваивания.
<p class="tj"><sup><a href="#4" id="44">[4]</a></sup><em>Множественное присваивание</em> — присваивание одного и того же значения нескольким переменным. Под множественным присваиванием также подразумевается конструкция языка программирования, позволяющая присвоить одно и то же значение нескольким переменным одновременно.
<p class="tj"><sup><a href="#5" id="55">[5]</a></sup>По этой причине варианты оператора присваивания, в которых используется такая запись, называются "сокращенными" или "укороченными". Что касается терминологии, то необходимо отметить также следующее обстоятельство. Хотя термины <em>присваивание</em> и <em>оператор присваивания</em> часто могут рассматриваться как синонимы, составное присваивание не является составным оператором! (Под составным оператором в языке С подразумевают блок.)
<p class="tj"><sup><a href="#6" id="66">[6]</a></sup>Под "составными" операторами в данном случае, конечно, подразумеваются составные знаки операций, т.е. знаки операций, состоящие из нескольких (обычно двух) символов. Составные операторы-блоки не имеют к этому никакого отношения.
<p class="tj"><sup><a href="#7" id="77">[7]</a></sup>На жаргоне программистов: <em>декрементация</em>.
<p class="tj"><sup><a href="#8" id="88">[8]</a></sup>На жаргоне программистов: <em>инкрементация</em>.
<p class="tj"><sup><a href="#9" id="99">[9]</a></sup>Называются также <em>битовыми</em>, <em>побитовыми</em> и <em>логическими операциями</em>.
<p class="tj"><sup><a href="#010" id="1010">[10]</a></sup><em>Бит контроля четности</em> называется также  контрольным двоичным разрядом четности, контрольным разрядом четности,  проверочным двоичным разрядом четности, проверочным разрядом четности, битом четности, разрядом четности, контрольным битом и битом контроля на четность. Это дополнительный бит, который добавляется к группе (обычно из семи) битов. Передающее устройство устанавливает значение бита четности равным нулю или единице так, чтобы сумма битов в каждом байте всегда была четной или нечетной в зависимости от выбора типа проверки — на четность или нечетность. Невыполнение условия такой проверки на приемном конце линии означает искажение по крайней мере одного бита при передаче. При обнаружении ошибки принимающее устройство делает запрос на повтор данных. Иными словами, это бит, добавляемый к данным для контроля их верности таким образом, чтобы сумма двоичных единиц, составляющих данное, включая единицу контрольного бита, всегда была четной (либо всегда нечетной).
<p class="tj"><sup><a href="#011" id="1111">[11]</a></sup><em>Очищение бита</em> — гашение, т.е. занесение нуля.
<p class="tj"><sup><a href="#012" id="1212">[12]</a></sup><em>Оператор &</em> называется также <em>оператором получения (взятия) адреса</em>.
<p class="tj"><sup><a href="#013" id="1313">[13]</a></sup><em>Оператор *</em> называется также <em>оператором косвенности, оператором раскрытия ссылки</em> и <em>оператором разыменования адреса</em>.
<p class="tj"><sup><a href="#014" id="1414">[14]</a></sup>Иногда называется также <em>основным</em> или <em>исходным</em> типом.
<p class="tj"><sup><a href="#015" id="1515">[15]</a></sup>Чаще встречается написание без кавычек: <em>оператор запятая</em>. Мы пишем кавычки лишь для того, чтобы новичкам было легче воспринимать несколько непривычное для них название оператора.
</blockquote>
<p>
</p>
<hr><a href="../main.htm#02">Содержание</a> | <a href="0209.htm">&lt;&lt;&lt;</a> | <a href="0211.htm">&gt;&gt;&gt;</a>


</body>
</html>
