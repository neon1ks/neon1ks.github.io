<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>Спецификаторы класса памяти - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head>
<body>


<a href="../main.htm#02">Содержание</a> | <a href="0206.htm">&lt;&lt;&lt;</a> | <a href="0208.htm">&gt;&gt;&gt;</a><hr>
<h1>Спецификаторы класса памяти</h1>
<p class="tj">Стандарт С поддерживает четыре спецификатора класса памяти:
<pre>
extern
static
register
auto
</pre>
<p class="tj">Эти спецификаторы сообщают компилятору, как он должен разместить соответствующие переменные в памяти. Общая форма объявления переменных при этом такова:
<pre><em>спецификатор_класса_памяти тип имя переменой;</em></pre>
<p class="tj">Спецификатор класса памяти в объявлении всегда должен стоять первым.</p>
<table class="table table-bordered">
<tr><td class="tdnote">На заметку<td class="tj">Стандарты С89 и С99 из соображений удобства синтаксиса утверждают, что <kbd>typedef</kbd> — это спецификатор класса памяти. Однако <kbd>typedef</kbd> не является собственно спецификатором. Подробнее  <kbd>typedef</kbd> рассматривается в книге далее.
</table>
<h2>Спецификатор extern</h2>
<p class="tj">Прежде чем приступить к рассмотрению спецификатора <kbd>extern</kbd>, необходимо коротко остановиться на компоновке программы. В языке С при редактировании связей к переменной может применяться одно из трех связываний: внутреннее, внешнее или же не относящееся ни к одному из этих типов. (В последнем случае редактирование связей к ней не применяется.) В общем случае к именам функций и глобальных переменных применяется внешнее связывание. Это означает, что после компоновки они будут доступны во всех файлах, составляющих программу. К объектам, объявленным со спецификатором <kbd>static</kbd> и видимым на уровне файла, применяется внутреннее связывание, после компоновки они будут доступны только внутри файла, в котором они объявлены. К локальным переменным связывание не применяется и поэтому они доступны только внутри своих блоков.
<p class="tj">Спецификатор <kbd>extern</kbd> указывает на то, что к объекту применяется внешнее связывание, именно поэтому они будут доступны во всей программе. Далее нам понадобятся чрезвычайно важные понятия объявления и описания. <em>Объявление</em> (<em>декларация</em>) объявляет имя и тип объекта. <em>Описание</em><sup><a href="#11" id="1">[1]</a></sup> выделяет для объекта участок памяти, где он будет находиться. Один и тот же объект может быть объявлен неоднократно в разных местах, но описан он может быть только один раз.
<p class="tj">В большинстве случаев объявление переменной является в то же время и ее описанием. Однако, если перед именем переменной стоит спецификатор <kbd>extern</kbd>, то объявление переменной может и не быть ее описанием. Таким образом, если нужно сослаться на переменную, определенную в другой части программы, необходимо объявить ее как внешнюю (<kbd>extern</kbd>).
<p class="tj">Приведем пример использования спецификатора <kbd>extern</kbd>. Обратите внимание, что глобальные переменные <kbd>first</kbd> и <kbd>last</kbd> объявлены <em>после</em> <kbd>main()</kbd>.
<pre>
#include &lt;stdio.h&gt;
int main(void)
{
  extern int first, last; /* используются глобальные переменные */
  printf("%d %d", first, last);
  return 0;
}
/* описание глобальных переменных first и last */
int first = 10, last = 20;
</pre>
<p class="tj">Программа напечатает <kbd>10 20</kbd>, потому что глобальные переменные <kbd>first</kbd> и <kbd>last</kbd> инициализированы этими значениями. Объявление <kbd>extern</kbd> сообщает компилятору, что переменные <kbd>first</kbd> и <kbd>last</kbd> определены в другом месте, поэтому программа компилируется без ошибки, несмотря даже на то, что <kbd>first</kbd> и <kbd>last</kbd> используются до своего описания.
<p class="tj">Обратите внимание, в этом примере объявление переменных со спецификатором <kbd>extern</kbd> необходимо только потому, что они не были объявлены до <kbd>main()</kbd>. Если бы их объявление встретилось перед <kbd>main()</kbd>, то в объявлении со спецификатором <kbd>extern</kbd> не было бы необходимости.
<p class="tj">При компиляции выполняются следующие правила. Если компилятор находит переменную, не объявленную внутри блока, он ищет ее объявление во внешних блоках. Если не находит ее и там, то ищет среди объявлений глобальных переменных. В предыдущем примере, если бы не было объявления <kbd>extern</kbd>, компилятор не нашел бы <kbd>first</kbd> и <kbd>last</kbd> среди глобальных переменных, потому что они объявлены после <kbd>main()</kbd>. Здесь спецификатор <kbd>extern</kbd> сообщает компилятору, что эти переменные будут объявлены в файле позже.
<p class="tj">Как сказано выше, спецификатор <kbd>extern</kbd> позволяет объявить переменную, не описывая ее. Но если в объявлении со спецификатором <kbd>extern</kbd> инициализировать переменную, то это объявление становится также и описанием. При этом программист обязательно должен учитывать, что объект может иметь много объявлений, но лишь одно описание.
<p class="tj">Спецификатор <kbd>extern</kbd> играет большую роль в программах, состоящих из многих файлов. В языке С программа может быть записана в нескольких файлах, которые компилируются раздельно, а затем компонуются в одно целое. В этом случае необходимо как-то сообщить всем файлам о глобальных переменных программы. Самый лучший (и наиболее переносимый) способ сделать это — определить (описать) все глобальные переменные в одном файле и объявить их со спецификатором <kbd>extern</kbd> в остальных файлах, как показано на рис. 2.1.</p>
<table class="table">
<caption class="bottom"><p class="tj"><em>Рис. 2.1. Использование глобальных переменных в раздельно компилируемых модулях</em>
<tr><td>
<pre>
  <strong>Файл 1</strong>                    <strong>Файл 2</strong>
int x, y;                 extern int x, y;
char ch;                  extern char ch;
int main(void)            void func22(void)
{                         {
  /* ... */                 x = y / 10;
}                         }
void func1(void)          void func23(void)
{                         {
  x = 123;                  y = 10;
}                         }
</pre>
</table>
<p class="tj">Во втором файле спецификатор <kbd>extern</kbd> сообщает компилятору, что эти переменные определены в других файлах. Таким образом компилятор узнает имена и типы переменных, размещенных в другом месте, и может отдельно компилировать второй файл, ничего не зная о первом. При компоновке этих двух модулей все ссылки на глобальные переменные будут разрешены.
<p class="tj">На практике программисты обычно включают объявления <kbd>extern</kbd> в заголовочные файлы, которые просто подключаются к каждому файлу исходного текста программы. Это более легкий путь, который к тому же приводит к меньшему количеству ошибок, чем повторение этих объявлений вручную в каждом файле.</p>
<table class="table table-bordered">
<tr><td class="tdnote">На заметку<td class="tj">Спецификатор <kbd>extern</kbd> можно применять в объявлении функций, но в этом нет необходимости.
</table>
<h2>Спецификатор static</h2>
<p class="tj">Переменные, объявленные со спецификатором <kbd>static</kbd>, хранятся постоянно внутри своей функции или файла. В отличие от глобальных переменных они невидимы за пределами своей функции или файла, но они сохраняют свое значение между вызовами. Эта особенность делает их полезными в общих и библиотечных функциях, которые будут использоваться другими программистами. Спецификатор <kbd>static</kbd> воздействует на локальные и глобальные переменные по-разному.
<h3>Локальные статические переменные</h3>
<p class="tj">Для локальной переменной, описанной со спецификатором <kbd>static</kbd>, компилятор выделяет в постоянное пользование участок памяти, точно так же, как и для глобальных переменных. Коренное отличие статических локальных от глобальных переменных заключается в том, что статические локальные переменные видны только внутри блока, в котором они объявлены. Говоря коротко, статические локальные переменные — это локальные переменные, сохраняющие свое значение между вызовами функции.
<p class="tj">Статические локальные переменные очень важны при создании функций, работающих отдельно, так как многие процедуры требуют сохранения некоторых значений между вызовами. Если бы не было статических переменных, вместо них пришлось бы использовать глобальные, подвергая их риску непреднамеренного изменения другими участками программы. Рассмотрим пример функции, в которой особенно уместно применение статической локальной переменной. Это — генератор последовательности чисел, каждое из которых зависит только от предыдущего. Для хранения числа между вызовами можно использовать глобальную переменную. Однако тогда при каждом использовании функции придется объявлять эту переменную и, что особенно неудобно, постоянно следить за тем, чтобы ее объявление не конфликтовало с объявлениями других глобальных переменных. Значительно лучшее решение — объявить эту переменную со спецификатором <kbd>static</kbd>:
<pre>
int series(void)
{
  static int series_num;
  series_num = series_num+23;
  return series_num;
}
</pre>
<p class="tj">В этом примере переменная <kbd>series_num</kbd> продолжает существовать между вызовами функций, в то время как обычная локальная переменная создается заново при каждом вызове, а затем уничтожается. Поэтому в данном примере каждый вызов <kbd>series()</kbd> генерирует новое число, зависящее от предыдущего, причем удается обойтись без глобальных переменных.
<p class="tj">Статическую локальную переменную можно инициализировать. Это значение присваивается ей только один раз — в начале работы всей программы, но не при каждом входе в блок программы, как обычной локальной переменной. В следующей версии функции <kbd>series()</kbd> статическая локальная переменная инициализируется числом 100:
<pre>
int series(void)
{
  static int series_num = 100;
  series_num = series_num+23;
  return series_num;
}
</pre>
<p class="tj">Теперь эта функция всегда будет генерировать последовательность, начинающуюся с числа 123. Однако во многих случаях необходимо дать пользователю программы возможность ввести первое число вручную. Для этого переменную <kbd>series_num</kbd> можно сделать глобальной и предусмотреть возможность задания начального значения. Если же отказаться от объявления переменной <kbd>series_num</kbd> в качестве глобальной, то необходимо ее объявить со спецификатором <kbd>static</kbd>.
<h3>Глобальные статические переменные</h3>
<p class="tj">Спецификатор <kbd>static</kbd> в объявлении глобальной переменной заставляет компилятор создать глобальную переменную, видимую только в том файле, в котором она объявлена. Статическая глобальная переменная, таким образом, подвергается внутреннему связыванию, как описано ранее в разделе "Спецификатор extern". Это значит, что хоть эта переменная и глобальная, тем не менее процедуры в других файлах не увидят ее и не смогут случайно изменить ее значение. Этим снижается риск нежелательных побочных эффектов. А в тех относительно редких случаях, когда для выполнения задачи статическая локальная переменная не подойдет, можно создать небольшой отдельный файл, который содержит только функции, в которых используется эта статическая глобальная переменная. Затем этот файл необходимо откомпилировать отдельно; тогда можно быть уверенным, что побочных эффектов не будет.
<p class="tj">В следующем примере иллюстрируется применение статической глобальной переменной. Здесь генератор последовательности чисел переделан так, что начальное число задается вызовом другой функции, <kbd>series_start()</kbd>:
<pre>
/* Это должно быть в одном файле
     отдельно от всего остального. */
static int series_num;
void series_start(int seed);
int series(void);
int series(void)
{
  series_num = series_num+23;
  return series_num;
}
/* иницилизирует переменную series_num */
void series_start(int seed)
{
  series_num = seed;
}
</pre>
<p class="tj">Вызов функции <kbd>series_start()</kbd> с некоторым целым числом в качестве параметра инициализирует генератор <kbd>series()</kbd>. После этого можно генерировать последовательность чисел путем многократного вызова <kbd>series()</kbd>.
<p class="tj"><em>Обзор</em>: Имена локальных статических переменных видимы только внутри блока, в котором они объявлены; имена глобальных статических переменных видимы только внутри файла, в котором они объявлены.
<p class="tj">Если поместить функции <kbd>series()</kbd> и <kbd>series_num()</kbd> в библиотеку, то уже нельзя будет сослаться на переменную <kbd>series_num</kbd>, она оказалась спрятанной от любых операторов всей остальной программы. При этом в программе (конечно, в других файлах) можно объявить и использовать другую переменную под именем <kbd>series_num</kbd>. Иными словами, спецификатор <kbd>static</kbd> позволяет создать переменную, видимую только для функций, в которых она нужна, что исключает нежелательные побочные эффекты.
<p class="tj">Таким образом, при разработке больших и сложных программ для "сокрытия" переменных можно применять спецификатор <kbd>static</kbd>.
<h2>Спецификатор register</h2>
<p class="tj">Первоначально спецификатор класса памяти <kbd>register</kbd> применялся только к переменным типа <kbd>int</kbd>, <kbd>char</kbd> и для указателей. Однако стандарт С расширил использование спецификатора <kbd>register</kbd>, теперь он может применяться к переменным любых типов.
<p class="tj">В первых версиях компиляторов С спецификатор <kbd>register</kbd> сообщал компилятору, что переменная должна храниться в регистре процессора, а не в оперативной памяти, как все остальные переменные. Это приводит к тому, что операции с переменной <kbd>register</kbd> осуществляются намного быстрее, чем с обычными переменными, потому такая переменная уже находится в процессоре и не нужно тратить время на выборку ее значения из оперативной памяти (и на запись в память).
<p class="tj">В настоящее время определение спецификатора <kbd>register</kbd> существенно расширено. Стандарты С89 и С99 попросту декларируют "доступ к объекту так быстро, как только возможно". Практически при этом символьные и целые переменные по-прежнему размещаются в регистрах процессора. Конечно, большие объекты (например, массивы) не могут поместиться в регистры процессора, однако компилятор получает указание "позаботиться" о быстродействии операций с ними. В зависимости от конкретной реализации компилятора и операционной системы переменные <kbd>register</kbd> обрабатываются по-разному. Иногда спецификатор <kbd>register</kbd> попросту игнорируется, а переменная обрабатывается как обычная, однако на практике это бывает редко.
<p class="tj">Спецификатор <kbd>register</kbd> можно применить только к локальным переменным и формальным параметрам функций. В объявлении глобальных переменных применение спецификатора <kbd>register</kbd> не допускается. Ниже приведен пример использования переменной, в объявлении которой применен спецификатор <kbd>register</kbd>; эта переменная используется в функции возведения целого числа <kbd>m</kbd> в степень. (Степень — натуральное число — представлена идентификатором <kbd>е</kbd>.)
<pre>
int int_pwr(register int m,  register int e)
{
  register int temp;
  temp = 1;
  for(; e; e--) temp = temp * m;
  return temp;
}
</pre>
<p class="tj">В этом примере в объявлениях к переменным <kbd>е</kbd>, <kbd>m</kbd> и <kbd>temp</kbd> применен спецификатор <kbd>register</kbd> потому, что они используются внутри цикла. Переменные <kbd>register</kbd> идеально подходят для оптимизации скорости работы цикла. Как правило, переменные <kbd>register</kbd> используются там, где от них больше всего пользы, а именно, когда процесс многократно обращается к одной и той же переменной. Это существенно потому, что в объявлении можно применить спецификатор <kbd>register</kbd> к любой переменной, но средства оптимизации быстродействия могут быть применены далеко не ко всем переменным в равной степени.
<p class="tj">Максимальное количество переменных <kbd>register</kbd>, оптимизирующихся по быстродействию, зависит от среды программирования и конкретной реализации компилятора. Если таких переменных окажется слишком много, то компилятор автоматически преобразует регистровые переменные в нерегистровые. Этим обеспечивается переносимость программы в широком диапазоне процессоров.
<p class="tj">Обычно в регистры процессора можно поместить как минимум две переменные типа <kbd>char</kbd> или <kbd>int</kbd>. Однако в различных средах программирования режимы оптимизации могут очень отличаться, поэтому выбор режима оптимизации необходимо осуществлять с учетом особенностей конкретного компилятора.
<p class="tj">В языке С с помощью оператора <kbd>&</kbd> (рассматривается в этой главе далее) нельзя получить адрес регистровой переменной, потому что она может храниться в регистре процессора, который обычно не имеет адреса.
<p class="tj">Хотя в настоящее время применение спецификатора <kbd>register</kbd> в значительной мере вышло за его традиционные рамки, практически ощутимый эффект от его применения по-прежнему может быть получен только для переменных целого и символьного типа. Не следует ожидать заметного повышения скорости от объявления регистровыми переменных других типов.
<p><img src="../work/sup.bmp" alt="----------">
<blockquote>
<p class="tj"><sup><a href="#1" id="11">[1]</a></sup>Синонимы: <em>определение</em>, <em>дефиниция</em>.
</blockquote>
<hr><a href="../main.htm#02">Содержание</a> | <a href="0206.htm">&lt;&lt;&lt;</a> | <a href="0208.htm">&gt;&gt;&gt;</a>


</body>
</html>
