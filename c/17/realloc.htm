<!DOCTYPE HTML>
<html lang="ru">
<head>
<title>Функция relloc - cправочник по Си</title>
<meta charset="utf-8">
<link rel="stylesheet" href="../work/css.css">
</head>
<body>


<a href="../main.htm#17">Содержание</a> | <a href="17.htm#00">Глава 17</a><hr>
<h1>Функция realloc</h1>
<pre>
#include &lt;stdlib.h&gt;
void *realloc(void *ptr, size_t <em>size</em>);
</pre>
<p class="tj">Действие функции <kbd>realloc()</kbd> в версии С99 немного отличается от ее работы o С89, хотя конечный результат одинаков. В С89 функция <kbd>realloc()</kbd> изменяет размер блока ранее выделенной памяти, адресуемой указателем <em>ptr</em> в соответствии с заданным размером <em>size</em>. Значение параметра size может быть больше или меньше, чем перераспределяемая область. Функция <kbd>realloc()</kbd> возвращает указатель на блок памяти, по скольку не исключена необходимость перемещения этого блока (например при увеличении размера блока памяти). В этом случае содержимое старого блока (до <em>size</em> байтов) копируется в новый блок.
<p class="tj">В версии С99 блок памяти, адресуемый параметром <em>ptr</em>, освобождается, а вместо него выделяется новый блок. Содержимое нового блока совпадает с содержимым исходного (по крайней мере совпадают первые <em>size</em> байтов). Функция возвращает указатель на новый блок. Причем допускается, чтобы новый и старый блоки начинались с одинакового адреса (т.е. указатель, возвращаемый функцией <kbd>realloc()</kbd>, может совпадать с указателем, переданным в параметре <em>ptr</em>).
<p class="tj">Если указатель <em>ptr</em> нулевой, функция <kbd>realloc()</kbd> просто выделяет <em>size</em> байтов памяти и возвращает указатель на эту память. Если значение параметра <em>size</em> равно нулю, память, адресуемая параметром <em>ptr</em>, освобождается.
<p class="tj">Если в динамически распределяемой области памяти нет достаточного объема свободной памяти для выделения <em>size</em> байтов, возвращается нулевой указатель, а исходный блок памяти остается неизменным.
<h2>Пример</h2>
<p class="tj">Эта программа сначала выделяет блок памяти для 17 символов, копирует в них строку "Это - 17 символов", а затем использует <kbd>realloc()</kbd> для увеличения размера блока до 18 символов, чтобы разместить в конце точку.
<pre>
#include &lt;stdlib.h&gt
#include &lt;stdio.h&gt
#include &lt;string.h&gt
int main(void)
{
  char *p;
  p = malloc(17);
  if(!p) {
    printf("Ошибка при распределении памяти\n");
    exit(1);
  }
  strcpy(p, "Это - 17 символов");
  p = realloc(p, 18);
  if(!p) {
    printf("Ошибка при распределении памяти\n");
    exit(1);
  }
  strcat(p, ".");
  printf(p);
  free(p);
  return 0;
}
</pre>
<h2>Зависимые функции</h2>
<a href="free.htm">free()</a>  <a href="malloc.htm">malloc()</a>  <a href="calloc.htm">calloc()</a>
<p>
</p>
<hr><a href="../main.htm#17">Содержание</a> | <a href="17.htm#00">Глава 17</a>


</body>
</html>
